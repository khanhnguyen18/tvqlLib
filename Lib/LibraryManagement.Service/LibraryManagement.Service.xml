<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryManagement.Service</name>
    </assembly>
    <members>
        <member name="T:LibraryManagement.Service.UtilsService">
            <summary>
            An component type implementation of the 'tblUtils' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.UtilsServiceBase">
            <summary>
             An object representation of the 'tblUtils' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Utils.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Utils"/> class.
             </remarks>
        </member>
        <member name="T:LibraryManagement.Service.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:LibraryManagement.Service.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:LibraryManagement.Service.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.OnProcessStarting(LibraryManagement.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.OnProcessEnded(LibraryManagement.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.BulkInsert(LibraryManagement.Domain.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.DeepLoad(LibraryManagement.Domain.TList{`0},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.DeepSave(`0,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.DeepSave(`0,LibraryManagement.Dao.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:LibraryManagement.Service.ServiceBaseCore`2.DeepSave(LibraryManagement.Domain.TList{`0},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:LibraryManagement.Service.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:LibraryManagement.Service.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:LibraryManagement.Service.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:LibraryManagement.Service.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Utils"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.CreateUtils(System.Byte,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Utils"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_description"></param>
            <param name="_subname"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Get(LibraryManagement.Domain.UtilsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.GetById(System.Byte)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblUtils index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.GetById(System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblUtils index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Utils"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Utils"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Utils} of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Utils</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Insert(LibraryManagement.Domain.Utils)">
            <summary>
            public virtual method that Inserts a Utils object into the datasource using a transaction.
            </summary>
            <param name="entity">Utils object to Insert.</param>
            <remarks>After Inserting into the datasource, the Utils object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Utils entity = new Utils();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UtilsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Utils</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Utils</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Utils.
             <code><![CDATA[
             TList<Utils> list = new TList<Utils>();
             Utils entity = new Utils();
             entity.StringProperty = "foo";
             Utils entity2 = new Utils();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UtilsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Update(LibraryManagement.Domain.Utils)">
            <summary>
            public virtual method that Updates a Utils object into the datasource using a transaction.
            </summary>
            <param name="entity">Utils object to Update.</param>
            <remarks>After Updateing into the datasource, the Utils object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Utils entity = UtilsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UtilsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Utils</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Utils</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Utils.
             <code><![CDATA[
             TList<Utils> list = new TList<Utils>();
             Utils entity = new Utils();
             entity.StringProperty = "foo";
             Utils entity2 = new Utils();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UtilsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Save(LibraryManagement.Domain.Utils)">
            <summary>
            public virtual method that Saves a Utils object into the datasource using a transaction.
            </summary>
            <param name="entity">Utils object to Save.</param>
            <remarks>After Saveing into the datasource, the Utils object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Utils entity = UtilsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UtilsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Utils</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Utils</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Utils.
             <code><![CDATA[
             TList<Utils> list = new TList<Utils>();
             Utils entity = new Utils();
             entity.StringProperty = "foo";
             Utils entity2 = new Utils();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UtilsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Delete(LibraryManagement.Domain.Utils)">
            <summary>
            public virtual method that Deletes a Utils object into the datasource using a transaction.
            </summary>
            <param name="entity">Utils object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Utils object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Utils entity = UtilsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UtilsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Utils</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Utils</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Utils.
             <code><![CDATA[
             TList<Utils> list = new TList<Utils>();
             Utils entity = new Utils();
             entity.StringProperty = "foo";
             Utils entity2 = new Utils();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UtilsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Delete(LibraryManagement.Domain.UtilsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.Delete(System.Byte)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Byte _id
            </summary>
            <param name="_id">Utils pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepLoadById(System.Byte,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Utils"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Utils Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.Utils)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Utils Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.Utils)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.Utils,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.Utils)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Utils Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.Utils,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Utils"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Utils Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.Utils)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.Utils)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Utils"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepSave(LibraryManagement.Domain.Utils)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Utils"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Utils Object</param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepSave(LibraryManagement.Domain.Utils,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Utils object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Utils Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Utils</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Utils} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.UtilsServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Utils Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.UtilsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.UtilsService.#ctor">
            <summary>
            Initializes a new instance of the UtilsService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.AccTransService">
            <summary>
            An component type implementation of the 'tblAccTrans' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.AccTransServiceBase">
            <summary>
             An object representation of the 'tblAccTrans' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AccTrans.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.AccTrans"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.CreateAccTrans(System.DateTime,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Nullable{System.Decimal},System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.AccTrans"/> instance.
            </summary>
            <param name="_tranDate"></param>
            <param name="_tranTime"></param>
            <param name="_efDate"></param>
            <param name="_transNum"></param>
            <param name="_voucher"></param>
            <param name="_transCode"></param>
            <param name="_accountId"></param>
            <param name="_dbAmount"></param>
            <param name="_crAmount"></param>
            <param name="_userId"></param>
            <param name="_corrAcc"></param>
            <param name="_remark"></param>
            <param name="_name"></param>
            <param name="_address"></param>
            <param name="_personId"></param>
            <param name="_updated"></param>
            <param name="_recnum"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Get(LibraryManagement.Domain.AccTransKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.GetById(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblAccTrans index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblAccTrans index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.AccTrans"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.AccTrans"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AccTrans} of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AccTrans</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Insert(LibraryManagement.Domain.AccTrans)">
            <summary>
            public virtual method that Inserts a AccTrans object into the datasource using a transaction.
            </summary>
            <param name="entity">AccTrans object to Insert.</param>
            <remarks>After Inserting into the datasource, the AccTrans object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AccTrans entity = new AccTrans();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AccTransService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccTrans</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AccTrans</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AccTrans.
             <code><![CDATA[
             TList<AccTrans> list = new TList<AccTrans>();
             AccTrans entity = new AccTrans();
             entity.StringProperty = "foo";
             AccTrans entity2 = new AccTrans();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccTransService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Update(LibraryManagement.Domain.AccTrans)">
            <summary>
            public virtual method that Updates a AccTrans object into the datasource using a transaction.
            </summary>
            <param name="entity">AccTrans object to Update.</param>
            <remarks>After Updateing into the datasource, the AccTrans object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AccTrans entity = AccTransService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AccTransService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccTrans</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AccTrans</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AccTrans.
             <code><![CDATA[
             TList<AccTrans> list = new TList<AccTrans>();
             AccTrans entity = new AccTrans();
             entity.StringProperty = "foo";
             AccTrans entity2 = new AccTrans();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccTransService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Save(LibraryManagement.Domain.AccTrans)">
            <summary>
            public virtual method that Saves a AccTrans object into the datasource using a transaction.
            </summary>
            <param name="entity">AccTrans object to Save.</param>
            <remarks>After Saveing into the datasource, the AccTrans object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AccTrans entity = AccTransService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AccTransService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccTrans</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AccTrans</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AccTrans.
             <code><![CDATA[
             TList<AccTrans> list = new TList<AccTrans>();
             AccTrans entity = new AccTrans();
             entity.StringProperty = "foo";
             AccTrans entity2 = new AccTrans();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccTransService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Delete(LibraryManagement.Domain.AccTrans)">
            <summary>
            public virtual method that Deletes a AccTrans object into the datasource using a transaction.
            </summary>
            <param name="entity">AccTrans object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AccTrans object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AccTrans entity = AccTransService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AccTransService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AccTrans</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AccTrans</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AccTrans.
             <code><![CDATA[
             TList<AccTrans> list = new TList<AccTrans>();
             AccTrans entity = new AccTrans();
             entity.StringProperty = "foo";
             AccTrans entity2 = new AccTrans();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccTransService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Delete(LibraryManagement.Domain.AccTransKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _id
            </summary>
            <param name="_id">AccTrans pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepLoadById(System.Decimal,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.AccTrans"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AccTrans Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.AccTrans)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AccTrans Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.AccTrans)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.AccTrans,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.AccTrans)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AccTrans Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.AccTrans,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.AccTrans"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AccTrans Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.AccTrans)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.AccTrans)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.AccTrans"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepSave(LibraryManagement.Domain.AccTrans)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.AccTrans"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AccTrans Object</param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepSave(LibraryManagement.Domain.AccTrans,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AccTrans object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AccTrans Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AccTrans</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AccTrans} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.AccTransServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AccTrans Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.AccTransServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.AccTransService.#ctor">
            <summary>
            Initializes a new instance of the AccTransService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.MenusServiceBase">
            <summary>
             An object representation of the 'tblMenus' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Menus.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Menus"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Menus"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.CreateMenus(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Menus"/> instance.
            </summary>
            <param name="_subitem"></param>
            <param name="_parent"></param>
            <param name="_menukey"></param>
            <param name="_prompt"></param>
            <param name="_type"></param>
            <param name="_procerdue"></param>
            <param name="_imageidx"></param>
            <param name="_password"></param>
            <param name="_basicright"></param>
            <param name="_depcode"></param>
            <param name="_skip"></param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Get(LibraryManagement.Domain.MenusKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.GetById(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblMenus_1 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblMenus_1 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Menus"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Menus"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Menus} of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Menus</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Insert(LibraryManagement.Domain.Menus)">
            <summary>
            public virtual method that Inserts a Menus object into the datasource using a transaction.
            </summary>
            <param name="entity">Menus object to Insert.</param>
            <remarks>After Inserting into the datasource, the Menus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Menus entity = new Menus();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MenusService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Menus</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Menus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Menus.
             <code><![CDATA[
             TList<Menus> list = new TList<Menus>();
             Menus entity = new Menus();
             entity.StringProperty = "foo";
             Menus entity2 = new Menus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MenusService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Update(LibraryManagement.Domain.Menus)">
            <summary>
            public virtual method that Updates a Menus object into the datasource using a transaction.
            </summary>
            <param name="entity">Menus object to Update.</param>
            <remarks>After Updateing into the datasource, the Menus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Menus entity = MenusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MenusService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Menus</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Menus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Menus.
             <code><![CDATA[
             TList<Menus> list = new TList<Menus>();
             Menus entity = new Menus();
             entity.StringProperty = "foo";
             Menus entity2 = new Menus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MenusService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Save(LibraryManagement.Domain.Menus)">
            <summary>
            public virtual method that Saves a Menus object into the datasource using a transaction.
            </summary>
            <param name="entity">Menus object to Save.</param>
            <remarks>After Saveing into the datasource, the Menus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Menus entity = MenusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MenusService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Menus</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Menus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Menus.
             <code><![CDATA[
             TList<Menus> list = new TList<Menus>();
             Menus entity = new Menus();
             entity.StringProperty = "foo";
             Menus entity2 = new Menus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MenusService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Delete(LibraryManagement.Domain.Menus)">
            <summary>
            public virtual method that Deletes a Menus object into the datasource using a transaction.
            </summary>
            <param name="entity">Menus object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Menus object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Menus entity = MenusService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MenusService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Menus</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Menus</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Menus.
             <code><![CDATA[
             TList<Menus> list = new TList<Menus>();
             Menus entity = new Menus();
             entity.StringProperty = "foo";
             Menus entity2 = new Menus();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MenusService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Delete(LibraryManagement.Domain.MenusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _id
            </summary>
            <param name="_id">Menus pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepLoadById(System.Int32,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Menus"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Menus Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.Menus)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Menus Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.Menus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.Menus,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.Menus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Menus Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.Menus,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Menus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Menus Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.Menus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.Menus)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Menus"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepSave(LibraryManagement.Domain.Menus)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Menus"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Menus Object</param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepSave(LibraryManagement.Domain.Menus,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Menus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Menus Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Menus</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Menus} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.MenusServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Menus Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.MenusServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.UnitServiceBase">
            <summary>
             An object representation of the 'tblUnit' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Unit.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Unit"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Unit"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.CreateUnit(System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Unit"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_description"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Get(LibraryManagement.Domain.UnitKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblUnit index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblUnit index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Unit"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Unit"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Unit} of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Unit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Insert(LibraryManagement.Domain.Unit)">
            <summary>
            public virtual method that Inserts a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Insert.</param>
            <remarks>After Inserting into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Unit entity = new Unit();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UnitService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Update(LibraryManagement.Domain.Unit)">
            <summary>
            public virtual method that Updates a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Update.</param>
            <remarks>After Updateing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UnitService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Save(LibraryManagement.Domain.Unit)">
            <summary>
            public virtual method that Saves a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Save.</param>
            <remarks>After Saveing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UnitService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Delete(LibraryManagement.Domain.Unit)">
            <summary>
            public virtual method that Deletes a Unit object into the datasource using a transaction.
            </summary>
            <param name="entity">Unit object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Unit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Unit entity = UnitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UnitService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Unit</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Unit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Unit.
             <code><![CDATA[
             TList<Unit> list = new TList<Unit>();
             Unit entity = new Unit();
             entity.StringProperty = "foo";
             Unit entity2 = new Unit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UnitService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Delete(LibraryManagement.Domain.UnitKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Unit pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepLoadById(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Unit"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.Unit)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Unit Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.Unit,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Unit Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.Unit,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Unit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.Unit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Unit"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepSave(LibraryManagement.Domain.Unit)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Unit"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Unit Object</param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepSave(LibraryManagement.Domain.Unit,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Unit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Unit Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Unit</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Unit} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.UnitServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Unit Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.UnitServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:LibraryManagement.Service.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:LibraryManagement.Service.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:LibraryManagement.Service.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibraryManagement.Service.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:LibraryManagement.Service.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Service.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Service.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Service.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:LibraryManagement.Service.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:LibraryManagement.Service.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:LibraryManagement.Service.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.Copy(LibraryManagement.Service.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:LibraryManagement.Service.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:LibraryManagement.Service.ConnectionScope"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <see cref="T:LibraryManagement.Dao.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:LibraryManagement.Dao.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <see cref="T:LibraryManagement.Dao.TransactionManager"/> if one exists,
            otherwise creates a new <see cref="T:LibraryManagement.Dao.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <see cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <see cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.KitServiceBase">
            <summary>
             An object representation of the 'tblKit' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Kit.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Kit"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Kit"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.CreateKit(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Kit"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_description"></param>
            <param name="_unitsymb"></param>
            <param name="_rtprice"></param>
            <param name="_openDate"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Get(LibraryManagement.Domain.KitKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblKit index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblKit index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Kit"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Kit"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Kit} of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Kit</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Insert(LibraryManagement.Domain.Kit)">
            <summary>
            public virtual method that Inserts a Kit object into the datasource using a transaction.
            </summary>
            <param name="entity">Kit object to Insert.</param>
            <remarks>After Inserting into the datasource, the Kit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Kit entity = new Kit();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KitService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Kit</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Kit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Kit.
             <code><![CDATA[
             TList<Kit> list = new TList<Kit>();
             Kit entity = new Kit();
             entity.StringProperty = "foo";
             Kit entity2 = new Kit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KitService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Update(LibraryManagement.Domain.Kit)">
            <summary>
            public virtual method that Updates a Kit object into the datasource using a transaction.
            </summary>
            <param name="entity">Kit object to Update.</param>
            <remarks>After Updateing into the datasource, the Kit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Kit entity = KitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KitService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Kit</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Kit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Kit.
             <code><![CDATA[
             TList<Kit> list = new TList<Kit>();
             Kit entity = new Kit();
             entity.StringProperty = "foo";
             Kit entity2 = new Kit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KitService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Save(LibraryManagement.Domain.Kit)">
            <summary>
            public virtual method that Saves a Kit object into the datasource using a transaction.
            </summary>
            <param name="entity">Kit object to Save.</param>
            <remarks>After Saveing into the datasource, the Kit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Kit entity = KitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KitService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Kit</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Kit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Kit.
             <code><![CDATA[
             TList<Kit> list = new TList<Kit>();
             Kit entity = new Kit();
             entity.StringProperty = "foo";
             Kit entity2 = new Kit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KitService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Delete(LibraryManagement.Domain.Kit)">
            <summary>
            public virtual method that Deletes a Kit object into the datasource using a transaction.
            </summary>
            <param name="entity">Kit object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Kit object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Kit entity = KitService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KitService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Kit</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Kit</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Kit.
             <code><![CDATA[
             TList<Kit> list = new TList<Kit>();
             Kit entity = new Kit();
             entity.StringProperty = "foo";
             Kit entity2 = new Kit();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KitService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Delete(LibraryManagement.Domain.KitKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Kit pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepLoadById(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Kit"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Kit Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.Kit)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Kit Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.Kit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.Kit,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.Kit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Kit Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.Kit,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Kit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Kit Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.Kit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.Kit)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Kit"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepSave(LibraryManagement.Domain.Kit)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Kit"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Kit Object</param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepSave(LibraryManagement.Domain.Kit,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Kit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Kit Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Kit</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Kit} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.KitServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Kit Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.KitServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.CustomerServiceBase">
            <summary>
             An object representation of the 'tblCustomer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Customer.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Customer"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Customer"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.CreateCustomer(System.String,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Byte[],System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Customer"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_type"></param>
            <param name="_fullname"></param>
            <param name="_address"></param>
            <param name="_phone"></param>
            <param name="_fax"></param>
            <param name="_personId"></param>
            <param name="_placeIssue"></param>
            <param name="_email"></param>
            <param name="_dueDate"></param>
            <param name="_image"></param>
            <param name="_bankname"></param>
            <param name="_bankBr"></param>
            <param name="_accnum"></param>
            <param name="_vatnum"></param>
            <param name="_contactps"></param>
            <param name="_remark"></param>
            <param name="_openDate"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Get(LibraryManagement.Domain.CustomerKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblCustomer index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblCustomer index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Customer"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Customer"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Customer} of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Customer</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Insert(LibraryManagement.Domain.Customer)">
            <summary>
            public virtual method that Inserts a Customer object into the datasource using a transaction.
            </summary>
            <param name="entity">Customer object to Insert.</param>
            <remarks>After Inserting into the datasource, the Customer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Customer entity = new Customer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CustomerService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Customer</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Customer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Customer.
             <code><![CDATA[
             TList<Customer> list = new TList<Customer>();
             Customer entity = new Customer();
             entity.StringProperty = "foo";
             Customer entity2 = new Customer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Update(LibraryManagement.Domain.Customer)">
            <summary>
            public virtual method that Updates a Customer object into the datasource using a transaction.
            </summary>
            <param name="entity">Customer object to Update.</param>
            <remarks>After Updateing into the datasource, the Customer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Customer entity = CustomerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CustomerService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Customer</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Customer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Customer.
             <code><![CDATA[
             TList<Customer> list = new TList<Customer>();
             Customer entity = new Customer();
             entity.StringProperty = "foo";
             Customer entity2 = new Customer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Save(LibraryManagement.Domain.Customer)">
            <summary>
            public virtual method that Saves a Customer object into the datasource using a transaction.
            </summary>
            <param name="entity">Customer object to Save.</param>
            <remarks>After Saveing into the datasource, the Customer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Customer entity = CustomerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CustomerService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Customer</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Customer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Customer.
             <code><![CDATA[
             TList<Customer> list = new TList<Customer>();
             Customer entity = new Customer();
             entity.StringProperty = "foo";
             Customer entity2 = new Customer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Delete(LibraryManagement.Domain.Customer)">
            <summary>
            public virtual method that Deletes a Customer object into the datasource using a transaction.
            </summary>
            <param name="entity">Customer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Customer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Customer entity = CustomerService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CustomerService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Customer</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Customer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Customer.
             <code><![CDATA[
             TList<Customer> list = new TList<Customer>();
             Customer entity = new Customer();
             entity.StringProperty = "foo";
             Customer entity2 = new Customer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Delete(LibraryManagement.Domain.CustomerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Customer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepLoadById(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Customer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.Customer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Customer Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.Customer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.Customer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.Customer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Customer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.Customer,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Customer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.Customer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.Customer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Customer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepSave(LibraryManagement.Domain.Customer)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Customer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Customer Object</param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepSave(LibraryManagement.Domain.Customer,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Customer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Customer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Customer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Customer} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.CustomerServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Customer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.CustomerServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.UserGrpServiceBase">
            <summary>
             An object representation of the 'tblUserGrp' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UserGrp.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.UserGrp"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.CreateUserGrp(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.UserGrp"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_descript"></param>
            <param name="_menuPer"></param>
            <param name="_rpright"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Get(LibraryManagement.Domain.UserGrpKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblUserGrp index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblUserGrp index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.UserGrp"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.UserGrp"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UserGrp} of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UserGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Insert(LibraryManagement.Domain.UserGrp)">
            <summary>
            public virtual method that Inserts a UserGrp object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGrp object to Insert.</param>
            <remarks>After Inserting into the datasource, the UserGrp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UserGrp entity = new UserGrp();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserGrpService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGrp</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UserGrp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UserGrp.
             <code><![CDATA[
             TList<UserGrp> list = new TList<UserGrp>();
             UserGrp entity = new UserGrp();
             entity.StringProperty = "foo";
             UserGrp entity2 = new UserGrp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGrpService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Update(LibraryManagement.Domain.UserGrp)">
            <summary>
            public virtual method that Updates a UserGrp object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGrp object to Update.</param>
            <remarks>After Updateing into the datasource, the UserGrp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UserGrp entity = UserGrpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserGrpService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGrp</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UserGrp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UserGrp.
             <code><![CDATA[
             TList<UserGrp> list = new TList<UserGrp>();
             UserGrp entity = new UserGrp();
             entity.StringProperty = "foo";
             UserGrp entity2 = new UserGrp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGrpService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Save(LibraryManagement.Domain.UserGrp)">
            <summary>
            public virtual method that Saves a UserGrp object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGrp object to Save.</param>
            <remarks>After Saveing into the datasource, the UserGrp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UserGrp entity = UserGrpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserGrpService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGrp</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UserGrp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UserGrp.
             <code><![CDATA[
             TList<UserGrp> list = new TList<UserGrp>();
             UserGrp entity = new UserGrp();
             entity.StringProperty = "foo";
             UserGrp entity2 = new UserGrp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGrpService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Delete(LibraryManagement.Domain.UserGrp)">
            <summary>
            public virtual method that Deletes a UserGrp object into the datasource using a transaction.
            </summary>
            <param name="entity">UserGrp object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UserGrp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UserGrp entity = UserGrpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserGrpService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UserGrp</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UserGrp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UserGrp.
             <code><![CDATA[
             TList<UserGrp> list = new TList<UserGrp>();
             UserGrp entity = new UserGrp();
             entity.StringProperty = "foo";
             UserGrp entity2 = new UserGrp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserGrpService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Delete(LibraryManagement.Domain.UserGrpKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">UserGrp pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoadById(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.UserGrp"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UserGrp Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.UserGrp)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UserGrp Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.UserGrp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.UserGrp,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.UserGrp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UserGrp Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.UserGrp,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.UserGrp"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UserGrp Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.UserGrp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.UserGrp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.UserGrp"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepSave(LibraryManagement.Domain.UserGrp)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.UserGrp"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UserGrp Object</param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepSave(LibraryManagement.Domain.UserGrp,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UserGrp object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UserGrp Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UserGrp</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UserGrp} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UserGrp Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.UserGrpServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.GoodsGrpServiceBase">
            <summary>
             An object representation of the 'tblGoodsGrp' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the GoodsGrp.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.GoodsGrp"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.CreateGoodsGrp(System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.GoodsGrp"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_description"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Get(LibraryManagement.Domain.GoodsGrpKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblGoodsGrp index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblGoodsGrp index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.GoodsGrp"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.GoodsGrp"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{GoodsGrp} of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GoodsGrp</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Insert(LibraryManagement.Domain.GoodsGrp)">
            <summary>
            public virtual method that Inserts a GoodsGrp object into the datasource using a transaction.
            </summary>
            <param name="entity">GoodsGrp object to Insert.</param>
            <remarks>After Inserting into the datasource, the GoodsGrp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            GoodsGrp entity = new GoodsGrp();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GoodsGrpService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GoodsGrp</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>GoodsGrp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of GoodsGrp.
             <code><![CDATA[
             TList<GoodsGrp> list = new TList<GoodsGrp>();
             GoodsGrp entity = new GoodsGrp();
             entity.StringProperty = "foo";
             GoodsGrp entity2 = new GoodsGrp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GoodsGrpService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Update(LibraryManagement.Domain.GoodsGrp)">
            <summary>
            public virtual method that Updates a GoodsGrp object into the datasource using a transaction.
            </summary>
            <param name="entity">GoodsGrp object to Update.</param>
            <remarks>After Updateing into the datasource, the GoodsGrp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            GoodsGrp entity = GoodsGrpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GoodsGrpService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GoodsGrp</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>GoodsGrp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of GoodsGrp.
             <code><![CDATA[
             TList<GoodsGrp> list = new TList<GoodsGrp>();
             GoodsGrp entity = new GoodsGrp();
             entity.StringProperty = "foo";
             GoodsGrp entity2 = new GoodsGrp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GoodsGrpService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Save(LibraryManagement.Domain.GoodsGrp)">
            <summary>
            public virtual method that Saves a GoodsGrp object into the datasource using a transaction.
            </summary>
            <param name="entity">GoodsGrp object to Save.</param>
            <remarks>After Saveing into the datasource, the GoodsGrp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            GoodsGrp entity = GoodsGrpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GoodsGrpService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GoodsGrp</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>GoodsGrp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of GoodsGrp.
             <code><![CDATA[
             TList<GoodsGrp> list = new TList<GoodsGrp>();
             GoodsGrp entity = new GoodsGrp();
             entity.StringProperty = "foo";
             GoodsGrp entity2 = new GoodsGrp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GoodsGrpService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Delete(LibraryManagement.Domain.GoodsGrp)">
            <summary>
            public virtual method that Deletes a GoodsGrp object into the datasource using a transaction.
            </summary>
            <param name="entity">GoodsGrp object to Delete.</param>
            <remarks>After Deleteing into the datasource, the GoodsGrp object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            GoodsGrp entity = GoodsGrpService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GoodsGrpService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GoodsGrp</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>GoodsGrp</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of GoodsGrp.
             <code><![CDATA[
             TList<GoodsGrp> list = new TList<GoodsGrp>();
             GoodsGrp entity = new GoodsGrp();
             entity.StringProperty = "foo";
             GoodsGrp entity2 = new GoodsGrp();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GoodsGrpService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Delete(LibraryManagement.Domain.GoodsGrpKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">GoodsGrp pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoadById(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.GoodsGrp"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GoodsGrp Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.GoodsGrp)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">GoodsGrp Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.GoodsGrp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.GoodsGrp,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.GoodsGrp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">GoodsGrp Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.GoodsGrp,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GoodsGrp Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.GoodsGrp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.GoodsGrp)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.GoodsGrp"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepSave(LibraryManagement.Domain.GoodsGrp)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">GoodsGrp Object</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepSave(LibraryManagement.Domain.GoodsGrp,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the GoodsGrp object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">GoodsGrp Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>GoodsGrp</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{GoodsGrp} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">GoodsGrp Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.GoodsGrpServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.KitService">
            <summary>
            An component type implementation of the 'tblKit' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.KitService.#ctor">
            <summary>
            Initializes a new instance of the KitService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.FilesService">
            <summary>
            An component type implementation of the 'tblFiles' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.FilesServiceBase">
            <summary>
             An object representation of the 'tblFiles' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Files.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Files"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Files"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.CreateFiles(System.String,System.String,System.Byte[],System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Files"/> instance.
            </summary>
            <param name="_filename"></param>
            <param name="_version"></param>
            <param name="_filebinary"></param>
            <param name="_lastDate"></param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Get(LibraryManagement.Domain.FilesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.GetById(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblFiles index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblFiles index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Files"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Files"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Files} of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Files</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Insert(LibraryManagement.Domain.Files)">
            <summary>
            public virtual method that Inserts a Files object into the datasource using a transaction.
            </summary>
            <param name="entity">Files object to Insert.</param>
            <remarks>After Inserting into the datasource, the Files object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Files entity = new Files();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	FilesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Files</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Files</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Files.
             <code><![CDATA[
             TList<Files> list = new TList<Files>();
             Files entity = new Files();
             entity.StringProperty = "foo";
             Files entity2 = new Files();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FilesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Update(LibraryManagement.Domain.Files)">
            <summary>
            public virtual method that Updates a Files object into the datasource using a transaction.
            </summary>
            <param name="entity">Files object to Update.</param>
            <remarks>After Updateing into the datasource, the Files object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Files entity = FilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	FilesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Files</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Files</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Files.
             <code><![CDATA[
             TList<Files> list = new TList<Files>();
             Files entity = new Files();
             entity.StringProperty = "foo";
             Files entity2 = new Files();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FilesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Save(LibraryManagement.Domain.Files)">
            <summary>
            public virtual method that Saves a Files object into the datasource using a transaction.
            </summary>
            <param name="entity">Files object to Save.</param>
            <remarks>After Saveing into the datasource, the Files object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Files entity = FilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	FilesService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Files</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Files</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Files.
             <code><![CDATA[
             TList<Files> list = new TList<Files>();
             Files entity = new Files();
             entity.StringProperty = "foo";
             Files entity2 = new Files();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FilesService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Delete(LibraryManagement.Domain.Files)">
            <summary>
            public virtual method that Deletes a Files object into the datasource using a transaction.
            </summary>
            <param name="entity">Files object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Files object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Files entity = FilesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	FilesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Files</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Files</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Files.
             <code><![CDATA[
             TList<Files> list = new TList<Files>();
             Files entity = new Files();
             entity.StringProperty = "foo";
             Files entity2 = new Files();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FilesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Delete(LibraryManagement.Domain.FilesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _id
            </summary>
            <param name="_id">Files pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepLoadById(System.Decimal,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Files"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Files Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.Files)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Files Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.Files)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.Files,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.Files)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Files Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.Files,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Files"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Files Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.Files)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.Files)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Files"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepSave(LibraryManagement.Domain.Files)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Files"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Files Object</param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepSave(LibraryManagement.Domain.Files,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Files object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Files Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Files</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Files} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.FilesServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Files},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Files Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.FilesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.FilesService.#ctor">
            <summary>
            Initializes a new instance of the FilesService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ModePaymentServiceBase">
            <summary>
             An object representation of the 'tblModePayment' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ModePayment.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.ModePayment"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.CreateModePayment(System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.ModePayment"/> instance.
            </summary>
            <param name="_pmtMode"></param>
            <param name="_description"></param>
            <param name="_forex"></param>
            <param name="_forexRate"></param>
            <param name="_iscard"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Get(LibraryManagement.Domain.ModePaymentKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.GetByPmtModeForex(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblModePayment index.
            </summary>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.GetByPmtModeForex(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblModePayment index.
            </summary>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.ModePayment"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.ModePayment"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ModePayment} of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ModePayment</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Insert(LibraryManagement.Domain.ModePayment)">
            <summary>
            public virtual method that Inserts a ModePayment object into the datasource using a transaction.
            </summary>
            <param name="entity">ModePayment object to Insert.</param>
            <remarks>After Inserting into the datasource, the ModePayment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ModePayment entity = new ModePayment();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ModePaymentService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ModePayment</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ModePayment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ModePayment.
             <code><![CDATA[
             TList<ModePayment> list = new TList<ModePayment>();
             ModePayment entity = new ModePayment();
             entity.StringProperty = "foo";
             ModePayment entity2 = new ModePayment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ModePaymentService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Update(LibraryManagement.Domain.ModePayment)">
            <summary>
            public virtual method that Updates a ModePayment object into the datasource using a transaction.
            </summary>
            <param name="entity">ModePayment object to Update.</param>
            <remarks>After Updateing into the datasource, the ModePayment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ModePayment entity = ModePaymentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ModePaymentService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ModePayment</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ModePayment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ModePayment.
             <code><![CDATA[
             TList<ModePayment> list = new TList<ModePayment>();
             ModePayment entity = new ModePayment();
             entity.StringProperty = "foo";
             ModePayment entity2 = new ModePayment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ModePaymentService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Save(LibraryManagement.Domain.ModePayment)">
            <summary>
            public virtual method that Saves a ModePayment object into the datasource using a transaction.
            </summary>
            <param name="entity">ModePayment object to Save.</param>
            <remarks>After Saveing into the datasource, the ModePayment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ModePayment entity = ModePaymentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ModePaymentService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ModePayment</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ModePayment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ModePayment.
             <code><![CDATA[
             TList<ModePayment> list = new TList<ModePayment>();
             ModePayment entity = new ModePayment();
             entity.StringProperty = "foo";
             ModePayment entity2 = new ModePayment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ModePaymentService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Delete(LibraryManagement.Domain.ModePayment)">
            <summary>
            public virtual method that Deletes a ModePayment object into the datasource using a transaction.
            </summary>
            <param name="entity">ModePayment object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ModePayment object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ModePayment entity = ModePaymentService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ModePaymentService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ModePayment</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ModePayment</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ModePayment.
             <code><![CDATA[
             TList<ModePayment> list = new TList<ModePayment>();
             ModePayment entity = new ModePayment();
             entity.StringProperty = "foo";
             ModePayment entity2 = new ModePayment();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ModePaymentService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Delete(LibraryManagement.Domain.ModePaymentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _pmtMode, System.String _forex
            </summary>
            <param name="_pmtMode">ModePayment pk id.</param>
            <param name="_forex">ModePayment pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoadByPmtModeForex(System.String,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.ModePayment"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ModePayment Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.ModePayment)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ModePayment Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.ModePayment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.ModePayment,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.ModePayment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ModePayment Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.ModePayment,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.ModePayment"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ModePayment Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.ModePayment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.ModePayment)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.ModePayment"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepSave(LibraryManagement.Domain.ModePayment)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.ModePayment"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ModePayment Object</param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepSave(LibraryManagement.Domain.ModePayment,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ModePayment object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ModePayment Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ModePayment</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ModePayment} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ModePayment Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.ModePaymentServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.CustInfoService">
            <summary>
            An component type implementation of the 'tblCust_info' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.CustInfoServiceBase">
            <summary>
             An object representation of the 'tblCust_info' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CustInfo.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.CustInfo"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.CreateCustInfo(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.CustInfo"/> instance.
            </summary>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <param name="_impQty"></param>
            <param name="_impAmt"></param>
            <param name="_expQty"></param>
            <param name="_expAmt"></param>
            <param name="_lastwspr"></param>
            <param name="_lastDate"></param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Get(LibraryManagement.Domain.CustInfoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.GetByCustIdGoodsId(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblCust_info index.
            </summary>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.GetByCustIdGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblCust_info index.
            </summary>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.CustInfo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.CustInfo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CustInfo} of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CustInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Insert(LibraryManagement.Domain.CustInfo)">
            <summary>
            public virtual method that Inserts a CustInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">CustInfo object to Insert.</param>
            <remarks>After Inserting into the datasource, the CustInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CustInfo entity = new CustInfo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CustInfoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CustInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CustInfo.
             <code><![CDATA[
             TList<CustInfo> list = new TList<CustInfo>();
             CustInfo entity = new CustInfo();
             entity.StringProperty = "foo";
             CustInfo entity2 = new CustInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustInfoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Update(LibraryManagement.Domain.CustInfo)">
            <summary>
            public virtual method that Updates a CustInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">CustInfo object to Update.</param>
            <remarks>After Updateing into the datasource, the CustInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CustInfo entity = CustInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CustInfoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CustInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CustInfo.
             <code><![CDATA[
             TList<CustInfo> list = new TList<CustInfo>();
             CustInfo entity = new CustInfo();
             entity.StringProperty = "foo";
             CustInfo entity2 = new CustInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustInfoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Save(LibraryManagement.Domain.CustInfo)">
            <summary>
            public virtual method that Saves a CustInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">CustInfo object to Save.</param>
            <remarks>After Saveing into the datasource, the CustInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CustInfo entity = CustInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CustInfoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CustInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CustInfo.
             <code><![CDATA[
             TList<CustInfo> list = new TList<CustInfo>();
             CustInfo entity = new CustInfo();
             entity.StringProperty = "foo";
             CustInfo entity2 = new CustInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustInfoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Delete(LibraryManagement.Domain.CustInfo)">
            <summary>
            public virtual method that Deletes a CustInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">CustInfo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CustInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CustInfo entity = CustInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CustInfoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CustInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CustInfo.
             <code><![CDATA[
             TList<CustInfo> list = new TList<CustInfo>();
             CustInfo entity = new CustInfo();
             entity.StringProperty = "foo";
             CustInfo entity2 = new CustInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustInfoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Delete(LibraryManagement.Domain.CustInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _custId, System.String _goodsId
            </summary>
            <param name="_custId">CustInfo pk id.</param>
            <param name="_goodsId">CustInfo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoadByCustIdGoodsId(System.String,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.CustInfo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustInfo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.CustInfo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CustInfo Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.CustInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.CustInfo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.CustInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CustInfo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.CustInfo,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.CustInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustInfo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.CustInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.CustInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.CustInfo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepSave(LibraryManagement.Domain.CustInfo)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.CustInfo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CustInfo Object</param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepSave(LibraryManagement.Domain.CustInfo,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CustInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CustInfo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CustInfo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CustInfo} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CustInfo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.CustInfoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.CustInfoService.#ctor">
            <summary>
            Initializes a new instance of the CustInfoService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.OnOrderServiceBase">
            <summary>
             An object representation of the 'tblOn_order' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OnOrder.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.OnOrder"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.CreateOnOrder(System.DateTime,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Decimal,System.String,System.Decimal,System.String,System.Decimal,System.String,System.Decimal,System.Nullable{System.Boolean},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.OnOrder"/> instance.
            </summary>
            <param name="_tranDate"></param>
            <param name="_tranTime"></param>
            <param name="_deliverDt"></param>
            <param name="_transNum"></param>
            <param name="_transCode"></param>
            <param name="_expId"></param>
            <param name="_goodsId"></param>
            <param name="_qty"></param>
            <param name="_unitSymb"></param>
            <param name="_price"></param>
            <param name="_mercType"></param>
            <param name="_userId"></param>
            <param name="_remark"></param>
            <param name="_recnum"></param>
            <param name="_status"></param>
            <param name="_endQty"></param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Get(LibraryManagement.Domain.OnOrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.GetByTransNumGoodsId(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblOn_order index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.GetByTransNumGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblOn_order index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.OnOrder"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.OnOrder"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OnOrder} of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OnOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Insert(LibraryManagement.Domain.OnOrder)">
            <summary>
            public virtual method that Inserts a OnOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">OnOrder object to Insert.</param>
            <remarks>After Inserting into the datasource, the OnOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OnOrder entity = new OnOrder();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OnOrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OnOrder</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OnOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OnOrder.
             <code><![CDATA[
             TList<OnOrder> list = new TList<OnOrder>();
             OnOrder entity = new OnOrder();
             entity.StringProperty = "foo";
             OnOrder entity2 = new OnOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OnOrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Update(LibraryManagement.Domain.OnOrder)">
            <summary>
            public virtual method that Updates a OnOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">OnOrder object to Update.</param>
            <remarks>After Updateing into the datasource, the OnOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OnOrder entity = OnOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OnOrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OnOrder</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OnOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OnOrder.
             <code><![CDATA[
             TList<OnOrder> list = new TList<OnOrder>();
             OnOrder entity = new OnOrder();
             entity.StringProperty = "foo";
             OnOrder entity2 = new OnOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OnOrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Save(LibraryManagement.Domain.OnOrder)">
            <summary>
            public virtual method that Saves a OnOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">OnOrder object to Save.</param>
            <remarks>After Saveing into the datasource, the OnOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OnOrder entity = OnOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OnOrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OnOrder</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OnOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OnOrder.
             <code><![CDATA[
             TList<OnOrder> list = new TList<OnOrder>();
             OnOrder entity = new OnOrder();
             entity.StringProperty = "foo";
             OnOrder entity2 = new OnOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OnOrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Delete(LibraryManagement.Domain.OnOrder)">
            <summary>
            public virtual method that Deletes a OnOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">OnOrder object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OnOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OnOrder entity = OnOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OnOrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OnOrder</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OnOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OnOrder.
             <code><![CDATA[
             TList<OnOrder> list = new TList<OnOrder>();
             OnOrder entity = new OnOrder();
             entity.StringProperty = "foo";
             OnOrder entity2 = new OnOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OnOrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Delete(LibraryManagement.Domain.OnOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _transNum, System.String _goodsId
            </summary>
            <param name="_transNum">OnOrder pk id.</param>
            <param name="_goodsId">OnOrder pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoadByTransNumGoodsId(System.String,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.OnOrder"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OnOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.OnOrder)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OnOrder Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.OnOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.OnOrder,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.OnOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OnOrder Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.OnOrder,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.OnOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OnOrder Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.OnOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.OnOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.OnOrder"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepSave(LibraryManagement.Domain.OnOrder)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.OnOrder"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OnOrder Object</param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepSave(LibraryManagement.Domain.OnOrder,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OnOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OnOrder Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OnOrder</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OnOrder} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OnOrder Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.OnOrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.OnProcessStarting(LibraryManagement.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.OnProcessEnded(LibraryManagement.Service.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ServiceViewBaseCore`1.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:LibraryManagement.Service.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:LibraryManagement.Service.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:LibraryManagement.Service.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:LibraryManagement.Service.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.GoodsGrpService">
            <summary>
            An component type implementation of the 'tblGoodsGrp' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.GoodsGrpService.#ctor">
            <summary>
            Initializes a new instance of the GoodsGrpService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.DateServiceBase">
            <summary>
             An object representation of the 'tblDate' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Date.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Date"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Date"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.CreateDate(System.Int32,System.Nullable{System.DateTime},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Date"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_orgDate"></param>
            <param name="_complete"></param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Get(LibraryManagement.Domain.DateKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.GetById(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblDate index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblDate index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Date"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Date"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Date} of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Date</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Insert(LibraryManagement.Domain.Date)">
            <summary>
            public virtual method that Inserts a Date object into the datasource using a transaction.
            </summary>
            <param name="entity">Date object to Insert.</param>
            <remarks>After Inserting into the datasource, the Date object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Date entity = new Date();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DateService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Date</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Date</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Date.
             <code><![CDATA[
             TList<Date> list = new TList<Date>();
             Date entity = new Date();
             entity.StringProperty = "foo";
             Date entity2 = new Date();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DateService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Update(LibraryManagement.Domain.Date)">
            <summary>
            public virtual method that Updates a Date object into the datasource using a transaction.
            </summary>
            <param name="entity">Date object to Update.</param>
            <remarks>After Updateing into the datasource, the Date object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Date entity = DateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DateService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Date</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Date</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Date.
             <code><![CDATA[
             TList<Date> list = new TList<Date>();
             Date entity = new Date();
             entity.StringProperty = "foo";
             Date entity2 = new Date();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DateService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Save(LibraryManagement.Domain.Date)">
            <summary>
            public virtual method that Saves a Date object into the datasource using a transaction.
            </summary>
            <param name="entity">Date object to Save.</param>
            <remarks>After Saveing into the datasource, the Date object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Date entity = DateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DateService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Date</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Date</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Date.
             <code><![CDATA[
             TList<Date> list = new TList<Date>();
             Date entity = new Date();
             entity.StringProperty = "foo";
             Date entity2 = new Date();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DateService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Delete(LibraryManagement.Domain.Date)">
            <summary>
            public virtual method that Deletes a Date object into the datasource using a transaction.
            </summary>
            <param name="entity">Date object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Date object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Date entity = DateService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DateService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Date</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Date</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Date.
             <code><![CDATA[
             TList<Date> list = new TList<Date>();
             Date entity = new Date();
             entity.StringProperty = "foo";
             Date entity2 = new Date();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DateService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Delete(LibraryManagement.Domain.DateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _id
            </summary>
            <param name="_id">Date pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepLoadById(System.Int32,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Date"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Date Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.Date)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Date Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.Date)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.Date,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.Date)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Date Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.Date,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Date"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Date Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.Date)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.Date)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Date"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepSave(LibraryManagement.Domain.Date)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Date"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Date Object</param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepSave(LibraryManagement.Domain.Date,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Date object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Date Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Date</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Date} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.DateServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Date},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Date Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.DateServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.BookAttrService">
            <summary>
            An component type implementation of the 'tblBookAttr' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.BookAttrServiceBase">
            <summary>
             An object representation of the 'tblBookAttr' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BookAttr.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.BookAttr"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.CreateBookAttr(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.BookAttr"/> instance.
            </summary>
            <param name="_goodsId"></param>
            <param name="_author"></param>
            <param name="_publish"></param>
            <param name="_translator"></param>
            <param name="_formType"></param>
            <param name="_language"></param>
            <param name="_plMonth"></param>
            <param name="_plYear"></param>
            <param name="_dimension"></param>
            <param name="_weight"></param>
            <param name="_pages"></param>
            <param name="_introinfo"></param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Get(LibraryManagement.Domain.BookAttrKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.GetByGoodsId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblBookAttr index.
            </summary>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.GetByGoodsId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblBookAttr index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.BookAttr"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.BookAttr"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BookAttr} of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BookAttr</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Insert(LibraryManagement.Domain.BookAttr)">
            <summary>
            public virtual method that Inserts a BookAttr object into the datasource using a transaction.
            </summary>
            <param name="entity">BookAttr object to Insert.</param>
            <remarks>After Inserting into the datasource, the BookAttr object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BookAttr entity = new BookAttr();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BookAttrService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BookAttr</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BookAttr</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BookAttr.
             <code><![CDATA[
             TList<BookAttr> list = new TList<BookAttr>();
             BookAttr entity = new BookAttr();
             entity.StringProperty = "foo";
             BookAttr entity2 = new BookAttr();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BookAttrService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Update(LibraryManagement.Domain.BookAttr)">
            <summary>
            public virtual method that Updates a BookAttr object into the datasource using a transaction.
            </summary>
            <param name="entity">BookAttr object to Update.</param>
            <remarks>After Updateing into the datasource, the BookAttr object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BookAttr entity = BookAttrService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BookAttrService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BookAttr</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BookAttr</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BookAttr.
             <code><![CDATA[
             TList<BookAttr> list = new TList<BookAttr>();
             BookAttr entity = new BookAttr();
             entity.StringProperty = "foo";
             BookAttr entity2 = new BookAttr();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BookAttrService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Save(LibraryManagement.Domain.BookAttr)">
            <summary>
            public virtual method that Saves a BookAttr object into the datasource using a transaction.
            </summary>
            <param name="entity">BookAttr object to Save.</param>
            <remarks>After Saveing into the datasource, the BookAttr object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BookAttr entity = BookAttrService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BookAttrService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BookAttr</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BookAttr</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BookAttr.
             <code><![CDATA[
             TList<BookAttr> list = new TList<BookAttr>();
             BookAttr entity = new BookAttr();
             entity.StringProperty = "foo";
             BookAttr entity2 = new BookAttr();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BookAttrService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Delete(LibraryManagement.Domain.BookAttr)">
            <summary>
            public virtual method that Deletes a BookAttr object into the datasource using a transaction.
            </summary>
            <param name="entity">BookAttr object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BookAttr object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BookAttr entity = BookAttrService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BookAttrService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BookAttr</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BookAttr</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BookAttr.
             <code><![CDATA[
             TList<BookAttr> list = new TList<BookAttr>();
             BookAttr entity = new BookAttr();
             entity.StringProperty = "foo";
             BookAttr entity2 = new BookAttr();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BookAttrService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Delete(LibraryManagement.Domain.BookAttrKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _goodsId
            </summary>
            <param name="_goodsId">BookAttr pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoadByGoodsId(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.BookAttr"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BookAttr Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.BookAttr)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BookAttr Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.BookAttr)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.BookAttr,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.BookAttr)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BookAttr Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.BookAttr,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.BookAttr"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BookAttr Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.BookAttr)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.BookAttr)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.BookAttr"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepSave(LibraryManagement.Domain.BookAttr)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.BookAttr"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BookAttr Object</param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepSave(LibraryManagement.Domain.BookAttr,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BookAttr object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BookAttr Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BookAttr</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BookAttr} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BookAttr Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.BookAttrServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.BookAttrService.#ctor">
            <summary>
            Initializes a new instance of the BookAttrService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.PriceServiceBase">
            <summary>
             An object representation of the 'tblPrice' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Price.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Price"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Price"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.CreatePrice(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Price"/> instance.
            </summary>
            <param name="_goodsId"></param>
            <param name="_rtprice"></param>
            <param name="_averimppr"></param>
            <param name="_lastimppr"></param>
            <param name="_wsprice"></param>
            <param name="_prefprice"></param>
            <param name="_discpercent"></param>
            <param name="_discFrdate"></param>
            <param name="_discTodate"></param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Get(LibraryManagement.Domain.PriceKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.GetByGoodsId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblPrice index.
            </summary>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.GetByGoodsId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblPrice index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Price"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Price"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Price} of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Price</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Insert(LibraryManagement.Domain.Price)">
            <summary>
            public virtual method that Inserts a Price object into the datasource using a transaction.
            </summary>
            <param name="entity">Price object to Insert.</param>
            <remarks>After Inserting into the datasource, the Price object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Price entity = new Price();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PriceService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Price</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Price</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Price.
             <code><![CDATA[
             TList<Price> list = new TList<Price>();
             Price entity = new Price();
             entity.StringProperty = "foo";
             Price entity2 = new Price();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PriceService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Update(LibraryManagement.Domain.Price)">
            <summary>
            public virtual method that Updates a Price object into the datasource using a transaction.
            </summary>
            <param name="entity">Price object to Update.</param>
            <remarks>After Updateing into the datasource, the Price object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Price entity = PriceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PriceService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Price</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Price</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Price.
             <code><![CDATA[
             TList<Price> list = new TList<Price>();
             Price entity = new Price();
             entity.StringProperty = "foo";
             Price entity2 = new Price();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PriceService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Save(LibraryManagement.Domain.Price)">
            <summary>
            public virtual method that Saves a Price object into the datasource using a transaction.
            </summary>
            <param name="entity">Price object to Save.</param>
            <remarks>After Saveing into the datasource, the Price object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Price entity = PriceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PriceService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Price</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Price</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Price.
             <code><![CDATA[
             TList<Price> list = new TList<Price>();
             Price entity = new Price();
             entity.StringProperty = "foo";
             Price entity2 = new Price();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PriceService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Delete(LibraryManagement.Domain.Price)">
            <summary>
            public virtual method that Deletes a Price object into the datasource using a transaction.
            </summary>
            <param name="entity">Price object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Price object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Price entity = PriceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PriceService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Price</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Price</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Price.
             <code><![CDATA[
             TList<Price> list = new TList<Price>();
             Price entity = new Price();
             entity.StringProperty = "foo";
             Price entity2 = new Price();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PriceService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Delete(LibraryManagement.Domain.PriceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _goodsId
            </summary>
            <param name="_goodsId">Price pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepLoadByGoodsId(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Price"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Price Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.Price)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Price Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.Price)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.Price,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.Price)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Price Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.Price,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Price"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Price Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.Price)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.Price)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Price"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepSave(LibraryManagement.Domain.Price)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Price"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Price Object</param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepSave(LibraryManagement.Domain.Price,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Price object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Price Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Price</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Price} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.PriceServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Price},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Price Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.PriceServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.FrmTypeService">
            <summary>
            An component type implementation of the 'tblFrmType' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.FrmTypeServiceBase">
            <summary>
             An object representation of the 'tblFrmType' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the FrmType.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.FrmType"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.FrmType"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.CreateFrmType(System.Decimal,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.FrmType"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_description"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Get(LibraryManagement.Domain.FrmTypeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.GetById(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblFrmType index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblFrmType index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.FrmType"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.FrmType"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{FrmType} of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>FrmType</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Insert(LibraryManagement.Domain.FrmType)">
            <summary>
            public virtual method that Inserts a FrmType object into the datasource using a transaction.
            </summary>
            <param name="entity">FrmType object to Insert.</param>
            <remarks>After Inserting into the datasource, the FrmType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            FrmType entity = new FrmType();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	FrmTypeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>FrmType</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>FrmType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of FrmType.
             <code><![CDATA[
             TList<FrmType> list = new TList<FrmType>();
             FrmType entity = new FrmType();
             entity.StringProperty = "foo";
             FrmType entity2 = new FrmType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FrmTypeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Update(LibraryManagement.Domain.FrmType)">
            <summary>
            public virtual method that Updates a FrmType object into the datasource using a transaction.
            </summary>
            <param name="entity">FrmType object to Update.</param>
            <remarks>After Updateing into the datasource, the FrmType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            FrmType entity = FrmTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	FrmTypeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>FrmType</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>FrmType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of FrmType.
             <code><![CDATA[
             TList<FrmType> list = new TList<FrmType>();
             FrmType entity = new FrmType();
             entity.StringProperty = "foo";
             FrmType entity2 = new FrmType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FrmTypeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Save(LibraryManagement.Domain.FrmType)">
            <summary>
            public virtual method that Saves a FrmType object into the datasource using a transaction.
            </summary>
            <param name="entity">FrmType object to Save.</param>
            <remarks>After Saveing into the datasource, the FrmType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            FrmType entity = FrmTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	FrmTypeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>FrmType</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>FrmType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of FrmType.
             <code><![CDATA[
             TList<FrmType> list = new TList<FrmType>();
             FrmType entity = new FrmType();
             entity.StringProperty = "foo";
             FrmType entity2 = new FrmType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FrmTypeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Delete(LibraryManagement.Domain.FrmType)">
            <summary>
            public virtual method that Deletes a FrmType object into the datasource using a transaction.
            </summary>
            <param name="entity">FrmType object to Delete.</param>
            <remarks>After Deleteing into the datasource, the FrmType object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            FrmType entity = FrmTypeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	FrmTypeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>FrmType</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>FrmType</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of FrmType.
             <code><![CDATA[
             TList<FrmType> list = new TList<FrmType>();
             FrmType entity = new FrmType();
             entity.StringProperty = "foo";
             FrmType entity2 = new FrmType();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FrmTypeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Delete(LibraryManagement.Domain.FrmTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _id
            </summary>
            <param name="_id">FrmType pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoadById(System.Decimal,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.FrmType"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">FrmType Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.FrmType)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">FrmType Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.FrmType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.FrmType,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.FrmType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">FrmType Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.FrmType,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.FrmType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">FrmType Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.FrmType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.FrmType)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.FrmType"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepSave(LibraryManagement.Domain.FrmType)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.FrmType"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">FrmType Object</param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepSave(LibraryManagement.Domain.FrmType,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the FrmType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">FrmType Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>FrmType</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{FrmType} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">FrmType Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.FrmTypeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.FrmTypeService.#ctor">
            <summary>
            Initializes a new instance of the FrmTypeService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.UserServiceBase">
            <summary>
             An object representation of the 'tblUser' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the User.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.User"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.User"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.CreateUser(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.User"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_fullName"></param>
            <param name="_passw"></param>
            <param name="_mright"></param>
            <param name="_rpright"></param>
            <param name="_groups"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Get(LibraryManagement.Domain.UserKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.GetById(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblUser index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblUser index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.User"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.User"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{User} of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>User</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Insert(LibraryManagement.Domain.User)">
            <summary>
            public virtual method that Inserts a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Insert.</param>
            <remarks>After Inserting into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            User entity = new User();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UserService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.User})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Update(LibraryManagement.Domain.User)">
            <summary>
            public virtual method that Updates a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Update.</param>
            <remarks>After Updateing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UserService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.User})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Save(LibraryManagement.Domain.User)">
            <summary>
            public virtual method that Saves a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Save.</param>
            <remarks>After Saveing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UserService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.User})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Delete(LibraryManagement.Domain.User)">
            <summary>
            public virtual method that Deletes a User object into the datasource using a transaction.
            </summary>
            <param name="entity">User object to Delete.</param>
            <remarks>After Deleteing into the datasource, the User object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            User entity = UserService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UserService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.User})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>User</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>User</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of User.
             <code><![CDATA[
             TList<User> list = new TList<User>();
             User entity = new User();
             entity.StringProperty = "foo";
             User entity2 = new User();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UserService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Delete(LibraryManagement.Domain.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _id
            </summary>
            <param name="_id">User pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepLoadById(System.Int32,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.User"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.User)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">User Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.User,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">User Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.User,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.User})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.User},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.User)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.User},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.User"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepSave(LibraryManagement.Domain.User)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.User"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">User Object</param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepSave(LibraryManagement.Domain.User,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">User Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>User</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.User})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{User} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.UserServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.User},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">User Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.UserServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.StoreService">
            <summary>
            An component type implementation of the 'tblStore' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.StoreServiceBase">
            <summary>
             An object representation of the 'tblStore' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Store.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Store"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Store"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.CreateStore(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Store"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_type"></param>
            <param name="_name"></param>
            <param name="_fullname"></param>
            <param name="_address"></param>
            <param name="_phone"></param>
            <param name="_fax"></param>
            <param name="_bankname"></param>
            <param name="_bankBr"></param>
            <param name="_accnum"></param>
            <param name="_vatnum"></param>
            <param name="_contactps"></param>
            <param name="_remark"></param>
            <param name="_openDate"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Get(LibraryManagement.Domain.StoreKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblStore index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblStore index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Store"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Store"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Store} of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Store</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Insert(LibraryManagement.Domain.Store)">
            <summary>
            public virtual method that Inserts a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Insert.</param>
            <remarks>After Inserting into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Store entity = new Store();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StoreService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Update(LibraryManagement.Domain.Store)">
            <summary>
            public virtual method that Updates a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Update.</param>
            <remarks>After Updateing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StoreService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Save(LibraryManagement.Domain.Store)">
            <summary>
            public virtual method that Saves a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Save.</param>
            <remarks>After Saveing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StoreService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Delete(LibraryManagement.Domain.Store)">
            <summary>
            public virtual method that Deletes a Store object into the datasource using a transaction.
            </summary>
            <param name="entity">Store object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Store object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Store entity = StoreService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StoreService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Store</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Store</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Store.
             <code><![CDATA[
             TList<Store> list = new TList<Store>();
             Store entity = new Store();
             entity.StringProperty = "foo";
             Store entity2 = new Store();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StoreService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Delete(LibraryManagement.Domain.StoreKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Store pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepLoadById(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Store"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.Store)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Store Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.Store,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Store Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.Store,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Store"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.Store)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Store"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepSave(LibraryManagement.Domain.Store)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Store"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Store Object</param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepSave(LibraryManagement.Domain.Store,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Store object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Store Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Store</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Store} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.StoreServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Store},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Store Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.StoreServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.StoreService.#ctor">
            <summary>
            Initializes a new instance of the StoreService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.MofSysService">
            <summary>
            An component type implementation of the 'tblMof_sys' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.MofSysServiceBase">
            <summary>
             An object representation of the 'tblMof_sys' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the MofSys.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.MofSys"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.MofSys"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.CreateMofSys(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.MofSys"/> instance.
            </summary>
            <param name="_mofGl"></param>
            <param name="_mofName"></param>
            <param name="_mofNameb"></param>
            <param name="_acType"></param>
            <param name="_negative"></param>
            <param name="_master"></param>
            <param name="_glevel"></param>
            <param name="_lastLevel"></param>
            <param name="_otherEqui"></param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Get(LibraryManagement.Domain.MofSysKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.GetById(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblMof_sys index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblMof_sys index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.MofSys"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.MofSys"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{MofSys} of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MofSys</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Insert(LibraryManagement.Domain.MofSys)">
            <summary>
            public virtual method that Inserts a MofSys object into the datasource using a transaction.
            </summary>
            <param name="entity">MofSys object to Insert.</param>
            <remarks>After Inserting into the datasource, the MofSys object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            MofSys entity = new MofSys();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MofSysService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MofSys</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>MofSys</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of MofSys.
             <code><![CDATA[
             TList<MofSys> list = new TList<MofSys>();
             MofSys entity = new MofSys();
             entity.StringProperty = "foo";
             MofSys entity2 = new MofSys();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MofSysService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Update(LibraryManagement.Domain.MofSys)">
            <summary>
            public virtual method that Updates a MofSys object into the datasource using a transaction.
            </summary>
            <param name="entity">MofSys object to Update.</param>
            <remarks>After Updateing into the datasource, the MofSys object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            MofSys entity = MofSysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MofSysService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MofSys</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>MofSys</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of MofSys.
             <code><![CDATA[
             TList<MofSys> list = new TList<MofSys>();
             MofSys entity = new MofSys();
             entity.StringProperty = "foo";
             MofSys entity2 = new MofSys();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MofSysService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Save(LibraryManagement.Domain.MofSys)">
            <summary>
            public virtual method that Saves a MofSys object into the datasource using a transaction.
            </summary>
            <param name="entity">MofSys object to Save.</param>
            <remarks>After Saveing into the datasource, the MofSys object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            MofSys entity = MofSysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MofSysService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MofSys</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>MofSys</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of MofSys.
             <code><![CDATA[
             TList<MofSys> list = new TList<MofSys>();
             MofSys entity = new MofSys();
             entity.StringProperty = "foo";
             MofSys entity2 = new MofSys();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MofSysService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Delete(LibraryManagement.Domain.MofSys)">
            <summary>
            public virtual method that Deletes a MofSys object into the datasource using a transaction.
            </summary>
            <param name="entity">MofSys object to Delete.</param>
            <remarks>After Deleteing into the datasource, the MofSys object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            MofSys entity = MofSysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MofSysService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MofSys</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>MofSys</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of MofSys.
             <code><![CDATA[
             TList<MofSys> list = new TList<MofSys>();
             MofSys entity = new MofSys();
             entity.StringProperty = "foo";
             MofSys entity2 = new MofSys();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MofSysService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Delete(LibraryManagement.Domain.MofSysKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _id
            </summary>
            <param name="_id">MofSys pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepLoadById(System.Decimal,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.MofSys"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MofSys Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.MofSys)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">MofSys Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.MofSys)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.MofSys,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.MofSys)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">MofSys Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.MofSys,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.MofSys"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MofSys Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.MofSys)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.MofSys)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.MofSys"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepSave(LibraryManagement.Domain.MofSys)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.MofSys"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">MofSys Object</param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepSave(LibraryManagement.Domain.MofSys,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the MofSys object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">MofSys Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>MofSys</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{MofSys} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.MofSysServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">MofSys Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.MofSysServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.MofSysService.#ctor">
            <summary>
            Initializes a new instance of the MofSysService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:LibraryManagement.Service.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Service.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ContextView`2.#ctor(`0,LibraryManagement.Service.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Service.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:LibraryManagement.Service.ContextView`2.#ctor(`0,LibraryManagement.Service.SecurityContext{`0},LibraryManagement.Dao.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Service.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:LibraryManagement.Service.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:LibraryManagement.Service.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:LibraryManagement.Service.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:LibraryManagement.Service.AtrCodeService">
            <summary>
            An component type implementation of the 'tblAtrCode' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.AtrCodeServiceBase">
            <summary>
             An object representation of the 'tblAtrCode' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AtrCode.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.AtrCode"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.CreateAtrCode(System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.AtrCode"/> instance.
            </summary>
            <param name="_transCode"></param>
            <param name="_transName"></param>
            <param name="_status"></param>
            <param name="_dbAccid"></param>
            <param name="_crAccid"></param>
            <param name="_accid1"></param>
            <param name="_accid2"></param>
            <param name="_accid3"></param>
            <param name="_pcommand"></param>
            <param name="_form"></param>
            <param name="_voucher"></param>
            <param name="_fvoucher"></param>
            <param name="_nov"></param>
            <param name="_trType"></param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Get(LibraryManagement.Domain.AtrCodeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.GetByTransCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblAtrCode index.
            </summary>
            <param name="_transCode"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.GetByTransCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblAtrCode index.
            </summary>
            <param name="_transCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.AtrCode"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.AtrCode"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AtrCode} of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AtrCode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Insert(LibraryManagement.Domain.AtrCode)">
            <summary>
            public virtual method that Inserts a AtrCode object into the datasource using a transaction.
            </summary>
            <param name="entity">AtrCode object to Insert.</param>
            <remarks>After Inserting into the datasource, the AtrCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AtrCode entity = new AtrCode();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AtrCodeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AtrCode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AtrCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AtrCode.
             <code><![CDATA[
             TList<AtrCode> list = new TList<AtrCode>();
             AtrCode entity = new AtrCode();
             entity.StringProperty = "foo";
             AtrCode entity2 = new AtrCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AtrCodeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Update(LibraryManagement.Domain.AtrCode)">
            <summary>
            public virtual method that Updates a AtrCode object into the datasource using a transaction.
            </summary>
            <param name="entity">AtrCode object to Update.</param>
            <remarks>After Updateing into the datasource, the AtrCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AtrCode entity = AtrCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AtrCodeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AtrCode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AtrCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AtrCode.
             <code><![CDATA[
             TList<AtrCode> list = new TList<AtrCode>();
             AtrCode entity = new AtrCode();
             entity.StringProperty = "foo";
             AtrCode entity2 = new AtrCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AtrCodeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Save(LibraryManagement.Domain.AtrCode)">
            <summary>
            public virtual method that Saves a AtrCode object into the datasource using a transaction.
            </summary>
            <param name="entity">AtrCode object to Save.</param>
            <remarks>After Saveing into the datasource, the AtrCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AtrCode entity = AtrCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AtrCodeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AtrCode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AtrCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AtrCode.
             <code><![CDATA[
             TList<AtrCode> list = new TList<AtrCode>();
             AtrCode entity = new AtrCode();
             entity.StringProperty = "foo";
             AtrCode entity2 = new AtrCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AtrCodeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Delete(LibraryManagement.Domain.AtrCode)">
            <summary>
            public virtual method that Deletes a AtrCode object into the datasource using a transaction.
            </summary>
            <param name="entity">AtrCode object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AtrCode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AtrCode entity = AtrCodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AtrCodeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AtrCode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AtrCode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AtrCode.
             <code><![CDATA[
             TList<AtrCode> list = new TList<AtrCode>();
             AtrCode entity = new AtrCode();
             entity.StringProperty = "foo";
             AtrCode entity2 = new AtrCode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AtrCodeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Delete(LibraryManagement.Domain.AtrCodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _transCode
            </summary>
            <param name="_transCode">AtrCode pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoadByTransCode(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.AtrCode"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_transCode"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AtrCode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.AtrCode)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AtrCode Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.AtrCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.AtrCode,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.AtrCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AtrCode Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.AtrCode,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.AtrCode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AtrCode Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.AtrCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.AtrCode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.AtrCode"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepSave(LibraryManagement.Domain.AtrCode)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.AtrCode"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AtrCode Object</param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepSave(LibraryManagement.Domain.AtrCode,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AtrCode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AtrCode Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AtrCode</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AtrCode} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AtrCode Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.AtrCodeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.AtrCodeService.#ctor">
            <summary>
            Initializes a new instance of the AtrCodeService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.AccountServiceBase">
            <summary>
             An object representation of the 'tblAccount' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Account.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Account"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Account"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.CreateAccount(System.Decimal,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Account"/> instance.
            </summary>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <param name="_abbreviat"></param>
            <param name="_mofGl"></param>
            <param name="_custId"></param>
            <param name="_name"></param>
            <param name="_openDate"></param>
            <param name="_prevDate"></param>
            <param name="_lastDate"></param>
            <param name="_creamt"></param>
            <param name="_debamt"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Get(LibraryManagement.Domain.AccountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.GetByBranchAccountId(System.Decimal,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblAccount_1 index.
            </summary>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.GetByBranchAccountId(System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblAccount_1 index.
            </summary>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Account"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Account"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Account} of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Account</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Insert(LibraryManagement.Domain.Account)">
            <summary>
            public virtual method that Inserts a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Insert.</param>
            <remarks>After Inserting into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Account entity = new Account();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AccountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Update(LibraryManagement.Domain.Account)">
            <summary>
            public virtual method that Updates a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Update.</param>
            <remarks>After Updateing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AccountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Save(LibraryManagement.Domain.Account)">
            <summary>
            public virtual method that Saves a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Save.</param>
            <remarks>After Saveing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AccountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Delete(LibraryManagement.Domain.Account)">
            <summary>
            public virtual method that Deletes a Account object into the datasource using a transaction.
            </summary>
            <param name="entity">Account object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Account object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Account entity = AccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AccountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Account</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Account</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Account.
             <code><![CDATA[
             TList<Account> list = new TList<Account>();
             Account entity = new Account();
             entity.StringProperty = "foo";
             Account entity2 = new Account();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AccountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Delete(LibraryManagement.Domain.AccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.Delete(System.Decimal,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _branch, System.String _accountId
            </summary>
            <param name="_branch">Account pk id.</param>
            <param name="_accountId">Account pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepLoadByBranchAccountId(System.Decimal,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Account"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.Account)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Account Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.Account,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Account Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.Account,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Account"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.Account)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Account"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepSave(LibraryManagement.Domain.Account)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Account"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Account Object</param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepSave(LibraryManagement.Domain.Account,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Account object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Account Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Account</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Account} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.AccountServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Account},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Account Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.AccountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:LibraryManagement.Service.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:LibraryManagement.Service.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ProcessorEventArgs.#ctor(LibraryManagement.Service.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:LibraryManagement.Service.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:LibraryManagement.Service.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:LibraryManagement.Service.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:LibraryManagement.Service.IProcessor.ChangeProcessorState(LibraryManagement.Service.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:LibraryManagement.Service.ProcessorBase.ChangeProcessorState(LibraryManagement.Service.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ProcessorBase.OnNotifyProcessorStateChanging(LibraryManagement.Service.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:LibraryManagement.Service.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:LibraryManagement.Service.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:LibraryManagement.Service.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:LibraryManagement.Service.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:LibraryManagement.Service.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:LibraryManagement.Service.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:LibraryManagement.Service.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.LocationService">
            <summary>
            An component type implementation of the 'tblLocation' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.LocationServiceBase">
            <summary>
             An object representation of the 'tblLocation' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Location.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Location"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Location"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.CreateLocation(System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Location"/> instance.
            </summary>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="_description"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Get(LibraryManagement.Domain.LocationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.GetByStkIdLocId(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblLocation index.
            </summary>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.GetByStkIdLocId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblLocation index.
            </summary>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Location"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Location"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Location} of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Location</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Insert(LibraryManagement.Domain.Location)">
            <summary>
            public virtual method that Inserts a Location object into the datasource using a transaction.
            </summary>
            <param name="entity">Location object to Insert.</param>
            <remarks>After Inserting into the datasource, the Location object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Location entity = new Location();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LocationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Location</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Location</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Location.
             <code><![CDATA[
             TList<Location> list = new TList<Location>();
             Location entity = new Location();
             entity.StringProperty = "foo";
             Location entity2 = new Location();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LocationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Update(LibraryManagement.Domain.Location)">
            <summary>
            public virtual method that Updates a Location object into the datasource using a transaction.
            </summary>
            <param name="entity">Location object to Update.</param>
            <remarks>After Updateing into the datasource, the Location object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Location entity = LocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LocationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Location</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Location</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Location.
             <code><![CDATA[
             TList<Location> list = new TList<Location>();
             Location entity = new Location();
             entity.StringProperty = "foo";
             Location entity2 = new Location();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LocationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Save(LibraryManagement.Domain.Location)">
            <summary>
            public virtual method that Saves a Location object into the datasource using a transaction.
            </summary>
            <param name="entity">Location object to Save.</param>
            <remarks>After Saveing into the datasource, the Location object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Location entity = LocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LocationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Location</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Location</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Location.
             <code><![CDATA[
             TList<Location> list = new TList<Location>();
             Location entity = new Location();
             entity.StringProperty = "foo";
             Location entity2 = new Location();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LocationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Delete(LibraryManagement.Domain.Location)">
            <summary>
            public virtual method that Deletes a Location object into the datasource using a transaction.
            </summary>
            <param name="entity">Location object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Location object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Location entity = LocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LocationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Location</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Location</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Location.
             <code><![CDATA[
             TList<Location> list = new TList<Location>();
             Location entity = new Location();
             entity.StringProperty = "foo";
             Location entity2 = new Location();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LocationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Delete(LibraryManagement.Domain.LocationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _stkId, System.String _locId
            </summary>
            <param name="_stkId">Location pk id.</param>
            <param name="_locId">Location pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepLoadByStkIdLocId(System.String,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Location"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Location Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.Location)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Location Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.Location)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.Location,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.Location)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Location Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.Location,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Location"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Location Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.Location)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.Location)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Location"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepSave(LibraryManagement.Domain.Location)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Location"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Location Object</param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepSave(LibraryManagement.Domain.Location,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Location object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Location Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Location</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Location} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.LocationServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Location},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Location Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.LocationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.LocationService.#ctor">
            <summary>
            Initializes a new instance of the LocationService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.LoanTranService">
            <summary>
            An component type implementation of the 'tblLoanTran' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.LoanTranServiceBase">
            <summary>
             An object representation of the 'tblLoanTran' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LoanTran.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.LoanTran"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.CreateLoanTran(System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.LoanTran"/> instance.
            </summary>
            <param name="_transNum"></param>
            <param name="_tranDate"></param>
            <param name="_transCode"></param>
            <param name="_tranTime"></param>
            <param name="_expId"></param>
            <param name="_csId"></param>
            <param name="_goodsId"></param>
            <param name="_qty"></param>
            <param name="_dueDate"></param>
            <param name="_userId"></param>
            <param name="_corrTran"></param>
            <param name="_remark"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Get(LibraryManagement.Domain.LoanTranKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.GetByTransNumGoodsId(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblLoanTran index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.GetByTransNumGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblLoanTran index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.LoanTran"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.LoanTran"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LoanTran} of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LoanTran</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Insert(LibraryManagement.Domain.LoanTran)">
            <summary>
            public virtual method that Inserts a LoanTran object into the datasource using a transaction.
            </summary>
            <param name="entity">LoanTran object to Insert.</param>
            <remarks>After Inserting into the datasource, the LoanTran object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LoanTran entity = new LoanTran();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LoanTranService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoanTran</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LoanTran</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LoanTran.
             <code><![CDATA[
             TList<LoanTran> list = new TList<LoanTran>();
             LoanTran entity = new LoanTran();
             entity.StringProperty = "foo";
             LoanTran entity2 = new LoanTran();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoanTranService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Update(LibraryManagement.Domain.LoanTran)">
            <summary>
            public virtual method that Updates a LoanTran object into the datasource using a transaction.
            </summary>
            <param name="entity">LoanTran object to Update.</param>
            <remarks>After Updateing into the datasource, the LoanTran object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LoanTran entity = LoanTranService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LoanTranService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoanTran</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LoanTran</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LoanTran.
             <code><![CDATA[
             TList<LoanTran> list = new TList<LoanTran>();
             LoanTran entity = new LoanTran();
             entity.StringProperty = "foo";
             LoanTran entity2 = new LoanTran();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoanTranService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Save(LibraryManagement.Domain.LoanTran)">
            <summary>
            public virtual method that Saves a LoanTran object into the datasource using a transaction.
            </summary>
            <param name="entity">LoanTran object to Save.</param>
            <remarks>After Saveing into the datasource, the LoanTran object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LoanTran entity = LoanTranService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LoanTranService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoanTran</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LoanTran</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LoanTran.
             <code><![CDATA[
             TList<LoanTran> list = new TList<LoanTran>();
             LoanTran entity = new LoanTran();
             entity.StringProperty = "foo";
             LoanTran entity2 = new LoanTran();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoanTranService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Delete(LibraryManagement.Domain.LoanTran)">
            <summary>
            public virtual method that Deletes a LoanTran object into the datasource using a transaction.
            </summary>
            <param name="entity">LoanTran object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LoanTran object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LoanTran entity = LoanTranService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LoanTranService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LoanTran</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LoanTran</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LoanTran.
             <code><![CDATA[
             TList<LoanTran> list = new TList<LoanTran>();
             LoanTran entity = new LoanTran();
             entity.StringProperty = "foo";
             LoanTran entity2 = new LoanTran();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LoanTranService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Delete(LibraryManagement.Domain.LoanTranKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _transNum, System.String _goodsId
            </summary>
            <param name="_transNum">LoanTran pk id.</param>
            <param name="_goodsId">LoanTran pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoadByTransNumGoodsId(System.String,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.LoanTran"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoanTran Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.LoanTran)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LoanTran Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.LoanTran)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.LoanTran,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.LoanTran)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LoanTran Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.LoanTran,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.LoanTran"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LoanTran Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.LoanTran)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.LoanTran)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.LoanTran"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepSave(LibraryManagement.Domain.LoanTran)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.LoanTran"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LoanTran Object</param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepSave(LibraryManagement.Domain.LoanTran,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LoanTran object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LoanTran Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LoanTran</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LoanTran} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LoanTran Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.LoanTranServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.LoanTranService.#ctor">
            <summary>
            Initializes a new instance of the LoanTranService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.BarcodeServiceBase">
            <summary>
             An object representation of the 'tblBarcode' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Barcode.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Barcode"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Barcode"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.CreateBarcode(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Barcode"/> instance.
            </summary>
            <param name="_barcode"></param>
            <param name="_goodsId"></param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Get(LibraryManagement.Domain.BarcodeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.GetByBarcode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblBarcode index.
            </summary>
            <param name="_barcode"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.GetByBarcode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblBarcode index.
            </summary>
            <param name="_barcode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Barcode"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Barcode"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Barcode} of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Barcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Insert(LibraryManagement.Domain.Barcode)">
            <summary>
            public virtual method that Inserts a Barcode object into the datasource using a transaction.
            </summary>
            <param name="entity">Barcode object to Insert.</param>
            <remarks>After Inserting into the datasource, the Barcode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Barcode entity = new Barcode();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BarcodeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Barcode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Barcode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Barcode.
             <code><![CDATA[
             TList<Barcode> list = new TList<Barcode>();
             Barcode entity = new Barcode();
             entity.StringProperty = "foo";
             Barcode entity2 = new Barcode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BarcodeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Update(LibraryManagement.Domain.Barcode)">
            <summary>
            public virtual method that Updates a Barcode object into the datasource using a transaction.
            </summary>
            <param name="entity">Barcode object to Update.</param>
            <remarks>After Updateing into the datasource, the Barcode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Barcode entity = BarcodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BarcodeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Barcode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Barcode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Barcode.
             <code><![CDATA[
             TList<Barcode> list = new TList<Barcode>();
             Barcode entity = new Barcode();
             entity.StringProperty = "foo";
             Barcode entity2 = new Barcode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BarcodeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Save(LibraryManagement.Domain.Barcode)">
            <summary>
            public virtual method that Saves a Barcode object into the datasource using a transaction.
            </summary>
            <param name="entity">Barcode object to Save.</param>
            <remarks>After Saveing into the datasource, the Barcode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Barcode entity = BarcodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BarcodeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Barcode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Barcode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Barcode.
             <code><![CDATA[
             TList<Barcode> list = new TList<Barcode>();
             Barcode entity = new Barcode();
             entity.StringProperty = "foo";
             Barcode entity2 = new Barcode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BarcodeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Delete(LibraryManagement.Domain.Barcode)">
            <summary>
            public virtual method that Deletes a Barcode object into the datasource using a transaction.
            </summary>
            <param name="entity">Barcode object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Barcode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Barcode entity = BarcodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BarcodeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Barcode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Barcode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Barcode.
             <code><![CDATA[
             TList<Barcode> list = new TList<Barcode>();
             Barcode entity = new Barcode();
             entity.StringProperty = "foo";
             Barcode entity2 = new Barcode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BarcodeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Delete(LibraryManagement.Domain.BarcodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _barcode
            </summary>
            <param name="_barcode">Barcode pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoadByBarcode(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Barcode"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_barcode"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Barcode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.Barcode)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Barcode Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.Barcode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.Barcode,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.Barcode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Barcode Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.Barcode,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Barcode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Barcode Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.Barcode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.Barcode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Barcode"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepSave(LibraryManagement.Domain.Barcode)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Barcode"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Barcode Object</param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepSave(LibraryManagement.Domain.Barcode,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Barcode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Barcode Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Barcode</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Barcode} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Barcode Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.BarcodeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.MercLocationServiceBase">
            <summary>
             An object representation of the 'tblMercLocation' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the MercLocation.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.MercLocation"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.CreateMercLocation(System.String,System.String,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.MercLocation"/> instance.
            </summary>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="_goodsId"></param>
            <param name="_check"></param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Get(LibraryManagement.Domain.MercLocationKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.GetByIdx(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblMercLocation index.
            </summary>
            <param name="_idx"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.GetByIdx(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblMercLocation index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.MercLocation"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.MercLocation"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{MercLocation} of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MercLocation</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Insert(LibraryManagement.Domain.MercLocation)">
            <summary>
            public virtual method that Inserts a MercLocation object into the datasource using a transaction.
            </summary>
            <param name="entity">MercLocation object to Insert.</param>
            <remarks>After Inserting into the datasource, the MercLocation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            MercLocation entity = new MercLocation();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MercLocationService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MercLocation</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>MercLocation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of MercLocation.
             <code><![CDATA[
             TList<MercLocation> list = new TList<MercLocation>();
             MercLocation entity = new MercLocation();
             entity.StringProperty = "foo";
             MercLocation entity2 = new MercLocation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MercLocationService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Update(LibraryManagement.Domain.MercLocation)">
            <summary>
            public virtual method that Updates a MercLocation object into the datasource using a transaction.
            </summary>
            <param name="entity">MercLocation object to Update.</param>
            <remarks>After Updateing into the datasource, the MercLocation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            MercLocation entity = MercLocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MercLocationService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MercLocation</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>MercLocation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of MercLocation.
             <code><![CDATA[
             TList<MercLocation> list = new TList<MercLocation>();
             MercLocation entity = new MercLocation();
             entity.StringProperty = "foo";
             MercLocation entity2 = new MercLocation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MercLocationService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Save(LibraryManagement.Domain.MercLocation)">
            <summary>
            public virtual method that Saves a MercLocation object into the datasource using a transaction.
            </summary>
            <param name="entity">MercLocation object to Save.</param>
            <remarks>After Saveing into the datasource, the MercLocation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            MercLocation entity = MercLocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MercLocationService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MercLocation</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>MercLocation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of MercLocation.
             <code><![CDATA[
             TList<MercLocation> list = new TList<MercLocation>();
             MercLocation entity = new MercLocation();
             entity.StringProperty = "foo";
             MercLocation entity2 = new MercLocation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MercLocationService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Delete(LibraryManagement.Domain.MercLocation)">
            <summary>
            public virtual method that Deletes a MercLocation object into the datasource using a transaction.
            </summary>
            <param name="entity">MercLocation object to Delete.</param>
            <remarks>After Deleteing into the datasource, the MercLocation object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            MercLocation entity = MercLocationService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MercLocationService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MercLocation</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>MercLocation</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of MercLocation.
             <code><![CDATA[
             TList<MercLocation> list = new TList<MercLocation>();
             MercLocation entity = new MercLocation();
             entity.StringProperty = "foo";
             MercLocation entity2 = new MercLocation();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MercLocationService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Delete(LibraryManagement.Domain.MercLocationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _idx
            </summary>
            <param name="_idx">MercLocation pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoadByIdx(System.Decimal,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.MercLocation"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_idx"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MercLocation Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.MercLocation)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">MercLocation Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.MercLocation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.MercLocation,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.MercLocation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">MercLocation Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.MercLocation,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.MercLocation"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MercLocation Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.MercLocation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.MercLocation)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.MercLocation"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepSave(LibraryManagement.Domain.MercLocation)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.MercLocation"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">MercLocation Object</param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepSave(LibraryManagement.Domain.MercLocation,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the MercLocation object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">MercLocation Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>MercLocation</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{MercLocation} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">MercLocation Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.MercLocationServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.TransactionServiceBase">
            <summary>
             An object representation of the 'tblTransaction' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Transaction.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Transaction"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Transaction"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.CreateTransaction(System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Transaction"/> instance.
            </summary>
            <param name="_tranDate"></param>
            <param name="_tranTime"></param>
            <param name="_transNum"></param>
            <param name="_transCode"></param>
            <param name="_voucher"></param>
            <param name="_invoice"></param>
            <param name="_post"></param>
            <param name="_expId"></param>
            <param name="_impId"></param>
            <param name="_goodsId"></param>
            <param name="_kitQty"></param>
            <param name="_kitId"></param>
            <param name="_qty"></param>
            <param name="_unitSymb"></param>
            <param name="_amount"></param>
            <param name="_discount"></param>
            <param name="_carddiscAmt"></param>
            <param name="_vatAmt"></param>
            <param name="_surplus"></param>
            <param name="_commisAmt"></param>
            <param name="_forexCys"></param>
            <param name="_forexRate"></param>
            <param name="_expiryDt"></param>
            <param name="_userId"></param>
            <param name="_station"></param>
            <param name="_csId"></param>
            <param name="_custaxId"></param>
            <param name="_safeNameRef"></param>
            <param name="_remark"></param>
            <param name="_updated"></param>
            <param name="_mercType"></param>
            <param name="_taxCode"></param>
            <param name="_vatIncl"></param>
            <param name="_discpervat"></param>
            <param name="_discIncl"></param>
            <param name="_copies"></param>
            <param name="_recnum"></param>
            <param name="_cardId"></param>
            <param name="_shift"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Get(LibraryManagement.Domain.TransactionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.GetByIdx(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblTransaction_new index.
            </summary>
            <param name="_idx"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.GetByIdx(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblTransaction_new index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Transaction"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Transaction"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Transaction} of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Transaction</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Insert(LibraryManagement.Domain.Transaction)">
            <summary>
            public virtual method that Inserts a Transaction object into the datasource using a transaction.
            </summary>
            <param name="entity">Transaction object to Insert.</param>
            <remarks>After Inserting into the datasource, the Transaction object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Transaction entity = new Transaction();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TransactionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Transaction</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Transaction</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Transaction.
             <code><![CDATA[
             TList<Transaction> list = new TList<Transaction>();
             Transaction entity = new Transaction();
             entity.StringProperty = "foo";
             Transaction entity2 = new Transaction();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Update(LibraryManagement.Domain.Transaction)">
            <summary>
            public virtual method that Updates a Transaction object into the datasource using a transaction.
            </summary>
            <param name="entity">Transaction object to Update.</param>
            <remarks>After Updateing into the datasource, the Transaction object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Transaction entity = TransactionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TransactionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Transaction</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Transaction</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Transaction.
             <code><![CDATA[
             TList<Transaction> list = new TList<Transaction>();
             Transaction entity = new Transaction();
             entity.StringProperty = "foo";
             Transaction entity2 = new Transaction();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Save(LibraryManagement.Domain.Transaction)">
            <summary>
            public virtual method that Saves a Transaction object into the datasource using a transaction.
            </summary>
            <param name="entity">Transaction object to Save.</param>
            <remarks>After Saveing into the datasource, the Transaction object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Transaction entity = TransactionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TransactionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Transaction</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Transaction</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Transaction.
             <code><![CDATA[
             TList<Transaction> list = new TList<Transaction>();
             Transaction entity = new Transaction();
             entity.StringProperty = "foo";
             Transaction entity2 = new Transaction();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Delete(LibraryManagement.Domain.Transaction)">
            <summary>
            public virtual method that Deletes a Transaction object into the datasource using a transaction.
            </summary>
            <param name="entity">Transaction object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Transaction object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Transaction entity = TransactionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TransactionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Transaction</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Transaction</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Transaction.
             <code><![CDATA[
             TList<Transaction> list = new TList<Transaction>();
             Transaction entity = new Transaction();
             entity.StringProperty = "foo";
             Transaction entity2 = new Transaction();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransactionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Delete(LibraryManagement.Domain.TransactionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _idx
            </summary>
            <param name="_idx">Transaction pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepLoadByIdx(System.Decimal,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Transaction"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_idx"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Transaction Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.Transaction)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Transaction Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.Transaction)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.Transaction,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.Transaction)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Transaction Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.Transaction,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Transaction"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Transaction Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.Transaction)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.Transaction)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Transaction"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepSave(LibraryManagement.Domain.Transaction)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Transaction"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Transaction Object</param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepSave(LibraryManagement.Domain.Transaction,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Transaction object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Transaction Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Transaction</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Transaction} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.TransactionServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Transaction Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.TransactionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.NonPluServiceBase">
            <summary>
             An object representation of the 'tblNon_Plu' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NonPlu.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.NonPlu"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.CreateNonPlu(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.NonPlu"/> instance.
            </summary>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Get(LibraryManagement.Domain.NonPluKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.GetByNpluCodeGoodsId(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblNon_Plu index.
            </summary>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.GetByNpluCodeGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblNon_Plu index.
            </summary>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.NonPlu"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.NonPlu"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{NonPlu} of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NonPlu</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Insert(LibraryManagement.Domain.NonPlu)">
            <summary>
            public virtual method that Inserts a NonPlu object into the datasource using a transaction.
            </summary>
            <param name="entity">NonPlu object to Insert.</param>
            <remarks>After Inserting into the datasource, the NonPlu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            NonPlu entity = new NonPlu();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NonPluService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NonPlu</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>NonPlu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of NonPlu.
             <code><![CDATA[
             TList<NonPlu> list = new TList<NonPlu>();
             NonPlu entity = new NonPlu();
             entity.StringProperty = "foo";
             NonPlu entity2 = new NonPlu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NonPluService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Update(LibraryManagement.Domain.NonPlu)">
            <summary>
            public virtual method that Updates a NonPlu object into the datasource using a transaction.
            </summary>
            <param name="entity">NonPlu object to Update.</param>
            <remarks>After Updateing into the datasource, the NonPlu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            NonPlu entity = NonPluService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NonPluService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NonPlu</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>NonPlu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of NonPlu.
             <code><![CDATA[
             TList<NonPlu> list = new TList<NonPlu>();
             NonPlu entity = new NonPlu();
             entity.StringProperty = "foo";
             NonPlu entity2 = new NonPlu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NonPluService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Save(LibraryManagement.Domain.NonPlu)">
            <summary>
            public virtual method that Saves a NonPlu object into the datasource using a transaction.
            </summary>
            <param name="entity">NonPlu object to Save.</param>
            <remarks>After Saveing into the datasource, the NonPlu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            NonPlu entity = NonPluService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NonPluService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NonPlu</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>NonPlu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of NonPlu.
             <code><![CDATA[
             TList<NonPlu> list = new TList<NonPlu>();
             NonPlu entity = new NonPlu();
             entity.StringProperty = "foo";
             NonPlu entity2 = new NonPlu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NonPluService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Delete(LibraryManagement.Domain.NonPlu)">
            <summary>
            public virtual method that Deletes a NonPlu object into the datasource using a transaction.
            </summary>
            <param name="entity">NonPlu object to Delete.</param>
            <remarks>After Deleteing into the datasource, the NonPlu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            NonPlu entity = NonPluService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NonPluService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NonPlu</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>NonPlu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of NonPlu.
             <code><![CDATA[
             TList<NonPlu> list = new TList<NonPlu>();
             NonPlu entity = new NonPlu();
             entity.StringProperty = "foo";
             NonPlu entity2 = new NonPlu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NonPluService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Delete(LibraryManagement.Domain.NonPluKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _npluCode, System.String _goodsId
            </summary>
            <param name="_npluCode">NonPlu pk id.</param>
            <param name="_goodsId">NonPlu pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepLoadByNpluCodeGoodsId(System.String,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.NonPlu"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NonPlu Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.NonPlu)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">NonPlu Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.NonPlu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.NonPlu,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.NonPlu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">NonPlu Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.NonPlu,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.NonPlu"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NonPlu Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.NonPlu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.NonPlu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.NonPlu"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepSave(LibraryManagement.Domain.NonPlu)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.NonPlu"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">NonPlu Object</param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepSave(LibraryManagement.Domain.NonPlu,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the NonPlu object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">NonPlu Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>NonPlu</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{NonPlu} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.NonPluServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">NonPlu Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.NonPluServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.DomainUtil.GetErrorsFromList``1(LibraryManagement.Domain.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:LibraryManagement.Service.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:LibraryManagement.Service.DateService">
            <summary>
            An component type implementation of the 'tblDate' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.DateService.#ctor">
            <summary>
            Initializes a new instance of the DateService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.TransnumService">
            <summary>
            An component type implementation of the 'tblTransnum' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.TransnumServiceBase">
            <summary>
             An object representation of the 'tblTransnum' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Transnum.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Transnum"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Transnum"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.CreateTransnum(System.String,System.Decimal,System.DateTime)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Transnum"/> instance.
            </summary>
            <param name="_transType"></param>
            <param name="_lastNum"></param>
            <param name="_lastDate"></param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Get(LibraryManagement.Domain.TransnumKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.GetByTransType(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblTransnum index.
            </summary>
            <param name="_transType"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.GetByTransType(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblTransnum index.
            </summary>
            <param name="_transType"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Transnum"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Transnum"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Transnum} of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Transnum</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Insert(LibraryManagement.Domain.Transnum)">
            <summary>
            public virtual method that Inserts a Transnum object into the datasource using a transaction.
            </summary>
            <param name="entity">Transnum object to Insert.</param>
            <remarks>After Inserting into the datasource, the Transnum object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Transnum entity = new Transnum();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TransnumService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Transnum</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Transnum</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Transnum.
             <code><![CDATA[
             TList<Transnum> list = new TList<Transnum>();
             Transnum entity = new Transnum();
             entity.StringProperty = "foo";
             Transnum entity2 = new Transnum();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransnumService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Update(LibraryManagement.Domain.Transnum)">
            <summary>
            public virtual method that Updates a Transnum object into the datasource using a transaction.
            </summary>
            <param name="entity">Transnum object to Update.</param>
            <remarks>After Updateing into the datasource, the Transnum object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Transnum entity = TransnumService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TransnumService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Transnum</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Transnum</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Transnum.
             <code><![CDATA[
             TList<Transnum> list = new TList<Transnum>();
             Transnum entity = new Transnum();
             entity.StringProperty = "foo";
             Transnum entity2 = new Transnum();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransnumService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Save(LibraryManagement.Domain.Transnum)">
            <summary>
            public virtual method that Saves a Transnum object into the datasource using a transaction.
            </summary>
            <param name="entity">Transnum object to Save.</param>
            <remarks>After Saveing into the datasource, the Transnum object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Transnum entity = TransnumService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TransnumService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Transnum</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Transnum</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Transnum.
             <code><![CDATA[
             TList<Transnum> list = new TList<Transnum>();
             Transnum entity = new Transnum();
             entity.StringProperty = "foo";
             Transnum entity2 = new Transnum();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransnumService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Delete(LibraryManagement.Domain.Transnum)">
            <summary>
            public virtual method that Deletes a Transnum object into the datasource using a transaction.
            </summary>
            <param name="entity">Transnum object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Transnum object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Transnum entity = TransnumService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TransnumService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Transnum</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Transnum</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Transnum.
             <code><![CDATA[
             TList<Transnum> list = new TList<Transnum>();
             Transnum entity = new Transnum();
             entity.StringProperty = "foo";
             Transnum entity2 = new Transnum();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransnumService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Delete(LibraryManagement.Domain.TransnumKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _transType
            </summary>
            <param name="_transType">Transnum pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepLoadByTransType(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Transnum"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_transType"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Transnum Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.Transnum)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Transnum Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.Transnum)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.Transnum,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.Transnum)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Transnum Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.Transnum,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Transnum"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Transnum Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.Transnum)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.Transnum)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Transnum"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepSave(LibraryManagement.Domain.Transnum)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Transnum"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Transnum Object</param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepSave(LibraryManagement.Domain.Transnum,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Transnum object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Transnum Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Transnum</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Transnum} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.TransnumServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Transnum Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.TransnumServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.TransnumService.#ctor">
            <summary>
            Initializes a new instance of the TransnumService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.TransValueServiceBase">
            <summary>
             An object representation of the 'tblTransValue' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the TransValue.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.TransValue"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.TransValue"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.CreateTransValue(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.TransValue"/> instance.
            </summary>
            <param name="_transNum"></param>
            <param name="_amount"></param>
            <param name="_frcustomer"></param>
            <param name="_forex"></param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Get(LibraryManagement.Domain.TransValueKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.GetByTransNum(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblTransValue index.
            </summary>
            <param name="_transNum"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.GetByTransNum(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblTransValue index.
            </summary>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.TransValue"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.TransValue"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{TransValue} of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>TransValue</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Insert(LibraryManagement.Domain.TransValue)">
            <summary>
            public virtual method that Inserts a TransValue object into the datasource using a transaction.
            </summary>
            <param name="entity">TransValue object to Insert.</param>
            <remarks>After Inserting into the datasource, the TransValue object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            TransValue entity = new TransValue();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TransValueService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransValue</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>TransValue</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of TransValue.
             <code><![CDATA[
             TList<TransValue> list = new TList<TransValue>();
             TransValue entity = new TransValue();
             entity.StringProperty = "foo";
             TransValue entity2 = new TransValue();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransValueService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Update(LibraryManagement.Domain.TransValue)">
            <summary>
            public virtual method that Updates a TransValue object into the datasource using a transaction.
            </summary>
            <param name="entity">TransValue object to Update.</param>
            <remarks>After Updateing into the datasource, the TransValue object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            TransValue entity = TransValueService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TransValueService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransValue</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>TransValue</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of TransValue.
             <code><![CDATA[
             TList<TransValue> list = new TList<TransValue>();
             TransValue entity = new TransValue();
             entity.StringProperty = "foo";
             TransValue entity2 = new TransValue();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransValueService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Save(LibraryManagement.Domain.TransValue)">
            <summary>
            public virtual method that Saves a TransValue object into the datasource using a transaction.
            </summary>
            <param name="entity">TransValue object to Save.</param>
            <remarks>After Saveing into the datasource, the TransValue object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            TransValue entity = TransValueService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TransValueService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransValue</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>TransValue</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of TransValue.
             <code><![CDATA[
             TList<TransValue> list = new TList<TransValue>();
             TransValue entity = new TransValue();
             entity.StringProperty = "foo";
             TransValue entity2 = new TransValue();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransValueService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Delete(LibraryManagement.Domain.TransValue)">
            <summary>
            public virtual method that Deletes a TransValue object into the datasource using a transaction.
            </summary>
            <param name="entity">TransValue object to Delete.</param>
            <remarks>After Deleteing into the datasource, the TransValue object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            TransValue entity = TransValueService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TransValueService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>TransValue</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>TransValue</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of TransValue.
             <code><![CDATA[
             TList<TransValue> list = new TList<TransValue>();
             TransValue entity = new TransValue();
             entity.StringProperty = "foo";
             TransValue entity2 = new TransValue();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TransValueService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Delete(LibraryManagement.Domain.TransValueKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _transNum
            </summary>
            <param name="_transNum">TransValue pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepLoadByTransNum(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.TransValue"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_transNum"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransValue Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TransValue)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">TransValue Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TransValue)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TransValue,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TransValue)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">TransValue Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TransValue,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.TransValue"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">TransValue Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TransValue)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TransValue)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.TransValue"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepSave(LibraryManagement.Domain.TransValue)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.TransValue"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">TransValue Object</param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepSave(LibraryManagement.Domain.TransValue,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the TransValue object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">TransValue Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>TransValue</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{TransValue} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.TransValueServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">TransValue Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.TransValueServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.StockInfoServiceBase">
            <summary>
             An object representation of the 'tblStockInfo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the StockInfo.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.StockInfo"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.CreateStockInfo(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.StockInfo"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <param name="_openDate"></param>
            <param name="_lastDate"></param>
            <param name="_minusDate"></param>
            <param name="_stktakeDt"></param>
            <param name="_stktakeTm"></param>
            <param name="_beginQty"></param>
            <param name="_expQty"></param>
            <param name="_impQty"></param>
            <param name="_beginAmt"></param>
            <param name="_expAmt"></param>
            <param name="_impAmt"></param>
            <param name="_averimppr"></param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Get(LibraryManagement.Domain.StockInfoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.GetByIdGoodsId(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblStockInfo index.
            </summary>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.GetByIdGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblStockInfo index.
            </summary>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.StockInfo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.StockInfo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{StockInfo} of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StockInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Insert(LibraryManagement.Domain.StockInfo)">
            <summary>
            public virtual method that Inserts a StockInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">StockInfo object to Insert.</param>
            <remarks>After Inserting into the datasource, the StockInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            StockInfo entity = new StockInfo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StockInfoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StockInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>StockInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of StockInfo.
             <code><![CDATA[
             TList<StockInfo> list = new TList<StockInfo>();
             StockInfo entity = new StockInfo();
             entity.StringProperty = "foo";
             StockInfo entity2 = new StockInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StockInfoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Update(LibraryManagement.Domain.StockInfo)">
            <summary>
            public virtual method that Updates a StockInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">StockInfo object to Update.</param>
            <remarks>After Updateing into the datasource, the StockInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            StockInfo entity = StockInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StockInfoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StockInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>StockInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of StockInfo.
             <code><![CDATA[
             TList<StockInfo> list = new TList<StockInfo>();
             StockInfo entity = new StockInfo();
             entity.StringProperty = "foo";
             StockInfo entity2 = new StockInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StockInfoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Save(LibraryManagement.Domain.StockInfo)">
            <summary>
            public virtual method that Saves a StockInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">StockInfo object to Save.</param>
            <remarks>After Saveing into the datasource, the StockInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            StockInfo entity = StockInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StockInfoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StockInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>StockInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of StockInfo.
             <code><![CDATA[
             TList<StockInfo> list = new TList<StockInfo>();
             StockInfo entity = new StockInfo();
             entity.StringProperty = "foo";
             StockInfo entity2 = new StockInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StockInfoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Delete(LibraryManagement.Domain.StockInfo)">
            <summary>
            public virtual method that Deletes a StockInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">StockInfo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the StockInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            StockInfo entity = StockInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StockInfoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StockInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>StockInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of StockInfo.
             <code><![CDATA[
             TList<StockInfo> list = new TList<StockInfo>();
             StockInfo entity = new StockInfo();
             entity.StringProperty = "foo";
             StockInfo entity2 = new StockInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StockInfoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Delete(LibraryManagement.Domain.StockInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id, System.String _goodsId
            </summary>
            <param name="_id">StockInfo pk id.</param>
            <param name="_goodsId">StockInfo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoadByIdGoodsId(System.String,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.StockInfo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StockInfo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.StockInfo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">StockInfo Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.StockInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.StockInfo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.StockInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">StockInfo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.StockInfo,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.StockInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StockInfo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.StockInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.StockInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.StockInfo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepSave(LibraryManagement.Domain.StockInfo)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.StockInfo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">StockInfo Object</param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepSave(LibraryManagement.Domain.StockInfo,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the StockInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">StockInfo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>StockInfo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{StockInfo} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">StockInfo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.StockInfoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.PriceService">
            <summary>
            An component type implementation of the 'tblPrice' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.PriceService.#ctor">
            <summary>
            Initializes a new instance of the PriceService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.IProcessorResult.AddBrokenRulesList(System.Type,LibraryManagement.Domain.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:LibraryManagement.Service.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.LanguageService">
            <summary>
            An component type implementation of the 'tblLanguage' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.LanguageServiceBase">
            <summary>
             An object representation of the 'tblLanguage' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Language.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Language"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Language"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.CreateLanguage(System.Decimal,System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Language"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_description"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Get(LibraryManagement.Domain.LanguageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.GetById(System.Decimal)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblLanguage index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblLanguage index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Language"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Language"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Language} of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Insert(LibraryManagement.Domain.Language)">
            <summary>
            public virtual method that Inserts a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Insert.</param>
            <remarks>After Inserting into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Language entity = new Language();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LanguageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Update(LibraryManagement.Domain.Language)">
            <summary>
            public virtual method that Updates a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Update.</param>
            <remarks>After Updateing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LanguageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Save(LibraryManagement.Domain.Language)">
            <summary>
            public virtual method that Saves a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Save.</param>
            <remarks>After Saveing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LanguageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Delete(LibraryManagement.Domain.Language)">
            <summary>
            public virtual method that Deletes a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LanguageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Delete(LibraryManagement.Domain.LanguageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Decimal _id
            </summary>
            <param name="_id">Language pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepLoadById(System.Decimal,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Language"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.Language)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Language Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.Language,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Language Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.Language,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Language"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Language"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepSave(LibraryManagement.Domain.Language)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Language"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Language Object</param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepSave(LibraryManagement.Domain.Language,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Language object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Language Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Language</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Language} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.LanguageServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Language},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.LanguageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.LanguageService.#ctor">
            <summary>
            Initializes a new instance of the LanguageService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.TrcodeService">
            <summary>
            An component type implementation of the 'tblTrcode' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.TrcodeServiceBase">
            <summary>
             An object representation of the 'tblTrcode' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Trcode.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Trcode"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Trcode"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.CreateTrcode(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Trcode"/> instance.
            </summary>
            <param name="_trCode"></param>
            <param name="_trName"></param>
            <param name="_description"></param>
            <param name="_trDepart"></param>
            <param name="_frmCaption"></param>
            <param name="_voucherFile"></param>
            <param name="_voucherFile1"></param>
            <param name="_voucherFile2"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Get(LibraryManagement.Domain.TrcodeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.GetByTrCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblTrcode index.
            </summary>
            <param name="_trCode"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.GetByTrCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblTrcode index.
            </summary>
            <param name="_trCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Trcode"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Trcode"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Trcode} of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Trcode</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Insert(LibraryManagement.Domain.Trcode)">
            <summary>
            public virtual method that Inserts a Trcode object into the datasource using a transaction.
            </summary>
            <param name="entity">Trcode object to Insert.</param>
            <remarks>After Inserting into the datasource, the Trcode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Trcode entity = new Trcode();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TrcodeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Trcode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Trcode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Trcode.
             <code><![CDATA[
             TList<Trcode> list = new TList<Trcode>();
             Trcode entity = new Trcode();
             entity.StringProperty = "foo";
             Trcode entity2 = new Trcode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrcodeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Update(LibraryManagement.Domain.Trcode)">
            <summary>
            public virtual method that Updates a Trcode object into the datasource using a transaction.
            </summary>
            <param name="entity">Trcode object to Update.</param>
            <remarks>After Updateing into the datasource, the Trcode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Trcode entity = TrcodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TrcodeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Trcode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Trcode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Trcode.
             <code><![CDATA[
             TList<Trcode> list = new TList<Trcode>();
             Trcode entity = new Trcode();
             entity.StringProperty = "foo";
             Trcode entity2 = new Trcode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrcodeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Save(LibraryManagement.Domain.Trcode)">
            <summary>
            public virtual method that Saves a Trcode object into the datasource using a transaction.
            </summary>
            <param name="entity">Trcode object to Save.</param>
            <remarks>After Saveing into the datasource, the Trcode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Trcode entity = TrcodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TrcodeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Trcode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Trcode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Trcode.
             <code><![CDATA[
             TList<Trcode> list = new TList<Trcode>();
             Trcode entity = new Trcode();
             entity.StringProperty = "foo";
             Trcode entity2 = new Trcode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrcodeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Delete(LibraryManagement.Domain.Trcode)">
            <summary>
            public virtual method that Deletes a Trcode object into the datasource using a transaction.
            </summary>
            <param name="entity">Trcode object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Trcode object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Trcode entity = TrcodeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TrcodeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Trcode</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Trcode</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Trcode.
             <code><![CDATA[
             TList<Trcode> list = new TList<Trcode>();
             Trcode entity = new Trcode();
             entity.StringProperty = "foo";
             Trcode entity2 = new Trcode();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TrcodeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Delete(LibraryManagement.Domain.TrcodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _trCode
            </summary>
            <param name="_trCode">Trcode pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoadByTrCode(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Trcode"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_trCode"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Trcode Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.Trcode)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Trcode Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.Trcode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.Trcode,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.Trcode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Trcode Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.Trcode,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Trcode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Trcode Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.Trcode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.Trcode)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Trcode"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepSave(LibraryManagement.Domain.Trcode)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Trcode"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Trcode Object</param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepSave(LibraryManagement.Domain.Trcode,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Trcode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Trcode Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Trcode</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Trcode} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Trcode Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.TrcodeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.TrcodeService.#ctor">
            <summary>
            Initializes a new instance of the TrcodeService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.NonPluService">
            <summary>
            An component type implementation of the 'tblNon_Plu' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.NonPluService.#ctor">
            <summary>
            Initializes a new instance of the NonPluService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.StationsService">
            <summary>
            An component type implementation of the 'tblStations' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.StationsServiceBase">
            <summary>
             An object representation of the 'tblStations' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Stations.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Stations"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Stations"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.CreateStations(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.String,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Stations"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_description"></param>
            <param name="_login"></param>
            <param name="_userId"></param>
            <param name="_posId"></param>
            <param name="_prnport"></param>
            <param name="_ipaddress"></param>
            <param name="_message"></param>
            <param name="_serialkey"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Get(LibraryManagement.Domain.StationsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.GetById(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblStations index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblStations index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Stations"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Stations"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Stations} of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Stations</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Insert(LibraryManagement.Domain.Stations)">
            <summary>
            public virtual method that Inserts a Stations object into the datasource using a transaction.
            </summary>
            <param name="entity">Stations object to Insert.</param>
            <remarks>After Inserting into the datasource, the Stations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Stations entity = new Stations();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StationsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Stations</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Stations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Stations.
             <code><![CDATA[
             TList<Stations> list = new TList<Stations>();
             Stations entity = new Stations();
             entity.StringProperty = "foo";
             Stations entity2 = new Stations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StationsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Update(LibraryManagement.Domain.Stations)">
            <summary>
            public virtual method that Updates a Stations object into the datasource using a transaction.
            </summary>
            <param name="entity">Stations object to Update.</param>
            <remarks>After Updateing into the datasource, the Stations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Stations entity = StationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StationsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Stations</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Stations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Stations.
             <code><![CDATA[
             TList<Stations> list = new TList<Stations>();
             Stations entity = new Stations();
             entity.StringProperty = "foo";
             Stations entity2 = new Stations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StationsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Save(LibraryManagement.Domain.Stations)">
            <summary>
            public virtual method that Saves a Stations object into the datasource using a transaction.
            </summary>
            <param name="entity">Stations object to Save.</param>
            <remarks>After Saveing into the datasource, the Stations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Stations entity = StationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StationsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Stations</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Stations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Stations.
             <code><![CDATA[
             TList<Stations> list = new TList<Stations>();
             Stations entity = new Stations();
             entity.StringProperty = "foo";
             Stations entity2 = new Stations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StationsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Delete(LibraryManagement.Domain.Stations)">
            <summary>
            public virtual method that Deletes a Stations object into the datasource using a transaction.
            </summary>
            <param name="entity">Stations object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Stations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Stations entity = StationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StationsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Stations</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Stations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Stations.
             <code><![CDATA[
             TList<Stations> list = new TList<Stations>();
             Stations entity = new Stations();
             entity.StringProperty = "foo";
             Stations entity2 = new Stations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StationsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Delete(LibraryManagement.Domain.StationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _id
            </summary>
            <param name="_id">Stations pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepLoadById(System.Int32,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Stations"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Stations Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.Stations)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Stations Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.Stations)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.Stations,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.Stations)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Stations Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.Stations,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Stations"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Stations Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.Stations)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.Stations)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Stations"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepSave(LibraryManagement.Domain.Stations)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Stations"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Stations Object</param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepSave(LibraryManagement.Domain.Stations,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Stations object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Stations Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Stations</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Stations} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.StationsServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Stations Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.StationsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.StationsService.#ctor">
            <summary>
            Initializes a new instance of the StationsService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.AccountService">
            <summary>
            An component type implementation of the 'tblAccount' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.AccountService.#ctor">
            <summary>
            Initializes a new instance of the AccountService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.MenusService">
            <summary>
            An component type implementation of the 'tblMenus' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.MenusService.#ctor">
            <summary>
            Initializes a new instance of the MenusService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.TransValueService">
            <summary>
            An component type implementation of the 'tblTransValue' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TransValueService.#ctor">
            <summary>
            Initializes a new instance of the TransValueService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.UserGrpService">
            <summary>
            An component type implementation of the 'tblUserGrp' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UserGrpService.#ctor">
            <summary>
            Initializes a new instance of the UserGrpService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.UnitService">
            <summary>
            An component type implementation of the 'tblUnit' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UnitService.#ctor">
            <summary>
            Initializes a new instance of the UnitService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.StaffServiceBase">
            <summary>
             An object representation of the 'tblStaff' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Staff.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Staff"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Staff"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.CreateStaff(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Staff"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_name"></param>
            <param name="_depart"></param>
            <param name="_openDate"></param>
            <param name="_salaryLevel"></param>
            <param name="_address"></param>
            <param name="_phone"></param>
            <param name="_personId"></param>
            <param name="_personIddate"></param>
            <param name="_location"></param>
            <param name="_contactPerson"></param>
            <param name="_remark"></param>
            <param name="_labelsprn"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Get(LibraryManagement.Domain.StaffKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblStaff index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblStaff index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Staff"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Staff"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Staff} of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Staff</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Insert(LibraryManagement.Domain.Staff)">
            <summary>
            public virtual method that Inserts a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Insert.</param>
            <remarks>After Inserting into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Staff entity = new Staff();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StaffService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Update(LibraryManagement.Domain.Staff)">
            <summary>
            public virtual method that Updates a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Update.</param>
            <remarks>After Updateing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StaffService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Save(LibraryManagement.Domain.Staff)">
            <summary>
            public virtual method that Saves a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Save.</param>
            <remarks>After Saveing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StaffService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Delete(LibraryManagement.Domain.Staff)">
            <summary>
            public virtual method that Deletes a Staff object into the datasource using a transaction.
            </summary>
            <param name="entity">Staff object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Staff object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Staff entity = StaffService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StaffService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Staff</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Staff</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Staff.
             <code><![CDATA[
             TList<Staff> list = new TList<Staff>();
             Staff entity = new Staff();
             entity.StringProperty = "foo";
             Staff entity2 = new Staff();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StaffService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Delete(LibraryManagement.Domain.StaffKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Staff pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepLoadById(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Staff"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.Staff)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Staff Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.Staff,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Staff Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.Staff,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Staff"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.Staff)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Staff"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepSave(LibraryManagement.Domain.Staff)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Staff"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Staff Object</param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepSave(LibraryManagement.Domain.Staff,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Staff object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Staff Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Staff</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Staff} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.StaffServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Staff Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.StaffServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.GoodsService">
            <summary>
            An component type implementation of the 'tblGoods' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.GoodsServiceBase">
            <summary>
             An object representation of the 'tblGoods' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Goods.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Goods"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Goods"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.CreateGoods(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String,System.Byte[],System.Nullable{System.DateTime},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Goods"/> instance.
            </summary>
            <param name="_goodsId"></param>
            <param name="_barcode"></param>
            <param name="_mbc"></param>
            <param name="_safeNameRef"></param>
            <param name="_grpId"></param>
            <param name="_shortName"></param>
            <param name="_fullName"></param>
            <param name="_packunit"></param>
            <param name="_piceunit"></param>
            <param name="_unitconv"></param>
            <param name="_suppId"></param>
            <param name="_image"></param>
            <param name="_openDate"></param>
            <param name="_taxCode"></param>
            <param name="_mercType"></param>
            <param name="_attrType"></param>
            <param name="_domestic"></param>
            <param name="_warranty"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Get(LibraryManagement.Domain.GoodsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.GetByGoodsId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblGoods index.
            </summary>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.GetByGoodsId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblGoods index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Goods"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Goods"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Goods} of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Goods</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Insert(LibraryManagement.Domain.Goods)">
            <summary>
            public virtual method that Inserts a Goods object into the datasource using a transaction.
            </summary>
            <param name="entity">Goods object to Insert.</param>
            <remarks>After Inserting into the datasource, the Goods object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Goods entity = new Goods();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GoodsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Goods</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Goods</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Goods.
             <code><![CDATA[
             TList<Goods> list = new TList<Goods>();
             Goods entity = new Goods();
             entity.StringProperty = "foo";
             Goods entity2 = new Goods();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GoodsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Update(LibraryManagement.Domain.Goods)">
            <summary>
            public virtual method that Updates a Goods object into the datasource using a transaction.
            </summary>
            <param name="entity">Goods object to Update.</param>
            <remarks>After Updateing into the datasource, the Goods object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Goods entity = GoodsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GoodsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Goods</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Goods</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Goods.
             <code><![CDATA[
             TList<Goods> list = new TList<Goods>();
             Goods entity = new Goods();
             entity.StringProperty = "foo";
             Goods entity2 = new Goods();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GoodsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Save(LibraryManagement.Domain.Goods)">
            <summary>
            public virtual method that Saves a Goods object into the datasource using a transaction.
            </summary>
            <param name="entity">Goods object to Save.</param>
            <remarks>After Saveing into the datasource, the Goods object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Goods entity = GoodsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GoodsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Goods</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Goods</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Goods.
             <code><![CDATA[
             TList<Goods> list = new TList<Goods>();
             Goods entity = new Goods();
             entity.StringProperty = "foo";
             Goods entity2 = new Goods();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GoodsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Delete(LibraryManagement.Domain.Goods)">
            <summary>
            public virtual method that Deletes a Goods object into the datasource using a transaction.
            </summary>
            <param name="entity">Goods object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Goods object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Goods entity = GoodsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GoodsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Goods</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Goods</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Goods.
             <code><![CDATA[
             TList<Goods> list = new TList<Goods>();
             Goods entity = new Goods();
             entity.StringProperty = "foo";
             Goods entity2 = new Goods();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GoodsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Delete(LibraryManagement.Domain.GoodsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _goodsId
            </summary>
            <param name="_goodsId">Goods pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepLoadByGoodsId(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Goods"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Goods Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.Goods)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Goods Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.Goods)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.Goods,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.Goods)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Goods Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.Goods,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Goods"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Goods Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.Goods)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.Goods)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Goods"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepSave(LibraryManagement.Domain.Goods)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Goods"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Goods Object</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepSave(LibraryManagement.Domain.Goods,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Goods object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Goods Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Goods</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Goods} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.GoodsServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Goods Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.GoodsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.GoodsService.#ctor">
            <summary>
            Initializes a new instance of the GoodsService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.BarcodeService">
            <summary>
            An component type implementation of the 'tblBarcode' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.BarcodeService.#ctor">
            <summary>
            Initializes a new instance of the BarcodeService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.CsCardService">
            <summary>
            An component type implementation of the 'tblCsCard' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.CsCardServiceBase">
            <summary>
             An object representation of the 'tblCsCard' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CsCard.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.CsCard"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.CsCard"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.CreateCsCard(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Byte[],System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.CsCard"/> instance.
            </summary>
            <param name="_cardId"></param>
            <param name="_isVip"></param>
            <param name="_csSex"></param>
            <param name="_personId"></param>
            <param name="_birthday"></param>
            <param name="_psIssuedate"></param>
            <param name="_psPlaceissuse"></param>
            <param name="_fullname"></param>
            <param name="_address"></param>
            <param name="_phone"></param>
            <param name="_email"></param>
            <param name="_discPc"></param>
            <param name="_issDate"></param>
            <param name="_dueDate"></param>
            <param name="_image"></param>
            <param name="_remark"></param>
            <param name="_begmark"></param>
            <param name="_endmark"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Get(LibraryManagement.Domain.CsCardKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.GetByCardId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblCustCard index.
            </summary>
            <param name="_cardId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.GetByCardId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblCustCard index.
            </summary>
            <param name="_cardId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.CsCard"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.CsCard"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CsCard} of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CsCard</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Insert(LibraryManagement.Domain.CsCard)">
            <summary>
            public virtual method that Inserts a CsCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CsCard object to Insert.</param>
            <remarks>After Inserting into the datasource, the CsCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CsCard entity = new CsCard();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CsCardService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CsCard</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CsCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CsCard.
             <code><![CDATA[
             TList<CsCard> list = new TList<CsCard>();
             CsCard entity = new CsCard();
             entity.StringProperty = "foo";
             CsCard entity2 = new CsCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CsCardService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Update(LibraryManagement.Domain.CsCard)">
            <summary>
            public virtual method that Updates a CsCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CsCard object to Update.</param>
            <remarks>After Updateing into the datasource, the CsCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CsCard entity = CsCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CsCardService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CsCard</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CsCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CsCard.
             <code><![CDATA[
             TList<CsCard> list = new TList<CsCard>();
             CsCard entity = new CsCard();
             entity.StringProperty = "foo";
             CsCard entity2 = new CsCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CsCardService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Save(LibraryManagement.Domain.CsCard)">
            <summary>
            public virtual method that Saves a CsCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CsCard object to Save.</param>
            <remarks>After Saveing into the datasource, the CsCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CsCard entity = CsCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CsCardService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CsCard</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CsCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CsCard.
             <code><![CDATA[
             TList<CsCard> list = new TList<CsCard>();
             CsCard entity = new CsCard();
             entity.StringProperty = "foo";
             CsCard entity2 = new CsCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CsCardService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Delete(LibraryManagement.Domain.CsCard)">
            <summary>
            public virtual method that Deletes a CsCard object into the datasource using a transaction.
            </summary>
            <param name="entity">CsCard object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CsCard object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CsCard entity = CsCardService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CsCardService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CsCard</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CsCard</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CsCard.
             <code><![CDATA[
             TList<CsCard> list = new TList<CsCard>();
             CsCard entity = new CsCard();
             entity.StringProperty = "foo";
             CsCard entity2 = new CsCard();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CsCardService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Delete(LibraryManagement.Domain.CsCardKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _cardId
            </summary>
            <param name="_cardId">CsCard pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepLoadByCardId(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.CsCard"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_cardId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CsCard Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.CsCard)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CsCard Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.CsCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.CsCard,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.CsCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CsCard Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.CsCard,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.CsCard"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CsCard Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.CsCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.CsCard)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.CsCard"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepSave(LibraryManagement.Domain.CsCard)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.CsCard"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CsCard Object</param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepSave(LibraryManagement.Domain.CsCard,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CsCard object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CsCard Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CsCard</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CsCard} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.CsCardServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CsCard Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.CsCardServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.CsCardService.#ctor">
            <summary>
            Initializes a new instance of the CsCardService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.SysvarServiceBase">
            <summary>
             An object representation of the 'tblSysvar' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Sysvar.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Sysvar"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.CreateSysvar(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Sysvar"/> instance.
            </summary>
            <param name="_mCode"></param>
            <param name="_mType"></param>
            <param name="_mValue"></param>
            <param name="_description"></param>
            <param name="_type"></param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Get(LibraryManagement.Domain.SysvarKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.GetByMCode(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblSysvar index.
            </summary>
            <param name="_mCode"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.GetByMCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblSysvar index.
            </summary>
            <param name="_mCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Sysvar"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Sysvar"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Sysvar} of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Sysvar</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Insert(LibraryManagement.Domain.Sysvar)">
            <summary>
            public virtual method that Inserts a Sysvar object into the datasource using a transaction.
            </summary>
            <param name="entity">Sysvar object to Insert.</param>
            <remarks>After Inserting into the datasource, the Sysvar object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Sysvar entity = new Sysvar();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SysvarService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Sysvar</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Sysvar</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Sysvar.
             <code><![CDATA[
             TList<Sysvar> list = new TList<Sysvar>();
             Sysvar entity = new Sysvar();
             entity.StringProperty = "foo";
             Sysvar entity2 = new Sysvar();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SysvarService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Update(LibraryManagement.Domain.Sysvar)">
            <summary>
            public virtual method that Updates a Sysvar object into the datasource using a transaction.
            </summary>
            <param name="entity">Sysvar object to Update.</param>
            <remarks>After Updateing into the datasource, the Sysvar object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Sysvar entity = SysvarService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SysvarService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Sysvar</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Sysvar</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Sysvar.
             <code><![CDATA[
             TList<Sysvar> list = new TList<Sysvar>();
             Sysvar entity = new Sysvar();
             entity.StringProperty = "foo";
             Sysvar entity2 = new Sysvar();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SysvarService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Save(LibraryManagement.Domain.Sysvar)">
            <summary>
            public virtual method that Saves a Sysvar object into the datasource using a transaction.
            </summary>
            <param name="entity">Sysvar object to Save.</param>
            <remarks>After Saveing into the datasource, the Sysvar object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Sysvar entity = SysvarService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SysvarService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Sysvar</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Sysvar</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Sysvar.
             <code><![CDATA[
             TList<Sysvar> list = new TList<Sysvar>();
             Sysvar entity = new Sysvar();
             entity.StringProperty = "foo";
             Sysvar entity2 = new Sysvar();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SysvarService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Delete(LibraryManagement.Domain.Sysvar)">
            <summary>
            public virtual method that Deletes a Sysvar object into the datasource using a transaction.
            </summary>
            <param name="entity">Sysvar object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Sysvar object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Sysvar entity = SysvarService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SysvarService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Sysvar</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Sysvar</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Sysvar.
             <code><![CDATA[
             TList<Sysvar> list = new TList<Sysvar>();
             Sysvar entity = new Sysvar();
             entity.StringProperty = "foo";
             Sysvar entity2 = new Sysvar();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SysvarService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Delete(LibraryManagement.Domain.SysvarKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _mCode
            </summary>
            <param name="_mCode">Sysvar pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepLoadByMCode(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Sysvar"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_mCode"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Sysvar Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.Sysvar)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Sysvar Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.Sysvar)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.Sysvar,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.Sysvar)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Sysvar Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.Sysvar,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Sysvar"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Sysvar Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.Sysvar)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.Sysvar)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Sysvar"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepSave(LibraryManagement.Domain.Sysvar)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Sysvar"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Sysvar Object</param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepSave(LibraryManagement.Domain.Sysvar,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Sysvar object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Sysvar Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Sysvar</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Sysvar} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.SysvarServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Sysvar Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.SysvarServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.PaymentOrderServiceBase">
            <summary>
             An object representation of the 'tblPaymentOrder' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PaymentOrder.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.PaymentOrder"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.CreatePaymentOrder(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Decimal)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.PaymentOrder"/> instance.
            </summary>
            <param name="_transNum"></param>
            <param name="_payer"></param>
            <param name="_payerAcc"></param>
            <param name="_payerBank"></param>
            <param name="_payerBranch"></param>
            <param name="_benef"></param>
            <param name="_benefAcc"></param>
            <param name="_benefBank"></param>
            <param name="_benefBranch"></param>
            <param name="_amount"></param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Get(LibraryManagement.Domain.PaymentOrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.GetByTransNum(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblAtransInfo index.
            </summary>
            <param name="_transNum"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.GetByTransNum(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblAtransInfo index.
            </summary>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.PaymentOrder"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.PaymentOrder"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PaymentOrder} of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PaymentOrder</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Insert(LibraryManagement.Domain.PaymentOrder)">
            <summary>
            public virtual method that Inserts a PaymentOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentOrder object to Insert.</param>
            <remarks>After Inserting into the datasource, the PaymentOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PaymentOrder entity = new PaymentOrder();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PaymentOrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentOrder</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PaymentOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PaymentOrder.
             <code><![CDATA[
             TList<PaymentOrder> list = new TList<PaymentOrder>();
             PaymentOrder entity = new PaymentOrder();
             entity.StringProperty = "foo";
             PaymentOrder entity2 = new PaymentOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentOrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Update(LibraryManagement.Domain.PaymentOrder)">
            <summary>
            public virtual method that Updates a PaymentOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentOrder object to Update.</param>
            <remarks>After Updateing into the datasource, the PaymentOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PaymentOrder entity = PaymentOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PaymentOrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentOrder</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PaymentOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PaymentOrder.
             <code><![CDATA[
             TList<PaymentOrder> list = new TList<PaymentOrder>();
             PaymentOrder entity = new PaymentOrder();
             entity.StringProperty = "foo";
             PaymentOrder entity2 = new PaymentOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentOrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Save(LibraryManagement.Domain.PaymentOrder)">
            <summary>
            public virtual method that Saves a PaymentOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentOrder object to Save.</param>
            <remarks>After Saveing into the datasource, the PaymentOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PaymentOrder entity = PaymentOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PaymentOrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentOrder</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PaymentOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PaymentOrder.
             <code><![CDATA[
             TList<PaymentOrder> list = new TList<PaymentOrder>();
             PaymentOrder entity = new PaymentOrder();
             entity.StringProperty = "foo";
             PaymentOrder entity2 = new PaymentOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentOrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Delete(LibraryManagement.Domain.PaymentOrder)">
            <summary>
            public virtual method that Deletes a PaymentOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">PaymentOrder object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PaymentOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PaymentOrder entity = PaymentOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PaymentOrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PaymentOrder</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PaymentOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PaymentOrder.
             <code><![CDATA[
             TList<PaymentOrder> list = new TList<PaymentOrder>();
             PaymentOrder entity = new PaymentOrder();
             entity.StringProperty = "foo";
             PaymentOrder entity2 = new PaymentOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PaymentOrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Delete(LibraryManagement.Domain.PaymentOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _transNum
            </summary>
            <param name="_transNum">PaymentOrder pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoadByTransNum(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.PaymentOrder"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_transNum"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.PaymentOrder)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PaymentOrder Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.PaymentOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.PaymentOrder,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.PaymentOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PaymentOrder Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.PaymentOrder,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PaymentOrder Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.PaymentOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.PaymentOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.PaymentOrder"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepSave(LibraryManagement.Domain.PaymentOrder)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PaymentOrder Object</param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepSave(LibraryManagement.Domain.PaymentOrder,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PaymentOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PaymentOrder Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PaymentOrder</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PaymentOrder} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PaymentOrder Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.PaymentOrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:LibraryManagement.Service.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.GenericProcessorResult.AddBrokenRulesList(System.Type,LibraryManagement.Domain.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:LibraryManagement.Service.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:LibraryManagement.Service.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.CurrencyService">
            <summary>
            An component type implementation of the 'tblCurrency' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.CurrencyServiceBase">
            <summary>
             An object representation of the 'tblCurrency' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Currency.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Currency"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Currency"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.CreateCurrency(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Currency"/> instance.
            </summary>
            <param name="_id"></param>
            <param name="_description"></param>
            <param name="_exchange"></param>
            <param name="_status"></param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Get(LibraryManagement.Domain.CurrencyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.GetById(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblCurrency index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblCurrency index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Currency"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Currency"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Currency} of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Currency</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Insert(LibraryManagement.Domain.Currency)">
            <summary>
            public virtual method that Inserts a Currency object into the datasource using a transaction.
            </summary>
            <param name="entity">Currency object to Insert.</param>
            <remarks>After Inserting into the datasource, the Currency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Currency entity = new Currency();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CurrencyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Currency</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Currency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Currency.
             <code><![CDATA[
             TList<Currency> list = new TList<Currency>();
             Currency entity = new Currency();
             entity.StringProperty = "foo";
             Currency entity2 = new Currency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Update(LibraryManagement.Domain.Currency)">
            <summary>
            public virtual method that Updates a Currency object into the datasource using a transaction.
            </summary>
            <param name="entity">Currency object to Update.</param>
            <remarks>After Updateing into the datasource, the Currency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Currency entity = CurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CurrencyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Currency</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Currency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Currency.
             <code><![CDATA[
             TList<Currency> list = new TList<Currency>();
             Currency entity = new Currency();
             entity.StringProperty = "foo";
             Currency entity2 = new Currency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Save(LibraryManagement.Domain.Currency)">
            <summary>
            public virtual method that Saves a Currency object into the datasource using a transaction.
            </summary>
            <param name="entity">Currency object to Save.</param>
            <remarks>After Saveing into the datasource, the Currency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Currency entity = CurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CurrencyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Currency</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Currency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Currency.
             <code><![CDATA[
             TList<Currency> list = new TList<Currency>();
             Currency entity = new Currency();
             entity.StringProperty = "foo";
             Currency entity2 = new Currency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Delete(LibraryManagement.Domain.Currency)">
            <summary>
            public virtual method that Deletes a Currency object into the datasource using a transaction.
            </summary>
            <param name="entity">Currency object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Currency object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Currency entity = CurrencyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CurrencyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Currency</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Currency</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Currency.
             <code><![CDATA[
             TList<Currency> list = new TList<Currency>();
             Currency entity = new Currency();
             entity.StringProperty = "foo";
             Currency entity2 = new Currency();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CurrencyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Delete(LibraryManagement.Domain.CurrencyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _id
            </summary>
            <param name="_id">Currency pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoadById(System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Currency"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Currency Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.Currency)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Currency Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.Currency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.Currency,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.Currency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Currency Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.Currency,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Currency"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Currency Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.Currency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.Currency)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Currency"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepSave(LibraryManagement.Domain.Currency)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Currency"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Currency Object</param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepSave(LibraryManagement.Domain.Currency,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Currency object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Currency Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Currency</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Currency} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Currency Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.CurrencyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.CurrencyService.#ctor">
            <summary>
            Initializes a new instance of the CurrencyService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.MercLocationService">
            <summary>
            An component type implementation of the 'tblMercLocation' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.MercLocationService.#ctor">
            <summary>
            Initializes a new instance of the MercLocationService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.SysvarService">
            <summary>
            An component type implementation of the 'tblSysvar' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.SysvarService.#ctor">
            <summary>
            Initializes a new instance of the SysvarService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.StockInfoService">
            <summary>
            An component type implementation of the 'tblStockInfo' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StockInfoService.#ctor">
            <summary>
            Initializes a new instance of the StockInfoService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.KitInfoService">
            <summary>
            An component type implementation of the 'tblKit_info' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Service.KitInfoServiceBase">
            <summary>
             An object representation of the 'tblKit_info' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the KitInfo.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.KitInfo"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.CreateKitInfo(System.String,System.String,System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.KitInfo"/> instance.
            </summary>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <param name="_qty"></param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Get(LibraryManagement.Domain.KitInfoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.GetByKitIdGoodsId(System.String,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblKit_info index.
            </summary>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.GetByKitIdGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblKit_info index.
            </summary>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.KitInfo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.KitInfo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{KitInfo} of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>KitInfo</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Insert(LibraryManagement.Domain.KitInfo)">
            <summary>
            public virtual method that Inserts a KitInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">KitInfo object to Insert.</param>
            <remarks>After Inserting into the datasource, the KitInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            KitInfo entity = new KitInfo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KitInfoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KitInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>KitInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of KitInfo.
             <code><![CDATA[
             TList<KitInfo> list = new TList<KitInfo>();
             KitInfo entity = new KitInfo();
             entity.StringProperty = "foo";
             KitInfo entity2 = new KitInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KitInfoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Update(LibraryManagement.Domain.KitInfo)">
            <summary>
            public virtual method that Updates a KitInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">KitInfo object to Update.</param>
            <remarks>After Updateing into the datasource, the KitInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            KitInfo entity = KitInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KitInfoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KitInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>KitInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of KitInfo.
             <code><![CDATA[
             TList<KitInfo> list = new TList<KitInfo>();
             KitInfo entity = new KitInfo();
             entity.StringProperty = "foo";
             KitInfo entity2 = new KitInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KitInfoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Save(LibraryManagement.Domain.KitInfo)">
            <summary>
            public virtual method that Saves a KitInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">KitInfo object to Save.</param>
            <remarks>After Saveing into the datasource, the KitInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            KitInfo entity = KitInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KitInfoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KitInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>KitInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of KitInfo.
             <code><![CDATA[
             TList<KitInfo> list = new TList<KitInfo>();
             KitInfo entity = new KitInfo();
             entity.StringProperty = "foo";
             KitInfo entity2 = new KitInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KitInfoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Delete(LibraryManagement.Domain.KitInfo)">
            <summary>
            public virtual method that Deletes a KitInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">KitInfo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the KitInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            KitInfo entity = KitInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KitInfoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>KitInfo</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>KitInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of KitInfo.
             <code><![CDATA[
             TList<KitInfo> list = new TList<KitInfo>();
             KitInfo entity = new KitInfo();
             entity.StringProperty = "foo";
             KitInfo entity2 = new KitInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KitInfoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Delete(LibraryManagement.Domain.KitInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _kitId, System.String _goodsId
            </summary>
            <param name="_kitId">KitInfo pk id.</param>
            <param name="_goodsId">KitInfo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoadByKitIdGoodsId(System.String,System.String,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.KitInfo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KitInfo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.KitInfo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">KitInfo Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.KitInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.KitInfo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.KitInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">KitInfo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.KitInfo,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.KitInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">KitInfo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.KitInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.KitInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.KitInfo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepSave(LibraryManagement.Domain.KitInfo)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.KitInfo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">KitInfo Object</param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepSave(LibraryManagement.Domain.KitInfo,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the KitInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">KitInfo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>KitInfo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{KitInfo} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">KitInfo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.KitInfoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.KitInfoService.#ctor">
            <summary>
            Initializes a new instance of the KitInfoService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ModePaymentService">
            <summary>
            An component type implementation of the 'tblModePayment' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.ModePaymentService.#ctor">
            <summary>
            Initializes a new instance of the ModePaymentService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.TransactionService">
            <summary>
            An component type implementation of the 'tblTransaction' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.TransactionService.#ctor">
            <summary>
            Initializes a new instance of the TransactionService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.UserService">
            <summary>
            An component type implementation of the 'tblUser' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.UserService.#ctor">
            <summary>
            Initializes a new instance of the UserService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.PaymentOrderService">
            <summary>
            An component type implementation of the 'tblPaymentOrder' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.PaymentOrderService.#ctor">
            <summary>
            Initializes a new instance of the PaymentOrderService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ReportsServiceBase">
            <summary>
             An object representation of the 'tblReports' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Reports.cs file instead.
             All custom implementations should be done in the <see cref="T:LibraryManagement.Domain.Reports"/> class.
             </remarks>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:LibraryManagement.Domain.Reports"/> instance .
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.CreateReports(System.Int32,System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:LibraryManagement.Domain.Reports"/> instance.
            </summary>
            <param name="_idx"></param>
            <param name="_depId"></param>
            <param name="_repName"></param>
            <param name="_description"></param>
            <param name="_procedure"></param>
            <param name="_depCode"></param>
            <param name="_status"></param>
            <param name="_safeNameChecked"></param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Get(LibraryManagement.Domain.ReportsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.GetByIdx(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblReports1 index.
            </summary>
            <param name="_idx"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.GetByIdx(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:LibraryManagement.Domain.TList`1"/> from the datasource based on the primary key PK_tblReports1 index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:LibraryManagement.Domain.Reports"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:LibraryManagement.Domain.Reports"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/> </returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:LibraryManagement.Domain.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:LibraryManagement.Domain.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Reports} of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Reports</c> objects.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Insert(LibraryManagement.Domain.Reports)">
            <summary>
            public virtual method that Inserts a Reports object into the datasource using a transaction.
            </summary>
            <param name="entity">Reports object to Insert.</param>
            <remarks>After Inserting into the datasource, the Reports object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Reports entity = new Reports();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ReportsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Insert(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reports</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Reports</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Reports.
             <code><![CDATA[
             TList<Reports> list = new TList<Reports>();
             Reports entity = new Reports();
             entity.StringProperty = "foo";
             Reports entity2 = new Reports();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReportsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Update(LibraryManagement.Domain.Reports)">
            <summary>
            public virtual method that Updates a Reports object into the datasource using a transaction.
            </summary>
            <param name="entity">Reports object to Update.</param>
            <remarks>After Updateing into the datasource, the Reports object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Reports entity = ReportsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ReportsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Update(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports})">
             <summary>
             public virtual method that Updates rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reports</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Reports</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Reports.
             <code><![CDATA[
             TList<Reports> list = new TList<Reports>();
             Reports entity = new Reports();
             entity.StringProperty = "foo";
             Reports entity2 = new Reports();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReportsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Save(LibraryManagement.Domain.Reports)">
            <summary>
            public virtual method that Saves a Reports object into the datasource using a transaction.
            </summary>
            <param name="entity">Reports object to Save.</param>
            <remarks>After Saveing into the datasource, the Reports object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Reports entity = ReportsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ReportsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Save(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports})">
             <summary>
             public virtual method that Saves rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reports</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Reports</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Reports.
             <code><![CDATA[
             TList<Reports> list = new TList<Reports>();
             Reports entity = new Reports();
             entity.StringProperty = "foo";
             Reports entity2 = new Reports();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReportsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Delete(LibraryManagement.Domain.Reports)">
            <summary>
            public virtual method that Deletes a Reports object into the datasource using a transaction.
            </summary>
            <param name="entity">Reports object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Reports object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Reports entity = ReportsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ReportsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Delete(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:LibraryManagement.Domain.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Reports</c> objects in a <see cref="T:LibraryManagement.Domain.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Reports</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Reports.
             <code><![CDATA[
             TList<Reports> list = new TList<Reports>();
             Reports entity = new Reports();
             entity.StringProperty = "foo";
             Reports entity2 = new Reports();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ReportsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Delete(LibraryManagement.Domain.ReportsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _idx
            </summary>
            <param name="_idx">Reports pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepLoadByIdx(System.Int32,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:LibraryManagement.Domain.Reports"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <param name="_idx"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Reports Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.Reports)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Reports Object</param>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.Reports)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.Reports,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.Reports)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Reports Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.Reports,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Reports"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Reports Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports})">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.Reports)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.Reports)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:LibraryManagement.Domain.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepLoad(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:LibraryManagement.Domain.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:LibraryManagement.Dao.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:LibraryManagement.Domain.Reports"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepSave(LibraryManagement.Domain.Reports)">
            <summary>
            public virtualDeep Saves the <see cref="T:LibraryManagement.Domain.Reports"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Reports Object</param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepSave(LibraryManagement.Domain.Reports,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Reports object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Reports Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Reports</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports})">
            <summary>
            Deep Save the entire <see cref="T:LibraryManagement.Domain.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Reports} Object</param>
        </member>
        <member name="M:LibraryManagement.Service.ReportsServiceBase.DeepSave(LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:LibraryManagement.Domain.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:LibraryManagement.Domain.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Reports Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:LibraryManagement.Service.ReportsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.ReportsService">
            <summary>
            An component type implementation of the 'tblReports' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.ReportsService.#ctor">
            <summary>
            Initializes a new instance of the ReportsService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:LibraryManagement.Service.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="M:LibraryManagement.Service.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.CustomerService">
            <summary>
            An component type implementation of the 'tblCustomer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.CustomerService.#ctor">
            <summary>
            Initializes a new instance of the CustomerService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.StaffService">
            <summary>
            An component type implementation of the 'tblStaff' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.StaffService.#ctor">
            <summary>
            Initializes a new instance of the StaffService class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Service.OnOrderService">
            <summary>
            An component type implementation of the 'tblOn_order' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Service.OnOrderService.#ctor">
            <summary>
            Initializes a new instance of the OnOrderService class.
            </summary>
        </member>
    </members>
</doc>
