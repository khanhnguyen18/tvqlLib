
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file AtrCode.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblAtrCode' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AtrCodeBase : EntityBase, IAtrCode, IEntityId<AtrCodeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AtrCodeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AtrCodeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AtrCodeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AtrCode> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AtrCodeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AtrCodeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AtrCodeBase"/> instance.
		///</summary>
		public AtrCodeBase()
		{
			this.entityData = new AtrCodeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AtrCodeBase"/> instance.
		///</summary>
		///<param name="_transCode"></param>
		///<param name="_transName"></param>
		///<param name="_status"></param>
		///<param name="_dbAccid"></param>
		///<param name="_crAccid"></param>
		///<param name="_accid1"></param>
		///<param name="_accid2"></param>
		///<param name="_accid3"></param>
		///<param name="_pcommand"></param>
		///<param name="_form"></param>
		///<param name="_voucher"></param>
		///<param name="_fvoucher"></param>
		///<param name="_nov"></param>
		///<param name="_trType"></param>
		public AtrCodeBase(System.String _transCode, System.String _transName, System.Boolean? _status, 
			System.String _dbAccid, System.String _crAccid, System.String _accid1, System.String _accid2, 
			System.String _accid3, System.String _pcommand, System.String _form, System.String _voucher, 
			System.String _fvoucher, System.Decimal? _nov, System.String _trType)
		{
			this.entityData = new AtrCodeEntityData();
			this.backupData = null;

			this.TransCode = _transCode;
			this.TransName = _transName;
			this.Status = _status;
			this.DbAccid = _dbAccid;
			this.CrAccid = _crAccid;
			this.Accid1 = _accid1;
			this.Accid2 = _accid2;
			this.Accid3 = _accid3;
			this.Pcommand = _pcommand;
			this.Form = _form;
			this.Voucher = _voucher;
			this.Fvoucher = _fvoucher;
			this.Nov = _nov;
			this.TrType = _trType;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AtrCode"/> instance.
		///</summary>
		///<param name="_transCode"></param>
		///<param name="_transName"></param>
		///<param name="_status"></param>
		///<param name="_dbAccid"></param>
		///<param name="_crAccid"></param>
		///<param name="_accid1"></param>
		///<param name="_accid2"></param>
		///<param name="_accid3"></param>
		///<param name="_pcommand"></param>
		///<param name="_form"></param>
		///<param name="_voucher"></param>
		///<param name="_fvoucher"></param>
		///<param name="_nov"></param>
		///<param name="_trType"></param>
		public static AtrCode CreateAtrCode(System.String _transCode, System.String _transName, System.Boolean? _status, 
			System.String _dbAccid, System.String _crAccid, System.String _accid1, System.String _accid2, 
			System.String _accid3, System.String _pcommand, System.String _form, System.String _voucher, 
			System.String _fvoucher, System.Decimal? _nov, System.String _trType)
		{
			AtrCode newAtrCode = new AtrCode();
			newAtrCode.TransCode = _transCode;
			newAtrCode.TransName = _transName;
			newAtrCode.Status = _status;
			newAtrCode.DbAccid = _dbAccid;
			newAtrCode.CrAccid = _crAccid;
			newAtrCode.Accid1 = _accid1;
			newAtrCode.Accid2 = _accid2;
			newAtrCode.Accid3 = _accid3;
			newAtrCode.Pcommand = _pcommand;
			newAtrCode.Form = _form;
			newAtrCode.Voucher = _voucher;
			newAtrCode.Fvoucher = _fvoucher;
			newAtrCode.Nov = _nov;
			newAtrCode.TrType = _trType;
			return newAtrCode;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the TransCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 2)]
		public virtual System.String TransCode
		{
			get
			{
				return this.entityData.TransCode; 
			}
			
			set
			{
				if (this.entityData.TransCode == value)
					return;
				
                OnPropertyChanging("TransCode");                    
				OnColumnChanging(AtrCodeColumn.TransCode, this.entityData.TransCode);
				this.entityData.TransCode = value;
				this.EntityId.TransCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.TransCode, this.entityData.TransCode);
				OnPropertyChanged("TransCode");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the trans_code property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the trans_code property.</remarks>
		/// <value>This type is nvarchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalTransCode
		{
			get { return this.entityData.OriginalTransCode; }
			set { this.entityData.OriginalTransCode = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the TransName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String TransName
		{
			get
			{
				return this.entityData.TransName; 
			}
			
			set
			{
				if (this.entityData.TransName == value)
					return;
				
                OnPropertyChanging("TransName");                    
				OnColumnChanging(AtrCodeColumn.TransName, this.entityData.TransName);
				this.entityData.TransName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.TransName, this.entityData.TransName);
				OnPropertyChanged("TransName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(AtrCodeColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DbAccid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 9)]
		public virtual System.String DbAccid
		{
			get
			{
				return this.entityData.DbAccid; 
			}
			
			set
			{
				if (this.entityData.DbAccid == value)
					return;
				
                OnPropertyChanging("DbAccid");                    
				OnColumnChanging(AtrCodeColumn.DbAccid, this.entityData.DbAccid);
				this.entityData.DbAccid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.DbAccid, this.entityData.DbAccid);
				OnPropertyChanged("DbAccid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrAccid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 9)]
		public virtual System.String CrAccid
		{
			get
			{
				return this.entityData.CrAccid; 
			}
			
			set
			{
				if (this.entityData.CrAccid == value)
					return;
				
                OnPropertyChanging("CrAccid");                    
				OnColumnChanging(AtrCodeColumn.CrAccid, this.entityData.CrAccid);
				this.entityData.CrAccid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.CrAccid, this.entityData.CrAccid);
				OnPropertyChanged("CrAccid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Accid1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 9)]
		public virtual System.String Accid1
		{
			get
			{
				return this.entityData.Accid1; 
			}
			
			set
			{
				if (this.entityData.Accid1 == value)
					return;
				
                OnPropertyChanging("Accid1");                    
				OnColumnChanging(AtrCodeColumn.Accid1, this.entityData.Accid1);
				this.entityData.Accid1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Accid1, this.entityData.Accid1);
				OnPropertyChanged("Accid1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Accid2 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 9)]
		public virtual System.String Accid2
		{
			get
			{
				return this.entityData.Accid2; 
			}
			
			set
			{
				if (this.entityData.Accid2 == value)
					return;
				
                OnPropertyChanging("Accid2");                    
				OnColumnChanging(AtrCodeColumn.Accid2, this.entityData.Accid2);
				this.entityData.Accid2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Accid2, this.entityData.Accid2);
				OnPropertyChanged("Accid2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Accid3 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 9)]
		public virtual System.String Accid3
		{
			get
			{
				return this.entityData.Accid3; 
			}
			
			set
			{
				if (this.entityData.Accid3 == value)
					return;
				
                OnPropertyChanging("Accid3");                    
				OnColumnChanging(AtrCodeColumn.Accid3, this.entityData.Accid3);
				this.entityData.Accid3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Accid3, this.entityData.Accid3);
				OnPropertyChanged("Accid3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pcommand property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Pcommand
		{
			get
			{
				return this.entityData.Pcommand; 
			}
			
			set
			{
				if (this.entityData.Pcommand == value)
					return;
				
                OnPropertyChanging("Pcommand");                    
				OnColumnChanging(AtrCodeColumn.Pcommand, this.entityData.Pcommand);
				this.entityData.Pcommand = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Pcommand, this.entityData.Pcommand);
				OnPropertyChanged("Pcommand");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Form property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Form
		{
			get
			{
				return this.entityData.Form; 
			}
			
			set
			{
				if (this.entityData.Form == value)
					return;
				
                OnPropertyChanging("Form");                    
				OnColumnChanging(AtrCodeColumn.Form, this.entityData.Form);
				this.entityData.Form = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Form, this.entityData.Form);
				OnPropertyChanged("Form");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Voucher property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Voucher
		{
			get
			{
				return this.entityData.Voucher; 
			}
			
			set
			{
				if (this.entityData.Voucher == value)
					return;
				
                OnPropertyChanging("Voucher");                    
				OnColumnChanging(AtrCodeColumn.Voucher, this.entityData.Voucher);
				this.entityData.Voucher = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Voucher, this.entityData.Voucher);
				OnPropertyChanged("Voucher");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fvoucher property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Fvoucher
		{
			get
			{
				return this.entityData.Fvoucher; 
			}
			
			set
			{
				if (this.entityData.Fvoucher == value)
					return;
				
                OnPropertyChanging("Fvoucher");                    
				OnColumnChanging(AtrCodeColumn.Fvoucher, this.entityData.Fvoucher);
				this.entityData.Fvoucher = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Fvoucher, this.entityData.Fvoucher);
				OnPropertyChanged("Fvoucher");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nov property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Nov
		{
			get
			{
				return this.entityData.Nov; 
			}
			
			set
			{
				if (this.entityData.Nov == value)
					return;
				
                OnPropertyChanging("Nov");                    
				OnColumnChanging(AtrCodeColumn.Nov, this.entityData.Nov);
				this.entityData.Nov = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.Nov, this.entityData.Nov);
				OnPropertyChanged("Nov");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TrType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String TrType
		{
			get
			{
				return this.entityData.TrType; 
			}
			
			set
			{
				if (this.entityData.TrType == value)
					return;
				
                OnPropertyChanging("TrType");                    
				OnColumnChanging(AtrCodeColumn.TrType, this.entityData.TrType);
				this.entityData.TrType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AtrCodeColumn.TrType, this.entityData.TrType);
				OnPropertyChanged("TrType");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TransCode", "Trans Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransCode", "Trans Code", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransName", "Trans Name", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DbAccid", "Db Accid", 9));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CrAccid", "Cr Accid", 9));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Accid1", "Accid1", 9));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Accid2", "Accid2", 9));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Accid3", "Accid3", 9));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Pcommand", "Pcommand", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Form", "Form", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Voucher", "Voucher", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fvoucher", "Fvoucher", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TrType", "Tr Type", 2));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblAtrCode"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"trans_code", "trans_name", "status", "db_accid", "cr_accid", "accid1", "accid2", "accid3", "pcommand", "form", "voucher", "fvoucher", "nov", "tr_type"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AtrCodeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AtrCode) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AtrCode>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AtrCode);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AtrCode Entity 
		///</summary>
		protected virtual AtrCode Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AtrCode copy = new AtrCode();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.TransCode = this.TransCode;
					copy.OriginalTransCode = this.OriginalTransCode;
				copy.TransName = this.TransName;
				copy.Status = this.Status;
				copy.DbAccid = this.DbAccid;
				copy.CrAccid = this.CrAccid;
				copy.Accid1 = this.Accid1;
				copy.Accid2 = this.Accid2;
				copy.Accid3 = this.Accid3;
				copy.Pcommand = this.Pcommand;
				copy.Form = this.Form;
				copy.Voucher = this.Voucher;
				copy.Fvoucher = this.Fvoucher;
				copy.Nov = this.Nov;
				copy.TrType = this.TrType;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AtrCode Entity 
		///</summary>
		public virtual AtrCode Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AtrCode Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AtrCode DeepCopy()
		{
			return EntityHelper.Clone<AtrCode>(this as AtrCode);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AtrCodeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AtrCodeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AtrCodeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AtrCodeColumn column)
		{
			switch(column)
			{
					case AtrCodeColumn.TransCode:
					return entityData.TransCode != _originalData.TransCode;
					case AtrCodeColumn.TransName:
					return entityData.TransName != _originalData.TransName;
					case AtrCodeColumn.Status:
					return entityData.Status != _originalData.Status;
					case AtrCodeColumn.DbAccid:
					return entityData.DbAccid != _originalData.DbAccid;
					case AtrCodeColumn.CrAccid:
					return entityData.CrAccid != _originalData.CrAccid;
					case AtrCodeColumn.Accid1:
					return entityData.Accid1 != _originalData.Accid1;
					case AtrCodeColumn.Accid2:
					return entityData.Accid2 != _originalData.Accid2;
					case AtrCodeColumn.Accid3:
					return entityData.Accid3 != _originalData.Accid3;
					case AtrCodeColumn.Pcommand:
					return entityData.Pcommand != _originalData.Pcommand;
					case AtrCodeColumn.Form:
					return entityData.Form != _originalData.Form;
					case AtrCodeColumn.Voucher:
					return entityData.Voucher != _originalData.Voucher;
					case AtrCodeColumn.Fvoucher:
					return entityData.Fvoucher != _originalData.Fvoucher;
					case AtrCodeColumn.Nov:
					return entityData.Nov != _originalData.Nov;
					case AtrCodeColumn.TrType:
					return entityData.TrType != _originalData.TrType;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AtrCodeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.TransCode != _originalData.TransCode;
			result = result || entityData.TransName != _originalData.TransName;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.DbAccid != _originalData.DbAccid;
			result = result || entityData.CrAccid != _originalData.CrAccid;
			result = result || entityData.Accid1 != _originalData.Accid1;
			result = result || entityData.Accid2 != _originalData.Accid2;
			result = result || entityData.Accid3 != _originalData.Accid3;
			result = result || entityData.Pcommand != _originalData.Pcommand;
			result = result || entityData.Form != _originalData.Form;
			result = result || entityData.Voucher != _originalData.Voucher;
			result = result || entityData.Fvoucher != _originalData.Fvoucher;
			result = result || entityData.Nov != _originalData.Nov;
			result = result || entityData.TrType != _originalData.TrType;
			return result;
		}	
		
		///<summary>
		///  Returns a AtrCode Entity with the original data.
		///</summary>
		public AtrCode GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAtrCode(
				_originalData.TransCode,
				_originalData.TransName,
				_originalData.Status,
				_originalData.DbAccid,
				_originalData.CrAccid,
				_originalData.Accid1,
				_originalData.Accid2,
				_originalData.Accid3,
				_originalData.Pcommand,
				_originalData.Form,
				_originalData.Voucher,
				_originalData.Fvoucher,
				_originalData.Nov,
				_originalData.TrType
				);
				
			return (AtrCode)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AtrCodeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AtrCodeBase)
				return ValueEquals(this, (AtrCodeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AtrCodeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.TransCode.GetHashCode() ^ 
					((this.TransName == null) ? string.Empty : this.TransName.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					((this.DbAccid == null) ? string.Empty : this.DbAccid.ToString()).GetHashCode() ^ 
					((this.CrAccid == null) ? string.Empty : this.CrAccid.ToString()).GetHashCode() ^ 
					((this.Accid1 == null) ? string.Empty : this.Accid1.ToString()).GetHashCode() ^ 
					((this.Accid2 == null) ? string.Empty : this.Accid2.ToString()).GetHashCode() ^ 
					((this.Accid3 == null) ? string.Empty : this.Accid3.ToString()).GetHashCode() ^ 
					((this.Pcommand == null) ? string.Empty : this.Pcommand.ToString()).GetHashCode() ^ 
					((this.Form == null) ? string.Empty : this.Form.ToString()).GetHashCode() ^ 
					((this.Voucher == null) ? string.Empty : this.Voucher.ToString()).GetHashCode() ^ 
					((this.Fvoucher == null) ? string.Empty : this.Fvoucher.ToString()).GetHashCode() ^ 
					((this.Nov == null) ? string.Empty : this.Nov.ToString()).GetHashCode() ^ 
					((this.TrType == null) ? string.Empty : this.TrType.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AtrCodeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AtrCodeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AtrCodeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AtrCodeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AtrCodeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AtrCodeBase Object1, AtrCodeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.TransCode != Object2.TransCode)
				equal = false;
			if ( Object1.TransName != null && Object2.TransName != null )
			{
				if (Object1.TransName != Object2.TransName)
					equal = false;
			}
			else if (Object1.TransName == null ^ Object2.TransName == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.DbAccid != null && Object2.DbAccid != null )
			{
				if (Object1.DbAccid != Object2.DbAccid)
					equal = false;
			}
			else if (Object1.DbAccid == null ^ Object2.DbAccid == null )
			{
				equal = false;
			}
			if ( Object1.CrAccid != null && Object2.CrAccid != null )
			{
				if (Object1.CrAccid != Object2.CrAccid)
					equal = false;
			}
			else if (Object1.CrAccid == null ^ Object2.CrAccid == null )
			{
				equal = false;
			}
			if ( Object1.Accid1 != null && Object2.Accid1 != null )
			{
				if (Object1.Accid1 != Object2.Accid1)
					equal = false;
			}
			else if (Object1.Accid1 == null ^ Object2.Accid1 == null )
			{
				equal = false;
			}
			if ( Object1.Accid2 != null && Object2.Accid2 != null )
			{
				if (Object1.Accid2 != Object2.Accid2)
					equal = false;
			}
			else if (Object1.Accid2 == null ^ Object2.Accid2 == null )
			{
				equal = false;
			}
			if ( Object1.Accid3 != null && Object2.Accid3 != null )
			{
				if (Object1.Accid3 != Object2.Accid3)
					equal = false;
			}
			else if (Object1.Accid3 == null ^ Object2.Accid3 == null )
			{
				equal = false;
			}
			if ( Object1.Pcommand != null && Object2.Pcommand != null )
			{
				if (Object1.Pcommand != Object2.Pcommand)
					equal = false;
			}
			else if (Object1.Pcommand == null ^ Object2.Pcommand == null )
			{
				equal = false;
			}
			if ( Object1.Form != null && Object2.Form != null )
			{
				if (Object1.Form != Object2.Form)
					equal = false;
			}
			else if (Object1.Form == null ^ Object2.Form == null )
			{
				equal = false;
			}
			if ( Object1.Voucher != null && Object2.Voucher != null )
			{
				if (Object1.Voucher != Object2.Voucher)
					equal = false;
			}
			else if (Object1.Voucher == null ^ Object2.Voucher == null )
			{
				equal = false;
			}
			if ( Object1.Fvoucher != null && Object2.Fvoucher != null )
			{
				if (Object1.Fvoucher != Object2.Fvoucher)
					equal = false;
			}
			else if (Object1.Fvoucher == null ^ Object2.Fvoucher == null )
			{
				equal = false;
			}
			if ( Object1.Nov != null && Object2.Nov != null )
			{
				if (Object1.Nov != Object2.Nov)
					equal = false;
			}
			else if (Object1.Nov == null ^ Object2.Nov == null )
			{
				equal = false;
			}
			if ( Object1.TrType != null && Object2.TrType != null )
			{
				if (Object1.TrType != Object2.TrType)
					equal = false;
			}
			else if (Object1.TrType == null ^ Object2.TrType == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AtrCodeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AtrCodeComparer GetComparer()
        {
            return new AtrCodeComparer();
        }
        */

        // Comparer delegates back to AtrCode
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AtrCode rhs, AtrCodeColumn which)
        {
            switch (which)
            {
            	
            	
            	case AtrCodeColumn.TransCode:
            		return this.TransCode.CompareTo(rhs.TransCode);
            		
            		                 
            	
            	
            	case AtrCodeColumn.TransName:
            		return this.TransName.CompareTo(rhs.TransName);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case AtrCodeColumn.DbAccid:
            		return this.DbAccid.CompareTo(rhs.DbAccid);
            		
            		                 
            	
            	
            	case AtrCodeColumn.CrAccid:
            		return this.CrAccid.CompareTo(rhs.CrAccid);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Accid1:
            		return this.Accid1.CompareTo(rhs.Accid1);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Accid2:
            		return this.Accid2.CompareTo(rhs.Accid2);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Accid3:
            		return this.Accid3.CompareTo(rhs.Accid3);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Pcommand:
            		return this.Pcommand.CompareTo(rhs.Pcommand);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Form:
            		return this.Form.CompareTo(rhs.Form);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Voucher:
            		return this.Voucher.CompareTo(rhs.Voucher);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Fvoucher:
            		return this.Fvoucher.CompareTo(rhs.Fvoucher);
            		
            		                 
            	
            	
            	case AtrCodeColumn.Nov:
            		return this.Nov.Value.CompareTo(rhs.Nov.Value);
            		
            		                 
            	
            	
            	case AtrCodeColumn.TrType:
            		return this.TrType.CompareTo(rhs.TrType);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AtrCodeKey> Members
		
		// member variable for the EntityId property
		private AtrCodeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AtrCodeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AtrCodeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AtrCode")
					.Append("|").Append( this.TransCode.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- TransCode: {0}{14}- TransName: {1}{14}- Status: {2}{14}- DbAccid: {3}{14}- CrAccid: {4}{14}- Accid1: {5}{14}- Accid2: {6}{14}- Accid3: {7}{14}- Pcommand: {8}{14}- Form: {9}{14}- Voucher: {10}{14}- Fvoucher: {11}{14}- Nov: {12}{14}- TrType: {13}{14}{16}", 
				this.TransCode,
				(this.TransName == null) ? string.Empty : this.TransName.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.DbAccid == null) ? string.Empty : this.DbAccid.ToString(),
				(this.CrAccid == null) ? string.Empty : this.CrAccid.ToString(),
				(this.Accid1 == null) ? string.Empty : this.Accid1.ToString(),
				(this.Accid2 == null) ? string.Empty : this.Accid2.ToString(),
				(this.Accid3 == null) ? string.Empty : this.Accid3.ToString(),
				(this.Pcommand == null) ? string.Empty : this.Pcommand.ToString(),
				(this.Form == null) ? string.Empty : this.Form.ToString(),
				(this.Voucher == null) ? string.Empty : this.Voucher.ToString(),
				(this.Fvoucher == null) ? string.Empty : this.Fvoucher.ToString(),
				(this.Nov == null) ? string.Empty : this.Nov.ToString(),
				(this.TrType == null) ? string.Empty : this.TrType.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblAtrCode' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AtrCodeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// trans_code : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblAtrCode"</remarks>
		public System.String TransCode;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalTransCode;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// trans_name : 
		/// </summary>
		public System.String TransName = null;
		
		/// <summary>
		/// status : 
		/// </summary>
		public System.Boolean? Status = true;
		
		/// <summary>
		/// db_accid : 
		/// </summary>
		public System.String DbAccid = null;
		
		/// <summary>
		/// cr_accid : 
		/// </summary>
		public System.String CrAccid = null;
		
		/// <summary>
		/// accid1 : 
		/// </summary>
		public System.String Accid1 = null;
		
		/// <summary>
		/// accid2 : 
		/// </summary>
		public System.String Accid2 = null;
		
		/// <summary>
		/// accid3 : 
		/// </summary>
		public System.String Accid3 = null;
		
		/// <summary>
		/// pcommand : 
		/// </summary>
		public System.String Pcommand = null;
		
		/// <summary>
		/// form : 
		/// </summary>
		public System.String Form = null;
		
		/// <summary>
		/// voucher : 
		/// </summary>
		public System.String Voucher = null;
		
		/// <summary>
		/// fvoucher : 
		/// </summary>
		public System.String Fvoucher = null;
		
		/// <summary>
		/// nov : 
		/// </summary>
		public System.Decimal? Nov = 0m;
		
		/// <summary>
		/// tr_type : 
		/// </summary>
		public System.String TrType = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AtrCodeEntityData _tmp = new AtrCodeEntityData();
						
			_tmp.TransCode = this.TransCode;
			_tmp.OriginalTransCode = this.OriginalTransCode;
			
			_tmp.TransName = this.TransName;
			_tmp.Status = this.Status;
			_tmp.DbAccid = this.DbAccid;
			_tmp.CrAccid = this.CrAccid;
			_tmp.Accid1 = this.Accid1;
			_tmp.Accid2 = this.Accid2;
			_tmp.Accid3 = this.Accid3;
			_tmp.Pcommand = this.Pcommand;
			_tmp.Form = this.Form;
			_tmp.Voucher = this.Voucher;
			_tmp.Fvoucher = this.Fvoucher;
			_tmp.Nov = this.Nov;
			_tmp.TrType = this.TrType;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AtrCodeEntityData _tmp = new AtrCodeEntityData();
						
			_tmp.TransCode = this.TransCode;
			_tmp.OriginalTransCode = this.OriginalTransCode;
			
			_tmp.TransName = this.TransName;
			_tmp.Status = this.Status;
			_tmp.DbAccid = this.DbAccid;
			_tmp.CrAccid = this.CrAccid;
			_tmp.Accid1 = this.Accid1;
			_tmp.Accid2 = this.Accid2;
			_tmp.Accid3 = this.Accid3;
			_tmp.Pcommand = this.Pcommand;
			_tmp.Form = this.Form;
			_tmp.Voucher = this.Voucher;
			_tmp.Fvoucher = this.Fvoucher;
			_tmp.Nov = this.Nov;
			_tmp.TrType = this.TrType;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AtrCodeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AtrCodeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AtrCodeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AtrCodeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AtrCodeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AtrCodeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				AtrCodeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AtrCodeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AtrCodeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AtrCodeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AtrCodeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AtrCodeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AtrCodeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AtrCode"/> object.
	/// </remarks>
	public class AtrCodeEventArgs : System.EventArgs
	{
		private AtrCodeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AtrCodeEventArgs class.
		///</summary>
		public AtrCodeEventArgs(AtrCodeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AtrCodeEventArgs class.
		///</summary>
		public AtrCodeEventArgs(AtrCodeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AtrCodeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AtrCodeColumn" />
		public AtrCodeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AtrCode related events.
	///</summary>
	public delegate void AtrCodeEventHandler(object sender, AtrCodeEventArgs e);
	
	#region AtrCodeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AtrCodeComparer : System.Collections.Generic.IComparer<AtrCode>
	{
		AtrCodeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AtrCodeComparer"/> class.
        /// </summary>
		public AtrCodeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AtrCodeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AtrCodeComparer(AtrCodeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="AtrCode"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="AtrCode"/> to compare.</param>
        /// <param name="b">The second <c>AtrCode</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AtrCode a, AtrCode b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AtrCode entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AtrCode a, AtrCode b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AtrCodeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AtrCodeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AtrCode"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AtrCodeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AtrCodeKey class.
		/// </summary>
		public AtrCodeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AtrCodeKey class.
		/// </summary>
		public AtrCodeKey(AtrCodeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.TransCode = entity.TransCode;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AtrCodeKey class.
		/// </summary>
		public AtrCodeKey(System.String _transCode)
		{
			#region Init Properties

			this.TransCode = _transCode;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AtrCodeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AtrCodeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the TransCode property
		private System.String _transCode;
		
		/// <summary>
		/// Gets or sets the TransCode property.
		/// </summary>
		public System.String TransCode
		{
			get { return _transCode; }
			set
			{
				if ( this.Entity != null )
					this.Entity.TransCode = value;
				
				_transCode = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				TransCode = ( values["TransCode"] != null ) ? (System.String) EntityUtil.ChangeType(values["TransCode"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("TransCode", TransCode);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("TransCode: {0}{1}",
								TransCode,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AtrCodeColumn Enum
	
	/// <summary>
	/// Enumerate the AtrCode columns.
	/// </summary>
	[Serializable]
	public enum AtrCodeColumn : int
	{
		/// <summary>
		/// TransCode : 
		/// </summary>
		[EnumTextValue("Trans Code")]
		[ColumnEnum("trans_code", typeof(System.String), System.Data.DbType.String, true, false, false, 2)]
		TransCode = 1,
		/// <summary>
		/// TransName : 
		/// </summary>
		[EnumTextValue("Trans Name")]
		[ColumnEnum("trans_name", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		TransName = 2,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("status", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Status = 3,
		/// <summary>
		/// DbAccid : 
		/// </summary>
		[EnumTextValue("Db Accid")]
		[ColumnEnum("db_accid", typeof(System.String), System.Data.DbType.String, false, false, true, 9)]
		DbAccid = 4,
		/// <summary>
		/// CrAccid : 
		/// </summary>
		[EnumTextValue("Cr Accid")]
		[ColumnEnum("cr_accid", typeof(System.String), System.Data.DbType.String, false, false, true, 9)]
		CrAccid = 5,
		/// <summary>
		/// Accid1 : 
		/// </summary>
		[EnumTextValue("Accid1")]
		[ColumnEnum("accid1", typeof(System.String), System.Data.DbType.String, false, false, true, 9)]
		Accid1 = 6,
		/// <summary>
		/// Accid2 : 
		/// </summary>
		[EnumTextValue("Accid2")]
		[ColumnEnum("accid2", typeof(System.String), System.Data.DbType.String, false, false, true, 9)]
		Accid2 = 7,
		/// <summary>
		/// Accid3 : 
		/// </summary>
		[EnumTextValue("Accid3")]
		[ColumnEnum("accid3", typeof(System.String), System.Data.DbType.String, false, false, true, 9)]
		Accid3 = 8,
		/// <summary>
		/// Pcommand : 
		/// </summary>
		[EnumTextValue("Pcommand")]
		[ColumnEnum("pcommand", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Pcommand = 9,
		/// <summary>
		/// Form : 
		/// </summary>
		[EnumTextValue("Form")]
		[ColumnEnum("form", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Form = 10,
		/// <summary>
		/// Voucher : 
		/// </summary>
		[EnumTextValue("Voucher")]
		[ColumnEnum("voucher", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Voucher = 11,
		/// <summary>
		/// Fvoucher : 
		/// </summary>
		[EnumTextValue("Fvoucher")]
		[ColumnEnum("fvoucher", typeof(System.String), System.Data.DbType.String, false, false, true, 20)]
		Fvoucher = 12,
		/// <summary>
		/// Nov : 
		/// </summary>
		[EnumTextValue("Nov")]
		[ColumnEnum("nov", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Nov = 13,
		/// <summary>
		/// TrType : 
		/// </summary>
		[EnumTextValue("Tr Type")]
		[ColumnEnum("tr_type", typeof(System.String), System.Data.DbType.String, false, false, true, 2)]
		TrType = 14
	}//End enum

	#endregion AtrCodeColumn Enum

} // end namespace
