
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file MofSys.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblMof_sys' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MofSysBase : EntityBase, IMofSys, IEntityId<MofSysKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MofSysEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MofSysEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MofSysEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MofSys> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MofSysEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MofSysEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MofSysBase"/> instance.
		///</summary>
		public MofSysBase()
		{
			this.entityData = new MofSysEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MofSysBase"/> instance.
		///</summary>
		///<param name="_mofGl"></param>
		///<param name="_mofName"></param>
		///<param name="_mofNameb"></param>
		///<param name="_acType"></param>
		///<param name="_negative"></param>
		///<param name="_master"></param>
		///<param name="_glevel"></param>
		///<param name="_lastLevel"></param>
		///<param name="_otherEqui"></param>
		public MofSysBase(System.String _mofGl, System.String _mofName, System.String _mofNameb, 
			System.String _acType, System.String _negative, System.Boolean? _master, System.Int32? _glevel, 
			System.Boolean _lastLevel, System.String _otherEqui)
		{
			this.entityData = new MofSysEntityData();
			this.backupData = null;

			this.MofGl = _mofGl;
			this.MofName = _mofName;
			this.MofNameb = _mofNameb;
			this.AcType = _acType;
			this.Negative = _negative;
			this.Master = _master;
			this.Glevel = _glevel;
			this.LastLevel = _lastLevel;
			this.OtherEqui = _otherEqui;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MofSys"/> instance.
		///</summary>
		///<param name="_mofGl"></param>
		///<param name="_mofName"></param>
		///<param name="_mofNameb"></param>
		///<param name="_acType"></param>
		///<param name="_negative"></param>
		///<param name="_master"></param>
		///<param name="_glevel"></param>
		///<param name="_lastLevel"></param>
		///<param name="_otherEqui"></param>
		public static MofSys CreateMofSys(System.String _mofGl, System.String _mofName, System.String _mofNameb, 
			System.String _acType, System.String _negative, System.Boolean? _master, System.Int32? _glevel, 
			System.Boolean _lastLevel, System.String _otherEqui)
		{
			MofSys newMofSys = new MofSys();
			newMofSys.MofGl = _mofGl;
			newMofSys.MofName = _mofName;
			newMofSys.MofNameb = _mofNameb;
			newMofSys.AcType = _acType;
			newMofSys.Negative = _negative;
			newMofSys.Master = _master;
			newMofSys.Glevel = _glevel;
			newMofSys.LastLevel = _lastLevel;
			newMofSys.OtherEqui = _otherEqui;
			return newMofSys;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Decimal Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(MofSysColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MofGl property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 4)]
		public virtual System.String MofGl
		{
			get
			{
				return this.entityData.MofGl; 
			}
			
			set
			{
				if (this.entityData.MofGl == value)
					return;
				
                OnPropertyChanging("MofGl");                    
				OnColumnChanging(MofSysColumn.MofGl, this.entityData.MofGl);
				this.entityData.MofGl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.MofGl, this.entityData.MofGl);
				OnPropertyChanged("MofGl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MofName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String MofName
		{
			get
			{
				return this.entityData.MofName; 
			}
			
			set
			{
				if (this.entityData.MofName == value)
					return;
				
                OnPropertyChanging("MofName");                    
				OnColumnChanging(MofSysColumn.MofName, this.entityData.MofName);
				this.entityData.MofName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.MofName, this.entityData.MofName);
				OnPropertyChanged("MofName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MofNameb property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String MofNameb
		{
			get
			{
				return this.entityData.MofNameb; 
			}
			
			set
			{
				if (this.entityData.MofNameb == value)
					return;
				
                OnPropertyChanging("MofNameb");                    
				OnColumnChanging(MofSysColumn.MofNameb, this.entityData.MofNameb);
				this.entityData.MofNameb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.MofNameb, this.entityData.MofNameb);
				OnPropertyChanged("MofNameb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AcType property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String AcType
		{
			get
			{
				return this.entityData.AcType; 
			}
			
			set
			{
				if (this.entityData.AcType == value)
					return;
				
                OnPropertyChanging("AcType");                    
				OnColumnChanging(MofSysColumn.AcType, this.entityData.AcType);
				this.entityData.AcType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.AcType, this.entityData.AcType);
				OnPropertyChanged("AcType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Negative property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Negative
		{
			get
			{
				return this.entityData.Negative; 
			}
			
			set
			{
				if (this.entityData.Negative == value)
					return;
				
                OnPropertyChanging("Negative");                    
				OnColumnChanging(MofSysColumn.Negative, this.entityData.Negative);
				this.entityData.Negative = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.Negative, this.entityData.Negative);
				OnPropertyChanged("Negative");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Master property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Master
		{
			get
			{
				return this.entityData.Master; 
			}
			
			set
			{
				if (this.entityData.Master == value)
					return;
				
                OnPropertyChanging("Master");                    
				OnColumnChanging(MofSysColumn.Master, this.entityData.Master);
				this.entityData.Master = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.Master, this.entityData.Master);
				OnPropertyChanged("Master");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Glevel property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Glevel
		{
			get
			{
				return this.entityData.Glevel; 
			}
			
			set
			{
				if (this.entityData.Glevel == value)
					return;
				
                OnPropertyChanging("Glevel");                    
				OnColumnChanging(MofSysColumn.Glevel, this.entityData.Glevel);
				this.entityData.Glevel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.Glevel, this.entityData.Glevel);
				OnPropertyChanged("Glevel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastLevel property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean LastLevel
		{
			get
			{
				return this.entityData.LastLevel; 
			}
			
			set
			{
				if (this.entityData.LastLevel == value)
					return;
				
                OnPropertyChanging("LastLevel");                    
				OnColumnChanging(MofSysColumn.LastLevel, this.entityData.LastLevel);
				this.entityData.LastLevel = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.LastLevel, this.entityData.LastLevel);
				OnPropertyChanged("LastLevel");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OtherEqui property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String OtherEqui
		{
			get
			{
				return this.entityData.OtherEqui; 
			}
			
			set
			{
				if (this.entityData.OtherEqui == value)
					return;
				
                OnPropertyChanging("OtherEqui");                    
				OnColumnChanging(MofSysColumn.OtherEqui, this.entityData.OtherEqui);
				this.entityData.OtherEqui = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MofSysColumn.OtherEqui, this.entityData.OtherEqui);
				OnPropertyChanged("OtherEqui");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MofGl", "Mof Gl"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MofGl", "Mof Gl", 4));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MofName", "Mof Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MofNameb", "Mof Nameb", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AcType", "Ac Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Negative", "Negative", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OtherEqui", "Other Equi", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblMof_sys"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "mof_gl", "mof_name", "mof_nameb", "ac_type", "negative", "master", "glevel", "last_level", "other_equi"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MofSysEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MofSys) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MofSys>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MofSys);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MofSys Entity 
		///</summary>
		protected virtual MofSys Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MofSys copy = new MofSys();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.MofGl = this.MofGl;
				copy.MofName = this.MofName;
				copy.MofNameb = this.MofNameb;
				copy.AcType = this.AcType;
				copy.Negative = this.Negative;
				copy.Master = this.Master;
				copy.Glevel = this.Glevel;
				copy.LastLevel = this.LastLevel;
				copy.OtherEqui = this.OtherEqui;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MofSys Entity 
		///</summary>
		public virtual MofSys Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MofSys Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MofSys DeepCopy()
		{
			return EntityHelper.Clone<MofSys>(this as MofSys);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MofSysEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MofSysEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MofSysEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MofSysColumn column)
		{
			switch(column)
			{
					case MofSysColumn.Id:
					return entityData.Id != _originalData.Id;
					case MofSysColumn.MofGl:
					return entityData.MofGl != _originalData.MofGl;
					case MofSysColumn.MofName:
					return entityData.MofName != _originalData.MofName;
					case MofSysColumn.MofNameb:
					return entityData.MofNameb != _originalData.MofNameb;
					case MofSysColumn.AcType:
					return entityData.AcType != _originalData.AcType;
					case MofSysColumn.Negative:
					return entityData.Negative != _originalData.Negative;
					case MofSysColumn.Master:
					return entityData.Master != _originalData.Master;
					case MofSysColumn.Glevel:
					return entityData.Glevel != _originalData.Glevel;
					case MofSysColumn.LastLevel:
					return entityData.LastLevel != _originalData.LastLevel;
					case MofSysColumn.OtherEqui:
					return entityData.OtherEqui != _originalData.OtherEqui;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MofSysColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.MofGl != _originalData.MofGl;
			result = result || entityData.MofName != _originalData.MofName;
			result = result || entityData.MofNameb != _originalData.MofNameb;
			result = result || entityData.AcType != _originalData.AcType;
			result = result || entityData.Negative != _originalData.Negative;
			result = result || entityData.Master != _originalData.Master;
			result = result || entityData.Glevel != _originalData.Glevel;
			result = result || entityData.LastLevel != _originalData.LastLevel;
			result = result || entityData.OtherEqui != _originalData.OtherEqui;
			return result;
		}	
		
		///<summary>
		///  Returns a MofSys Entity with the original data.
		///</summary>
		public MofSys GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMofSys(
				_originalData.MofGl,
				_originalData.MofName,
				_originalData.MofNameb,
				_originalData.AcType,
				_originalData.Negative,
				_originalData.Master,
				_originalData.Glevel,
				_originalData.LastLevel,
				_originalData.OtherEqui
				);
				
			return (MofSys)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MofSysBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MofSysBase)
				return ValueEquals(this, (MofSysBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MofSysBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.MofGl.GetHashCode() ^ 
					((this.MofName == null) ? string.Empty : this.MofName.ToString()).GetHashCode() ^ 
					((this.MofNameb == null) ? string.Empty : this.MofNameb.ToString()).GetHashCode() ^ 
					((this.AcType == null) ? string.Empty : this.AcType.ToString()).GetHashCode() ^ 
					((this.Negative == null) ? string.Empty : this.Negative.ToString()).GetHashCode() ^ 
					((this.Master == null) ? string.Empty : this.Master.ToString()).GetHashCode() ^ 
					((this.Glevel == null) ? string.Empty : this.Glevel.ToString()).GetHashCode() ^ 
					this.LastLevel.GetHashCode() ^ 
					((this.OtherEqui == null) ? string.Empty : this.OtherEqui.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MofSysBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MofSysBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MofSysBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MofSysBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MofSysBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MofSysBase Object1, MofSysBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.MofGl != Object2.MofGl)
				equal = false;
			if ( Object1.MofName != null && Object2.MofName != null )
			{
				if (Object1.MofName != Object2.MofName)
					equal = false;
			}
			else if (Object1.MofName == null ^ Object2.MofName == null )
			{
				equal = false;
			}
			if ( Object1.MofNameb != null && Object2.MofNameb != null )
			{
				if (Object1.MofNameb != Object2.MofNameb)
					equal = false;
			}
			else if (Object1.MofNameb == null ^ Object2.MofNameb == null )
			{
				equal = false;
			}
			if ( Object1.AcType != null && Object2.AcType != null )
			{
				if (Object1.AcType != Object2.AcType)
					equal = false;
			}
			else if (Object1.AcType == null ^ Object2.AcType == null )
			{
				equal = false;
			}
			if ( Object1.Negative != null && Object2.Negative != null )
			{
				if (Object1.Negative != Object2.Negative)
					equal = false;
			}
			else if (Object1.Negative == null ^ Object2.Negative == null )
			{
				equal = false;
			}
			if ( Object1.Master != null && Object2.Master != null )
			{
				if (Object1.Master != Object2.Master)
					equal = false;
			}
			else if (Object1.Master == null ^ Object2.Master == null )
			{
				equal = false;
			}
			if ( Object1.Glevel != null && Object2.Glevel != null )
			{
				if (Object1.Glevel != Object2.Glevel)
					equal = false;
			}
			else if (Object1.Glevel == null ^ Object2.Glevel == null )
			{
				equal = false;
			}
			if (Object1.LastLevel != Object2.LastLevel)
				equal = false;
			if ( Object1.OtherEqui != null && Object2.OtherEqui != null )
			{
				if (Object1.OtherEqui != Object2.OtherEqui)
					equal = false;
			}
			else if (Object1.OtherEqui == null ^ Object2.OtherEqui == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MofSysBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MofSysComparer GetComparer()
        {
            return new MofSysComparer();
        }
        */

        // Comparer delegates back to MofSys
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MofSys rhs, MofSysColumn which)
        {
            switch (which)
            {
            	
            	
            	case MofSysColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case MofSysColumn.MofGl:
            		return this.MofGl.CompareTo(rhs.MofGl);
            		
            		                 
            	
            	
            	case MofSysColumn.MofName:
            		return this.MofName.CompareTo(rhs.MofName);
            		
            		                 
            	
            	
            	case MofSysColumn.MofNameb:
            		return this.MofNameb.CompareTo(rhs.MofNameb);
            		
            		                 
            	
            	
            	case MofSysColumn.AcType:
            		return this.AcType.CompareTo(rhs.AcType);
            		
            		                 
            	
            	
            	case MofSysColumn.Negative:
            		return this.Negative.CompareTo(rhs.Negative);
            		
            		                 
            	
            	
            	case MofSysColumn.Master:
            		return this.Master.Value.CompareTo(rhs.Master.Value);
            		
            		                 
            	
            	
            	case MofSysColumn.Glevel:
            		return this.Glevel.Value.CompareTo(rhs.Glevel.Value);
            		
            		                 
            	
            	
            	case MofSysColumn.LastLevel:
            		return this.LastLevel.CompareTo(rhs.LastLevel);
            		
            		                 
            	
            	
            	case MofSysColumn.OtherEqui:
            		return this.OtherEqui.CompareTo(rhs.OtherEqui);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MofSysKey> Members
		
		// member variable for the EntityId property
		private MofSysKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MofSysKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MofSysKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MofSys")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- Id: {0}{10}- MofGl: {1}{10}- MofName: {2}{10}- MofNameb: {3}{10}- AcType: {4}{10}- Negative: {5}{10}- Master: {6}{10}- Glevel: {7}{10}- LastLevel: {8}{10}- OtherEqui: {9}{10}{12}", 
				this.Id,
				this.MofGl,
				(this.MofName == null) ? string.Empty : this.MofName.ToString(),
				(this.MofNameb == null) ? string.Empty : this.MofNameb.ToString(),
				(this.AcType == null) ? string.Empty : this.AcType.ToString(),
				(this.Negative == null) ? string.Empty : this.Negative.ToString(),
				(this.Master == null) ? string.Empty : this.Master.ToString(),
				(this.Glevel == null) ? string.Empty : this.Glevel.ToString(),
				this.LastLevel,
				(this.OtherEqui == null) ? string.Empty : this.OtherEqui.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblMof_sys' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MofSysEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblMof_sys"</remarks>
		public System.Decimal Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// mof_gl : 
		/// </summary>
		public System.String MofGl = string.Empty;
		
		/// <summary>
		/// mof_name : 
		/// </summary>
		public System.String MofName = null;
		
		/// <summary>
		/// mof_nameb : 
		/// </summary>
		public System.String MofNameb = null;
		
		/// <summary>
		/// ac_type : 
		/// </summary>
		public System.String AcType = null;
		
		/// <summary>
		/// negative : 
		/// </summary>
		public System.String Negative = null;
		
		/// <summary>
		/// master : 
		/// </summary>
		public System.Boolean? Master = null;
		
		/// <summary>
		/// glevel : 
		/// </summary>
		public System.Int32? Glevel = null;
		
		/// <summary>
		/// last_level : 
		/// </summary>
		public System.Boolean LastLevel = false;
		
		/// <summary>
		/// other_equi : 
		/// </summary>
		public System.String OtherEqui = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MofSysEntityData _tmp = new MofSysEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MofGl = this.MofGl;
			_tmp.MofName = this.MofName;
			_tmp.MofNameb = this.MofNameb;
			_tmp.AcType = this.AcType;
			_tmp.Negative = this.Negative;
			_tmp.Master = this.Master;
			_tmp.Glevel = this.Glevel;
			_tmp.LastLevel = this.LastLevel;
			_tmp.OtherEqui = this.OtherEqui;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MofSysEntityData _tmp = new MofSysEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.MofGl = this.MofGl;
			_tmp.MofName = this.MofName;
			_tmp.MofNameb = this.MofNameb;
			_tmp.AcType = this.AcType;
			_tmp.Negative = this.Negative;
			_tmp.Master = this.Master;
			_tmp.Glevel = this.Glevel;
			_tmp.LastLevel = this.LastLevel;
			_tmp.OtherEqui = this.OtherEqui;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MofSysColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MofSysColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MofSysColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MofSysColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MofSysColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MofSysColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				MofSysEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MofSysEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MofSysColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MofSysColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MofSysEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MofSysEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MofSysEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MofSys"/> object.
	/// </remarks>
	public class MofSysEventArgs : System.EventArgs
	{
		private MofSysColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MofSysEventArgs class.
		///</summary>
		public MofSysEventArgs(MofSysColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MofSysEventArgs class.
		///</summary>
		public MofSysEventArgs(MofSysColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MofSysColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MofSysColumn" />
		public MofSysColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MofSys related events.
	///</summary>
	public delegate void MofSysEventHandler(object sender, MofSysEventArgs e);
	
	#region MofSysComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MofSysComparer : System.Collections.Generic.IComparer<MofSys>
	{
		MofSysColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MofSysComparer"/> class.
        /// </summary>
		public MofSysComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MofSysComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MofSysComparer(MofSysColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="MofSys"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="MofSys"/> to compare.</param>
        /// <param name="b">The second <c>MofSys</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MofSys a, MofSys b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MofSys entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MofSys a, MofSys b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MofSysColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MofSysKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MofSys"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MofSysKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MofSysKey class.
		/// </summary>
		public MofSysKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MofSysKey class.
		/// </summary>
		public MofSysKey(MofSysBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MofSysKey class.
		/// </summary>
		public MofSysKey(System.Decimal _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MofSysBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MofSysBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Decimal _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Decimal Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["Id"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MofSysColumn Enum
	
	/// <summary>
	/// Enumerate the MofSys columns.
	/// </summary>
	[Serializable]
	public enum MofSysColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("id", typeof(System.Decimal), System.Data.DbType.Decimal, true, true, false)]
		Id = 1,
		/// <summary>
		/// MofGl : 
		/// </summary>
		[EnumTextValue("Mof Gl")]
		[ColumnEnum("mof_gl", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 4)]
		MofGl = 2,
		/// <summary>
		/// MofName : 
		/// </summary>
		[EnumTextValue("Mof Name")]
		[ColumnEnum("mof_name", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		MofName = 3,
		/// <summary>
		/// MofNameb : 
		/// </summary>
		[EnumTextValue("Mof Nameb")]
		[ColumnEnum("mof_nameb", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		MofNameb = 4,
		/// <summary>
		/// AcType : 
		/// </summary>
		[EnumTextValue("Ac Type")]
		[ColumnEnum("ac_type", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		AcType = 5,
		/// <summary>
		/// Negative : 
		/// </summary>
		[EnumTextValue("Negative")]
		[ColumnEnum("negative", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		Negative = 6,
		/// <summary>
		/// Master : 
		/// </summary>
		[EnumTextValue("Master")]
		[ColumnEnum("master", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Master = 7,
		/// <summary>
		/// Glevel : 
		/// </summary>
		[EnumTextValue("Glevel")]
		[ColumnEnum("glevel", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Glevel = 8,
		/// <summary>
		/// LastLevel : 
		/// </summary>
		[EnumTextValue("Last Level")]
		[ColumnEnum("last_level", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		LastLevel = 9,
		/// <summary>
		/// OtherEqui : 
		/// </summary>
		[EnumTextValue("Other Equi")]
		[ColumnEnum("other_equi", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		OtherEqui = 10
	}//End enum

	#endregion MofSysColumn Enum

} // end namespace
