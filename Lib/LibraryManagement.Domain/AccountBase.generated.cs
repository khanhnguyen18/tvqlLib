
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Account.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblAccount' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AccountBase : EntityBase, IAccount, IEntityId<AccountKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AccountEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AccountEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AccountEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Account> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccountEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccountEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccountBase"/> instance.
		///</summary>
		public AccountBase()
		{
			this.entityData = new AccountEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccountBase"/> instance.
		///</summary>
		///<param name="_branch"></param>
		///<param name="_accountId"></param>
		///<param name="_abbreviat"></param>
		///<param name="_mofGl"></param>
		///<param name="_custId"></param>
		///<param name="_name"></param>
		///<param name="_openDate"></param>
		///<param name="_prevDate"></param>
		///<param name="_lastDate"></param>
		///<param name="_creamt"></param>
		///<param name="_debamt"></param>
		///<param name="_status"></param>
		public AccountBase(System.Decimal _branch, System.String _accountId, System.String _abbreviat, 
			System.String _mofGl, System.String _custId, System.String _name, System.DateTime _openDate, 
			System.DateTime _prevDate, System.DateTime _lastDate, System.Decimal _creamt, System.Decimal _debamt, 
			System.Boolean _status)
		{
			this.entityData = new AccountEntityData();
			this.backupData = null;

			this.Branch = _branch;
			this.AccountId = _accountId;
			this.Abbreviat = _abbreviat;
			this.MofGl = _mofGl;
			this.CustId = _custId;
			this.Name = _name;
			this.OpenDate = _openDate;
			this.PrevDate = _prevDate;
			this.LastDate = _lastDate;
			this.Creamt = _creamt;
			this.Debamt = _debamt;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Account"/> instance.
		///</summary>
		///<param name="_branch"></param>
		///<param name="_accountId"></param>
		///<param name="_abbreviat"></param>
		///<param name="_mofGl"></param>
		///<param name="_custId"></param>
		///<param name="_name"></param>
		///<param name="_openDate"></param>
		///<param name="_prevDate"></param>
		///<param name="_lastDate"></param>
		///<param name="_creamt"></param>
		///<param name="_debamt"></param>
		///<param name="_status"></param>
		public static Account CreateAccount(System.Decimal _branch, System.String _accountId, System.String _abbreviat, 
			System.String _mofGl, System.String _custId, System.String _name, System.DateTime _openDate, 
			System.DateTime _prevDate, System.DateTime _lastDate, System.Decimal _creamt, System.Decimal _debamt, 
			System.Boolean _status)
		{
			Account newAccount = new Account();
			newAccount.Branch = _branch;
			newAccount.AccountId = _accountId;
			newAccount.Abbreviat = _abbreviat;
			newAccount.MofGl = _mofGl;
			newAccount.CustId = _custId;
			newAccount.Name = _name;
			newAccount.OpenDate = _openDate;
			newAccount.PrevDate = _prevDate;
			newAccount.LastDate = _lastDate;
			newAccount.Creamt = _creamt;
			newAccount.Debamt = _debamt;
			newAccount.Status = _status;
			return newAccount;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Branch property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Decimal Branch
		{
			get
			{
				return this.entityData.Branch; 
			}
			
			set
			{
				if (this.entityData.Branch == value)
					return;
				
                OnPropertyChanging("Branch");                    
				OnColumnChanging(AccountColumn.Branch, this.entityData.Branch);
				this.entityData.Branch = value;
				this.EntityId.Branch = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Branch, this.entityData.Branch);
				OnPropertyChanged("Branch");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the branch property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the branch property.</remarks>
		/// <value>This type is numeric</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Decimal OriginalBranch
		{
			get { return this.entityData.OriginalBranch; }
			set { this.entityData.OriginalBranch = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the AccountId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 9)]
		public virtual System.String AccountId
		{
			get
			{
				return this.entityData.AccountId; 
			}
			
			set
			{
				if (this.entityData.AccountId == value)
					return;
				
                OnPropertyChanging("AccountId");                    
				OnColumnChanging(AccountColumn.AccountId, this.entityData.AccountId);
				this.entityData.AccountId = value;
				this.EntityId.AccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.AccountId, this.entityData.AccountId);
				OnPropertyChanged("AccountId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the account_id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the account_id property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalAccountId
		{
			get { return this.entityData.OriginalAccountId; }
			set { this.entityData.OriginalAccountId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Abbreviat property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String Abbreviat
		{
			get
			{
				return this.entityData.Abbreviat; 
			}
			
			set
			{
				if (this.entityData.Abbreviat == value)
					return;
				
                OnPropertyChanging("Abbreviat");                    
				OnColumnChanging(AccountColumn.Abbreviat, this.entityData.Abbreviat);
				this.entityData.Abbreviat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Abbreviat, this.entityData.Abbreviat);
				OnPropertyChanged("Abbreviat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MofGl property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 4)]
		public virtual System.String MofGl
		{
			get
			{
				return this.entityData.MofGl; 
			}
			
			set
			{
				if (this.entityData.MofGl == value)
					return;
				
                OnPropertyChanging("MofGl");                    
				OnColumnChanging(AccountColumn.MofGl, this.entityData.MofGl);
				this.entityData.MofGl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.MofGl, this.entityData.MofGl);
				OnPropertyChanged("MofGl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 5)]
		public virtual System.String CustId
		{
			get
			{
				return this.entityData.CustId; 
			}
			
			set
			{
				if (this.entityData.CustId == value)
					return;
				
                OnPropertyChanging("CustId");                    
				OnColumnChanging(AccountColumn.CustId, this.entityData.CustId);
				this.entityData.CustId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.CustId, this.entityData.CustId);
				OnPropertyChanged("CustId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(AccountColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OpenDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime OpenDate
		{
			get
			{
				return this.entityData.OpenDate; 
			}
			
			set
			{
				if (this.entityData.OpenDate == value)
					return;
				
                OnPropertyChanging("OpenDate");                    
				OnColumnChanging(AccountColumn.OpenDate, this.entityData.OpenDate);
				this.entityData.OpenDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.OpenDate, this.entityData.OpenDate);
				OnPropertyChanged("OpenDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrevDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime PrevDate
		{
			get
			{
				return this.entityData.PrevDate; 
			}
			
			set
			{
				if (this.entityData.PrevDate == value)
					return;
				
                OnPropertyChanging("PrevDate");                    
				OnColumnChanging(AccountColumn.PrevDate, this.entityData.PrevDate);
				this.entityData.PrevDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.PrevDate, this.entityData.PrevDate);
				OnPropertyChanged("PrevDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
				
                OnPropertyChanging("LastDate");                    
				OnColumnChanging(AccountColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Creamt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Creamt
		{
			get
			{
				return this.entityData.Creamt; 
			}
			
			set
			{
				if (this.entityData.Creamt == value)
					return;
				
                OnPropertyChanging("Creamt");                    
				OnColumnChanging(AccountColumn.Creamt, this.entityData.Creamt);
				this.entityData.Creamt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Creamt, this.entityData.Creamt);
				OnPropertyChanged("Creamt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Debamt property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Debamt
		{
			get
			{
				return this.entityData.Debamt; 
			}
			
			set
			{
				if (this.entityData.Debamt == value)
					return;
				
                OnPropertyChanging("Debamt");                    
				OnColumnChanging(AccountColumn.Debamt, this.entityData.Debamt);
				this.entityData.Debamt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Debamt, this.entityData.Debamt);
				OnPropertyChanged("Debamt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(AccountColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccountColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AccountId", "Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AccountId", "Account Id", 9));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Abbreviat", "Abbreviat"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Abbreviat", "Abbreviat", 30));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MofGl", "Mof Gl"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MofGl", "Mof Gl", 4));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CustId", "Cust Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustId", "Cust Id", 5));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblAccount"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"branch", "account_id", "abbreviat", "mof_gl", "cust_id", "name", "open_date", "prev_date", "last_date", "creamt", "debamt", "status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccountEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Account) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Account>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Account);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Account Entity 
		///</summary>
		protected virtual Account Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Account copy = new Account();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Branch = this.Branch;
					copy.OriginalBranch = this.OriginalBranch;
				copy.AccountId = this.AccountId;
					copy.OriginalAccountId = this.OriginalAccountId;
				copy.Abbreviat = this.Abbreviat;
				copy.MofGl = this.MofGl;
				copy.CustId = this.CustId;
				copy.Name = this.Name;
				copy.OpenDate = this.OpenDate;
				copy.PrevDate = this.PrevDate;
				copy.LastDate = this.LastDate;
				copy.Creamt = this.Creamt;
				copy.Debamt = this.Debamt;
				copy.Status = this.Status;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Account Entity 
		///</summary>
		public virtual Account Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Account Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Account DeepCopy()
		{
			return EntityHelper.Clone<Account>(this as Account);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AccountEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AccountEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AccountEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AccountColumn column)
		{
			switch(column)
			{
					case AccountColumn.Branch:
					return entityData.Branch != _originalData.Branch;
					case AccountColumn.AccountId:
					return entityData.AccountId != _originalData.AccountId;
					case AccountColumn.Abbreviat:
					return entityData.Abbreviat != _originalData.Abbreviat;
					case AccountColumn.MofGl:
					return entityData.MofGl != _originalData.MofGl;
					case AccountColumn.CustId:
					return entityData.CustId != _originalData.CustId;
					case AccountColumn.Name:
					return entityData.Name != _originalData.Name;
					case AccountColumn.OpenDate:
					return entityData.OpenDate != _originalData.OpenDate;
					case AccountColumn.PrevDate:
					return entityData.PrevDate != _originalData.PrevDate;
					case AccountColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case AccountColumn.Creamt:
					return entityData.Creamt != _originalData.Creamt;
					case AccountColumn.Debamt:
					return entityData.Debamt != _originalData.Debamt;
					case AccountColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AccountColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Branch != _originalData.Branch;
			result = result || entityData.AccountId != _originalData.AccountId;
			result = result || entityData.Abbreviat != _originalData.Abbreviat;
			result = result || entityData.MofGl != _originalData.MofGl;
			result = result || entityData.CustId != _originalData.CustId;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.OpenDate != _originalData.OpenDate;
			result = result || entityData.PrevDate != _originalData.PrevDate;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.Creamt != _originalData.Creamt;
			result = result || entityData.Debamt != _originalData.Debamt;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a Account Entity with the original data.
		///</summary>
		public Account GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAccount(
				_originalData.Branch,
				_originalData.AccountId,
				_originalData.Abbreviat,
				_originalData.MofGl,
				_originalData.CustId,
				_originalData.Name,
				_originalData.OpenDate,
				_originalData.PrevDate,
				_originalData.LastDate,
				_originalData.Creamt,
				_originalData.Debamt,
				_originalData.Status
				);
				
			return (Account)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AccountBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AccountBase)
				return ValueEquals(this, (AccountBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AccountBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Branch.GetHashCode() ^ 
					this.AccountId.GetHashCode() ^ 
					this.Abbreviat.GetHashCode() ^ 
					this.MofGl.GetHashCode() ^ 
					this.CustId.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					this.OpenDate.GetHashCode() ^ 
					this.PrevDate.GetHashCode() ^ 
					this.LastDate.GetHashCode() ^ 
					this.Creamt.GetHashCode() ^ 
					this.Debamt.GetHashCode() ^ 
					this.Status.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccountBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccountBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AccountBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AccountBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccountBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AccountBase Object1, AccountBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Branch != Object2.Branch)
				equal = false;
			if (Object1.AccountId != Object2.AccountId)
				equal = false;
			if (Object1.Abbreviat != Object2.Abbreviat)
				equal = false;
			if (Object1.MofGl != Object2.MofGl)
				equal = false;
			if (Object1.CustId != Object2.CustId)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.OpenDate != Object2.OpenDate)
				equal = false;
			if (Object1.PrevDate != Object2.PrevDate)
				equal = false;
			if (Object1.LastDate != Object2.LastDate)
				equal = false;
			if (Object1.Creamt != Object2.Creamt)
				equal = false;
			if (Object1.Debamt != Object2.Debamt)
				equal = false;
			if (Object1.Status != Object2.Status)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AccountBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AccountComparer GetComparer()
        {
            return new AccountComparer();
        }
        */

        // Comparer delegates back to Account
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Account rhs, AccountColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccountColumn.Branch:
            		return this.Branch.CompareTo(rhs.Branch);
            		
            		                 
            	
            	
            	case AccountColumn.AccountId:
            		return this.AccountId.CompareTo(rhs.AccountId);
            		
            		                 
            	
            	
            	case AccountColumn.Abbreviat:
            		return this.Abbreviat.CompareTo(rhs.Abbreviat);
            		
            		                 
            	
            	
            	case AccountColumn.MofGl:
            		return this.MofGl.CompareTo(rhs.MofGl);
            		
            		                 
            	
            	
            	case AccountColumn.CustId:
            		return this.CustId.CompareTo(rhs.CustId);
            		
            		                 
            	
            	
            	case AccountColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case AccountColumn.OpenDate:
            		return this.OpenDate.CompareTo(rhs.OpenDate);
            		
            		                 
            	
            	
            	case AccountColumn.PrevDate:
            		return this.PrevDate.CompareTo(rhs.PrevDate);
            		
            		                 
            	
            	
            	case AccountColumn.LastDate:
            		return this.LastDate.CompareTo(rhs.LastDate);
            		
            		                 
            	
            	
            	case AccountColumn.Creamt:
            		return this.Creamt.CompareTo(rhs.Creamt);
            		
            		                 
            	
            	
            	case AccountColumn.Debamt:
            		return this.Debamt.CompareTo(rhs.Debamt);
            		
            		                 
            	
            	
            	case AccountColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccountKey> Members
		
		// member variable for the EntityId property
		private AccountKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AccountKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccountKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Account")
					.Append("|").Append( this.Branch.ToString())
					.Append("|").Append( this.AccountId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- Branch: {0}{12}- AccountId: {1}{12}- Abbreviat: {2}{12}- MofGl: {3}{12}- CustId: {4}{12}- Name: {5}{12}- OpenDate: {6}{12}- PrevDate: {7}{12}- LastDate: {8}{12}- Creamt: {9}{12}- Debamt: {10}{12}- Status: {11}{12}{14}", 
				this.Branch,
				this.AccountId,
				this.Abbreviat,
				this.MofGl,
				this.CustId,
				this.Name,
				this.OpenDate,
				this.PrevDate,
				this.LastDate,
				this.Creamt,
				this.Debamt,
				this.Status,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblAccount' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AccountEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// branch : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblAccount"</remarks>
		public System.Decimal Branch;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Decimal OriginalBranch;
		
		/// <summary>			
		/// account_id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblAccount"</remarks>
		public System.String AccountId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalAccountId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// abbreviat : 
		/// </summary>
		public System.String Abbreviat = string.Empty;
		
		/// <summary>
		/// mof_gl : 
		/// </summary>
		public System.String MofGl = string.Empty;
		
		/// <summary>
		/// cust_id : 
		/// </summary>
		public System.String CustId = string.Empty;
		
		/// <summary>
		/// name : 
		/// </summary>
		public System.String Name = string.Empty;
		
		/// <summary>
		/// open_date : 
		/// </summary>
		public System.DateTime OpenDate = DateTime.Now;
		
		/// <summary>
		/// prev_date : 
		/// </summary>
		public System.DateTime PrevDate = DateTime.Now;
		
		/// <summary>
		/// last_date : 
		/// </summary>
		public System.DateTime LastDate = DateTime.Now;
		
		/// <summary>
		/// creamt : 
		/// </summary>
		public System.Decimal Creamt = 0m;
		
		/// <summary>
		/// debamt : 
		/// </summary>
		public System.Decimal Debamt = 0m;
		
		/// <summary>
		/// status : 
		/// </summary>
		public System.Boolean Status = true;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AccountEntityData _tmp = new AccountEntityData();
						
			_tmp.Branch = this.Branch;
			_tmp.OriginalBranch = this.OriginalBranch;
			_tmp.AccountId = this.AccountId;
			_tmp.OriginalAccountId = this.OriginalAccountId;
			
			_tmp.Abbreviat = this.Abbreviat;
			_tmp.MofGl = this.MofGl;
			_tmp.CustId = this.CustId;
			_tmp.Name = this.Name;
			_tmp.OpenDate = this.OpenDate;
			_tmp.PrevDate = this.PrevDate;
			_tmp.LastDate = this.LastDate;
			_tmp.Creamt = this.Creamt;
			_tmp.Debamt = this.Debamt;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AccountEntityData _tmp = new AccountEntityData();
						
			_tmp.Branch = this.Branch;
			_tmp.OriginalBranch = this.OriginalBranch;
			_tmp.AccountId = this.AccountId;
			_tmp.OriginalAccountId = this.OriginalAccountId;
			
			_tmp.Abbreviat = this.Abbreviat;
			_tmp.MofGl = this.MofGl;
			_tmp.CustId = this.CustId;
			_tmp.Name = this.Name;
			_tmp.OpenDate = this.OpenDate;
			_tmp.PrevDate = this.PrevDate;
			_tmp.LastDate = this.LastDate;
			_tmp.Creamt = this.Creamt;
			_tmp.Debamt = this.Debamt;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AccountColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AccountColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AccountColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				AccountEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccountEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AccountColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccountEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccountEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AccountEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Account"/> object.
	/// </remarks>
	public class AccountEventArgs : System.EventArgs
	{
		private AccountColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AccountEventArgs class.
		///</summary>
		public AccountEventArgs(AccountColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccountEventArgs class.
		///</summary>
		public AccountEventArgs(AccountColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AccountColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccountColumn" />
		public AccountColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Account related events.
	///</summary>
	public delegate void AccountEventHandler(object sender, AccountEventArgs e);
	
	#region AccountComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccountComparer : System.Collections.Generic.IComparer<Account>
	{
		AccountColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccountComparer"/> class.
        /// </summary>
		public AccountComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AccountComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccountComparer(AccountColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Account"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Account"/> to compare.</param>
        /// <param name="b">The second <c>Account</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Account a, Account b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Account entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Account a, Account b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccountColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccountKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Account"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccountKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey(AccountBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Branch = entity.Branch;
				this.AccountId = entity.AccountId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccountKey class.
		/// </summary>
		public AccountKey(System.Decimal _branch, System.String _accountId)
		{
			#region Init Properties

			this.Branch = _branch;
			this.AccountId = _accountId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccountBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccountBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Branch property
		private System.Decimal _branch;
		
		/// <summary>
		/// Gets or sets the Branch property.
		/// </summary>
		public System.Decimal Branch
		{
			get { return _branch; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Branch = value;
				
				_branch = value;
			}
		}
		
		// member variable for the AccountId property
		private System.String _accountId;
		
		/// <summary>
		/// Gets or sets the AccountId property.
		/// </summary>
		public System.String AccountId
		{
			get { return _accountId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.AccountId = value;
				
				_accountId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Branch = ( values["Branch"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["Branch"], typeof(System.Decimal)) : 0m;
				AccountId = ( values["AccountId"] != null ) ? (System.String) EntityUtil.ChangeType(values["AccountId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Branch", Branch);
			values.Add("AccountId", AccountId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Branch: {0}{2}AccountId: {1}{2}",
								Branch,
								AccountId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccountColumn Enum
	
	/// <summary>
	/// Enumerate the Account columns.
	/// </summary>
	[Serializable]
	public enum AccountColumn : int
	{
		/// <summary>
		/// Branch : 
		/// </summary>
		[EnumTextValue("Branch")]
		[ColumnEnum("branch", typeof(System.Decimal), System.Data.DbType.Decimal, true, false, false)]
		Branch = 1,
		/// <summary>
		/// AccountId : 
		/// </summary>
		[EnumTextValue("Account Id")]
		[ColumnEnum("account_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 9)]
		AccountId = 2,
		/// <summary>
		/// Abbreviat : 
		/// </summary>
		[EnumTextValue("Abbreviat")]
		[ColumnEnum("abbreviat", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 30)]
		Abbreviat = 3,
		/// <summary>
		/// MofGl : 
		/// </summary>
		[EnumTextValue("Mof Gl")]
		[ColumnEnum("mof_gl", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 4)]
		MofGl = 4,
		/// <summary>
		/// CustId : 
		/// </summary>
		[EnumTextValue("Cust Id")]
		[ColumnEnum("cust_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 5)]
		CustId = 5,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("name", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		Name = 6,
		/// <summary>
		/// OpenDate : 
		/// </summary>
		[EnumTextValue("Open Date")]
		[ColumnEnum("open_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		OpenDate = 7,
		/// <summary>
		/// PrevDate : 
		/// </summary>
		[EnumTextValue("Prev Date")]
		[ColumnEnum("prev_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		PrevDate = 8,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("Last Date")]
		[ColumnEnum("last_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastDate = 9,
		/// <summary>
		/// Creamt : 
		/// </summary>
		[EnumTextValue("Creamt")]
		[ColumnEnum("creamt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Creamt = 10,
		/// <summary>
		/// Debamt : 
		/// </summary>
		[EnumTextValue("Debamt")]
		[ColumnEnum("debamt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Debamt = 11,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("status", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Status = 12
	}//End enum

	#endregion AccountColumn Enum

} // end namespace
