
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Transaction.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblTransaction' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TransactionBase : EntityBase, ITransaction, IEntityId<TransactionKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TransactionEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TransactionEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TransactionEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Transaction> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TransactionEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TransactionEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TransactionBase"/> instance.
		///</summary>
		public TransactionBase()
		{
			this.entityData = new TransactionEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TransactionBase"/> instance.
		///</summary>
		///<param name="_tranDate"></param>
		///<param name="_tranTime"></param>
		///<param name="_transNum"></param>
		///<param name="_transCode"></param>
		///<param name="_voucher"></param>
		///<param name="_invoice"></param>
		///<param name="_post"></param>
		///<param name="_expId"></param>
		///<param name="_impId"></param>
		///<param name="_goodsId"></param>
		///<param name="_kitQty"></param>
		///<param name="_kitId"></param>
		///<param name="_qty"></param>
		///<param name="_unitSymb"></param>
		///<param name="_amount"></param>
		///<param name="_discount"></param>
		///<param name="_carddiscAmt"></param>
		///<param name="_vatAmt"></param>
		///<param name="_surplus"></param>
		///<param name="_commisAmt"></param>
		///<param name="_forexCys"></param>
		///<param name="_forexRate"></param>
		///<param name="_expiryDt"></param>
		///<param name="_userId"></param>
		///<param name="_station"></param>
		///<param name="_csId"></param>
		///<param name="_custaxId"></param>
		///<param name="_safeNameRef"></param>
		///<param name="_remark"></param>
		///<param name="_updated"></param>
		///<param name="_mercType"></param>
		///<param name="_taxCode"></param>
		///<param name="_vatIncl"></param>
		///<param name="_discpervat"></param>
		///<param name="_discIncl"></param>
		///<param name="_copies"></param>
		///<param name="_recnum"></param>
		///<param name="_cardId"></param>
		///<param name="_shift"></param>
		///<param name="_status"></param>
		public TransactionBase(System.DateTime? _tranDate, System.String _tranTime, System.String _transNum, 
			System.String _transCode, System.String _voucher, System.String _invoice, System.Boolean? _post, 
			System.String _expId, System.String _impId, System.String _goodsId, System.Decimal? _kitQty, 
			System.String _kitId, System.Decimal? _qty, System.String _unitSymb, System.Decimal _amount, 
			System.Decimal _discount, System.Decimal? _carddiscAmt, System.Decimal _vatAmt, 
			System.Decimal _surplus, System.Decimal? _commisAmt, System.String _forexCys, System.Decimal? _forexRate, 
			System.DateTime? _expiryDt, System.Decimal? _userId, System.Int32? _station, System.String _csId, 
			System.String _custaxId, System.String _safeNameRef, System.String _remark, System.Boolean? _updated, 
			System.String _mercType, System.String _taxCode, System.Boolean? _vatIncl, System.Boolean? _discpervat, 
			System.Boolean? _discIncl, System.Decimal? _copies, System.Decimal? _recnum, System.String _cardId, 
			System.Int32? _shift, System.Boolean? _status)
		{
			this.entityData = new TransactionEntityData();
			this.backupData = null;

			this.TranDate = _tranDate;
			this.TranTime = _tranTime;
			this.TransNum = _transNum;
			this.TransCode = _transCode;
			this.Voucher = _voucher;
			this.Invoice = _invoice;
			this.Post = _post;
			this.ExpId = _expId;
			this.ImpId = _impId;
			this.GoodsId = _goodsId;
			this.KitQty = _kitQty;
			this.KitId = _kitId;
			this.Qty = _qty;
			this.UnitSymb = _unitSymb;
			this.Amount = _amount;
			this.Discount = _discount;
			this.CarddiscAmt = _carddiscAmt;
			this.VatAmt = _vatAmt;
			this.Surplus = _surplus;
			this.CommisAmt = _commisAmt;
			this.ForexCys = _forexCys;
			this.ForexRate = _forexRate;
			this.ExpiryDt = _expiryDt;
			this.UserId = _userId;
			this.Station = _station;
			this.CsId = _csId;
			this.CustaxId = _custaxId;
			this.SafeNameRef = _safeNameRef;
			this.Remark = _remark;
			this.Updated = _updated;
			this.MercType = _mercType;
			this.TaxCode = _taxCode;
			this.VatIncl = _vatIncl;
			this.Discpervat = _discpervat;
			this.DiscIncl = _discIncl;
			this.Copies = _copies;
			this.Recnum = _recnum;
			this.CardId = _cardId;
			this.Shift = _shift;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Transaction"/> instance.
		///</summary>
		///<param name="_tranDate"></param>
		///<param name="_tranTime"></param>
		///<param name="_transNum"></param>
		///<param name="_transCode"></param>
		///<param name="_voucher"></param>
		///<param name="_invoice"></param>
		///<param name="_post"></param>
		///<param name="_expId"></param>
		///<param name="_impId"></param>
		///<param name="_goodsId"></param>
		///<param name="_kitQty"></param>
		///<param name="_kitId"></param>
		///<param name="_qty"></param>
		///<param name="_unitSymb"></param>
		///<param name="_amount"></param>
		///<param name="_discount"></param>
		///<param name="_carddiscAmt"></param>
		///<param name="_vatAmt"></param>
		///<param name="_surplus"></param>
		///<param name="_commisAmt"></param>
		///<param name="_forexCys"></param>
		///<param name="_forexRate"></param>
		///<param name="_expiryDt"></param>
		///<param name="_userId"></param>
		///<param name="_station"></param>
		///<param name="_csId"></param>
		///<param name="_custaxId"></param>
		///<param name="_safeNameRef"></param>
		///<param name="_remark"></param>
		///<param name="_updated"></param>
		///<param name="_mercType"></param>
		///<param name="_taxCode"></param>
		///<param name="_vatIncl"></param>
		///<param name="_discpervat"></param>
		///<param name="_discIncl"></param>
		///<param name="_copies"></param>
		///<param name="_recnum"></param>
		///<param name="_cardId"></param>
		///<param name="_shift"></param>
		///<param name="_status"></param>
		public static Transaction CreateTransaction(System.DateTime? _tranDate, System.String _tranTime, System.String _transNum, 
			System.String _transCode, System.String _voucher, System.String _invoice, System.Boolean? _post, 
			System.String _expId, System.String _impId, System.String _goodsId, System.Decimal? _kitQty, 
			System.String _kitId, System.Decimal? _qty, System.String _unitSymb, System.Decimal _amount, 
			System.Decimal _discount, System.Decimal? _carddiscAmt, System.Decimal _vatAmt, 
			System.Decimal _surplus, System.Decimal? _commisAmt, System.String _forexCys, System.Decimal? _forexRate, 
			System.DateTime? _expiryDt, System.Decimal? _userId, System.Int32? _station, System.String _csId, 
			System.String _custaxId, System.String _safeNameRef, System.String _remark, System.Boolean? _updated, 
			System.String _mercType, System.String _taxCode, System.Boolean? _vatIncl, System.Boolean? _discpervat, 
			System.Boolean? _discIncl, System.Decimal? _copies, System.Decimal? _recnum, System.String _cardId, 
			System.Int32? _shift, System.Boolean? _status)
		{
			Transaction newTransaction = new Transaction();
			newTransaction.TranDate = _tranDate;
			newTransaction.TranTime = _tranTime;
			newTransaction.TransNum = _transNum;
			newTransaction.TransCode = _transCode;
			newTransaction.Voucher = _voucher;
			newTransaction.Invoice = _invoice;
			newTransaction.Post = _post;
			newTransaction.ExpId = _expId;
			newTransaction.ImpId = _impId;
			newTransaction.GoodsId = _goodsId;
			newTransaction.KitQty = _kitQty;
			newTransaction.KitId = _kitId;
			newTransaction.Qty = _qty;
			newTransaction.UnitSymb = _unitSymb;
			newTransaction.Amount = _amount;
			newTransaction.Discount = _discount;
			newTransaction.CarddiscAmt = _carddiscAmt;
			newTransaction.VatAmt = _vatAmt;
			newTransaction.Surplus = _surplus;
			newTransaction.CommisAmt = _commisAmt;
			newTransaction.ForexCys = _forexCys;
			newTransaction.ForexRate = _forexRate;
			newTransaction.ExpiryDt = _expiryDt;
			newTransaction.UserId = _userId;
			newTransaction.Station = _station;
			newTransaction.CsId = _csId;
			newTransaction.CustaxId = _custaxId;
			newTransaction.SafeNameRef = _safeNameRef;
			newTransaction.Remark = _remark;
			newTransaction.Updated = _updated;
			newTransaction.MercType = _mercType;
			newTransaction.TaxCode = _taxCode;
			newTransaction.VatIncl = _vatIncl;
			newTransaction.Discpervat = _discpervat;
			newTransaction.DiscIncl = _discIncl;
			newTransaction.Copies = _copies;
			newTransaction.Recnum = _recnum;
			newTransaction.CardId = _cardId;
			newTransaction.Shift = _shift;
			newTransaction.Status = _status;
			return newTransaction;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Idx property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Decimal Idx
		{
			get
			{
				return this.entityData.Idx; 
			}
			
			set
			{
				if (this.entityData.Idx == value)
					return;
				
                OnPropertyChanging("Idx");                    
				OnColumnChanging(TransactionColumn.Idx, this.entityData.Idx);
				this.entityData.Idx = value;
				this.EntityId.Idx = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Idx, this.entityData.Idx);
				OnPropertyChanged("Idx");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TranDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TranDate
		{
			get
			{
				return this.entityData.TranDate; 
			}
			
			set
			{
				if (this.entityData.TranDate == value)
					return;
				
                OnPropertyChanging("TranDate");                    
				OnColumnChanging(TransactionColumn.TranDate, this.entityData.TranDate);
				this.entityData.TranDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.TranDate, this.entityData.TranDate);
				OnPropertyChanged("TranDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TranTime property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String TranTime
		{
			get
			{
				return this.entityData.TranTime; 
			}
			
			set
			{
				if (this.entityData.TranTime == value)
					return;
				
                OnPropertyChanging("TranTime");                    
				OnColumnChanging(TransactionColumn.TranTime, this.entityData.TranTime);
				this.entityData.TranTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.TranTime, this.entityData.TranTime);
				OnPropertyChanged("TranTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransNum property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 12)]
		public virtual System.String TransNum
		{
			get
			{
				return this.entityData.TransNum; 
			}
			
			set
			{
				if (this.entityData.TransNum == value)
					return;
				
                OnPropertyChanging("TransNum");                    
				OnColumnChanging(TransactionColumn.TransNum, this.entityData.TransNum);
				this.entityData.TransNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.TransNum, this.entityData.TransNum);
				OnPropertyChanged("TransNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransCode property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String TransCode
		{
			get
			{
				return this.entityData.TransCode; 
			}
			
			set
			{
				if (this.entityData.TransCode == value)
					return;
				
                OnPropertyChanging("TransCode");                    
				OnColumnChanging(TransactionColumn.TransCode, this.entityData.TransCode);
				this.entityData.TransCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.TransCode, this.entityData.TransCode);
				OnPropertyChanged("TransCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Voucher property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 15)]
		public virtual System.String Voucher
		{
			get
			{
				return this.entityData.Voucher; 
			}
			
			set
			{
				if (this.entityData.Voucher == value)
					return;
				
                OnPropertyChanging("Voucher");                    
				OnColumnChanging(TransactionColumn.Voucher, this.entityData.Voucher);
				this.entityData.Voucher = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Voucher, this.entityData.Voucher);
				OnPropertyChanged("Voucher");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Invoice property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Invoice
		{
			get
			{
				return this.entityData.Invoice; 
			}
			
			set
			{
				if (this.entityData.Invoice == value)
					return;
				
                OnPropertyChanging("Invoice");                    
				OnColumnChanging(TransactionColumn.Invoice, this.entityData.Invoice);
				this.entityData.Invoice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Invoice, this.entityData.Invoice);
				OnPropertyChanged("Invoice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Post property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Post
		{
			get
			{
				return this.entityData.Post; 
			}
			
			set
			{
				if (this.entityData.Post == value)
					return;
				
                OnPropertyChanging("Post");                    
				OnColumnChanging(TransactionColumn.Post, this.entityData.Post);
				this.entityData.Post = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Post, this.entityData.Post);
				OnPropertyChanged("Post");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String ExpId
		{
			get
			{
				return this.entityData.ExpId; 
			}
			
			set
			{
				if (this.entityData.ExpId == value)
					return;
				
                OnPropertyChanging("ExpId");                    
				OnColumnChanging(TransactionColumn.ExpId, this.entityData.ExpId);
				this.entityData.ExpId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.ExpId, this.entityData.ExpId);
				OnPropertyChanged("ExpId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImpId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String ImpId
		{
			get
			{
				return this.entityData.ImpId; 
			}
			
			set
			{
				if (this.entityData.ImpId == value)
					return;
				
                OnPropertyChanging("ImpId");                    
				OnColumnChanging(TransactionColumn.ImpId, this.entityData.ImpId);
				this.entityData.ImpId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.ImpId, this.entityData.ImpId);
				OnPropertyChanged("ImpId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GoodsId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String GoodsId
		{
			get
			{
				return this.entityData.GoodsId; 
			}
			
			set
			{
				if (this.entityData.GoodsId == value)
					return;
				
                OnPropertyChanging("GoodsId");                    
				OnColumnChanging(TransactionColumn.GoodsId, this.entityData.GoodsId);
				this.entityData.GoodsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.GoodsId, this.entityData.GoodsId);
				OnPropertyChanged("GoodsId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KitQty property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? KitQty
		{
			get
			{
				return this.entityData.KitQty; 
			}
			
			set
			{
				if (this.entityData.KitQty == value)
					return;
				
                OnPropertyChanging("KitQty");                    
				OnColumnChanging(TransactionColumn.KitQty, this.entityData.KitQty);
				this.entityData.KitQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.KitQty, this.entityData.KitQty);
				OnPropertyChanged("KitQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the KitId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String KitId
		{
			get
			{
				return this.entityData.KitId; 
			}
			
			set
			{
				if (this.entityData.KitId == value)
					return;
				
                OnPropertyChanging("KitId");                    
				OnColumnChanging(TransactionColumn.KitId, this.entityData.KitId);
				this.entityData.KitId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.KitId, this.entityData.KitId);
				OnPropertyChanged("KitId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Qty property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Qty
		{
			get
			{
				return this.entityData.Qty; 
			}
			
			set
			{
				if (this.entityData.Qty == value)
					return;
				
                OnPropertyChanging("Qty");                    
				OnColumnChanging(TransactionColumn.Qty, this.entityData.Qty);
				this.entityData.Qty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Qty, this.entityData.Qty);
				OnPropertyChanged("Qty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitSymb property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String UnitSymb
		{
			get
			{
				return this.entityData.UnitSymb; 
			}
			
			set
			{
				if (this.entityData.UnitSymb == value)
					return;
				
                OnPropertyChanging("UnitSymb");                    
				OnColumnChanging(TransactionColumn.UnitSymb, this.entityData.UnitSymb);
				this.entityData.UnitSymb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.UnitSymb, this.entityData.UnitSymb);
				OnPropertyChanged("UnitSymb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Amount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Amount
		{
			get
			{
				return this.entityData.Amount; 
			}
			
			set
			{
				if (this.entityData.Amount == value)
					return;
				
                OnPropertyChanging("Amount");                    
				OnColumnChanging(TransactionColumn.Amount, this.entityData.Amount);
				this.entityData.Amount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Amount, this.entityData.Amount);
				OnPropertyChanged("Amount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Discount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Discount
		{
			get
			{
				return this.entityData.Discount; 
			}
			
			set
			{
				if (this.entityData.Discount == value)
					return;
				
                OnPropertyChanging("Discount");                    
				OnColumnChanging(TransactionColumn.Discount, this.entityData.Discount);
				this.entityData.Discount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Discount, this.entityData.Discount);
				OnPropertyChanged("Discount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CarddiscAmt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CarddiscAmt
		{
			get
			{
				return this.entityData.CarddiscAmt; 
			}
			
			set
			{
				if (this.entityData.CarddiscAmt == value)
					return;
				
                OnPropertyChanging("CarddiscAmt");                    
				OnColumnChanging(TransactionColumn.CarddiscAmt, this.entityData.CarddiscAmt);
				this.entityData.CarddiscAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.CarddiscAmt, this.entityData.CarddiscAmt);
				OnPropertyChanged("CarddiscAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VatAmt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal VatAmt
		{
			get
			{
				return this.entityData.VatAmt; 
			}
			
			set
			{
				if (this.entityData.VatAmt == value)
					return;
				
                OnPropertyChanging("VatAmt");                    
				OnColumnChanging(TransactionColumn.VatAmt, this.entityData.VatAmt);
				this.entityData.VatAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.VatAmt, this.entityData.VatAmt);
				OnPropertyChanged("VatAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Surplus property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Surplus
		{
			get
			{
				return this.entityData.Surplus; 
			}
			
			set
			{
				if (this.entityData.Surplus == value)
					return;
				
                OnPropertyChanging("Surplus");                    
				OnColumnChanging(TransactionColumn.Surplus, this.entityData.Surplus);
				this.entityData.Surplus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Surplus, this.entityData.Surplus);
				OnPropertyChanged("Surplus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommisAmt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CommisAmt
		{
			get
			{
				return this.entityData.CommisAmt; 
			}
			
			set
			{
				if (this.entityData.CommisAmt == value)
					return;
				
                OnPropertyChanging("CommisAmt");                    
				OnColumnChanging(TransactionColumn.CommisAmt, this.entityData.CommisAmt);
				this.entityData.CommisAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.CommisAmt, this.entityData.CommisAmt);
				OnPropertyChanged("CommisAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ForexCys property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String ForexCys
		{
			get
			{
				return this.entityData.ForexCys; 
			}
			
			set
			{
				if (this.entityData.ForexCys == value)
					return;
				
                OnPropertyChanging("ForexCys");                    
				OnColumnChanging(TransactionColumn.ForexCys, this.entityData.ForexCys);
				this.entityData.ForexCys = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.ForexCys, this.entityData.ForexCys);
				OnPropertyChanged("ForexCys");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ForexRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ForexRate
		{
			get
			{
				return this.entityData.ForexRate; 
			}
			
			set
			{
				if (this.entityData.ForexRate == value)
					return;
				
                OnPropertyChanging("ForexRate");                    
				OnColumnChanging(TransactionColumn.ForexRate, this.entityData.ForexRate);
				this.entityData.ForexRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.ForexRate, this.entityData.ForexRate);
				OnPropertyChanged("ForexRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpiryDt property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpiryDt
		{
			get
			{
				return this.entityData.ExpiryDt; 
			}
			
			set
			{
				if (this.entityData.ExpiryDt == value)
					return;
				
                OnPropertyChanging("ExpiryDt");                    
				OnColumnChanging(TransactionColumn.ExpiryDt, this.entityData.ExpiryDt);
				this.entityData.ExpiryDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.ExpiryDt, this.entityData.ExpiryDt);
				OnPropertyChanged("ExpiryDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
				
                OnPropertyChanging("UserId");                    
				OnColumnChanging(TransactionColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Station property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Station
		{
			get
			{
				return this.entityData.Station; 
			}
			
			set
			{
				if (this.entityData.Station == value)
					return;
				
                OnPropertyChanging("Station");                    
				OnColumnChanging(TransactionColumn.Station, this.entityData.Station);
				this.entityData.Station = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Station, this.entityData.Station);
				OnPropertyChanged("Station");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CsId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String CsId
		{
			get
			{
				return this.entityData.CsId; 
			}
			
			set
			{
				if (this.entityData.CsId == value)
					return;
				
                OnPropertyChanging("CsId");                    
				OnColumnChanging(TransactionColumn.CsId, this.entityData.CsId);
				this.entityData.CsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.CsId, this.entityData.CsId);
				OnPropertyChanged("CsId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustaxId property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String CustaxId
		{
			get
			{
				return this.entityData.CustaxId; 
			}
			
			set
			{
				if (this.entityData.CustaxId == value)
					return;
				
                OnPropertyChanging("CustaxId");                    
				OnColumnChanging(TransactionColumn.CustaxId, this.entityData.CustaxId);
				this.entityData.CustaxId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.CustaxId, this.entityData.CustaxId);
				OnPropertyChanged("CustaxId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeNameRef property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 12)]
		public virtual System.String SafeNameRef
		{
			get
			{
				return this.entityData.SafeNameRef; 
			}
			
			set
			{
				if (this.entityData.SafeNameRef == value)
					return;
				
                OnPropertyChanging("SafeNameRef");                    
				OnColumnChanging(TransactionColumn.SafeNameRef, this.entityData.SafeNameRef);
				this.entityData.SafeNameRef = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.SafeNameRef, this.entityData.SafeNameRef);
				OnPropertyChanged("SafeNameRef");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Remark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Remark
		{
			get
			{
				return this.entityData.Remark; 
			}
			
			set
			{
				if (this.entityData.Remark == value)
					return;
				
                OnPropertyChanging("Remark");                    
				OnColumnChanging(TransactionColumn.Remark, this.entityData.Remark);
				this.entityData.Remark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Remark, this.entityData.Remark);
				OnPropertyChanged("Remark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Updated property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Updated
		{
			get
			{
				return this.entityData.Updated; 
			}
			
			set
			{
				if (this.entityData.Updated == value)
					return;
				
                OnPropertyChanging("Updated");                    
				OnColumnChanging(TransactionColumn.Updated, this.entityData.Updated);
				this.entityData.Updated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Updated, this.entityData.Updated);
				OnPropertyChanged("Updated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MercType property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String MercType
		{
			get
			{
				return this.entityData.MercType; 
			}
			
			set
			{
				if (this.entityData.MercType == value)
					return;
				
                OnPropertyChanging("MercType");                    
				OnColumnChanging(TransactionColumn.MercType, this.entityData.MercType);
				this.entityData.MercType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.MercType, this.entityData.MercType);
				OnPropertyChanged("MercType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxCode property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String TaxCode
		{
			get
			{
				return this.entityData.TaxCode; 
			}
			
			set
			{
				if (this.entityData.TaxCode == value)
					return;
				
                OnPropertyChanging("TaxCode");                    
				OnColumnChanging(TransactionColumn.TaxCode, this.entityData.TaxCode);
				this.entityData.TaxCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.TaxCode, this.entityData.TaxCode);
				OnPropertyChanged("TaxCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VatIncl property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? VatIncl
		{
			get
			{
				return this.entityData.VatIncl; 
			}
			
			set
			{
				if (this.entityData.VatIncl == value)
					return;
				
                OnPropertyChanging("VatIncl");                    
				OnColumnChanging(TransactionColumn.VatIncl, this.entityData.VatIncl);
				this.entityData.VatIncl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.VatIncl, this.entityData.VatIncl);
				OnPropertyChanged("VatIncl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Discpervat property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Discpervat
		{
			get
			{
				return this.entityData.Discpervat; 
			}
			
			set
			{
				if (this.entityData.Discpervat == value)
					return;
				
                OnPropertyChanging("Discpervat");                    
				OnColumnChanging(TransactionColumn.Discpervat, this.entityData.Discpervat);
				this.entityData.Discpervat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Discpervat, this.entityData.Discpervat);
				OnPropertyChanged("Discpervat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscIncl property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? DiscIncl
		{
			get
			{
				return this.entityData.DiscIncl; 
			}
			
			set
			{
				if (this.entityData.DiscIncl == value)
					return;
				
                OnPropertyChanging("DiscIncl");                    
				OnColumnChanging(TransactionColumn.DiscIncl, this.entityData.DiscIncl);
				this.entityData.DiscIncl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.DiscIncl, this.entityData.DiscIncl);
				OnPropertyChanged("DiscIncl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Copies property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Copies
		{
			get
			{
				return this.entityData.Copies; 
			}
			
			set
			{
				if (this.entityData.Copies == value)
					return;
				
                OnPropertyChanging("Copies");                    
				OnColumnChanging(TransactionColumn.Copies, this.entityData.Copies);
				this.entityData.Copies = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Copies, this.entityData.Copies);
				OnPropertyChanged("Copies");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Recnum property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Recnum
		{
			get
			{
				return this.entityData.Recnum; 
			}
			
			set
			{
				if (this.entityData.Recnum == value)
					return;
				
                OnPropertyChanging("Recnum");                    
				OnColumnChanging(TransactionColumn.Recnum, this.entityData.Recnum);
				this.entityData.Recnum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Recnum, this.entityData.Recnum);
				OnPropertyChanged("Recnum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CardId property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 16)]
		public virtual System.String CardId
		{
			get
			{
				return this.entityData.CardId; 
			}
			
			set
			{
				if (this.entityData.CardId == value)
					return;
				
                OnPropertyChanging("CardId");                    
				OnColumnChanging(TransactionColumn.CardId, this.entityData.CardId);
				this.entityData.CardId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.CardId, this.entityData.CardId);
				OnPropertyChanged("CardId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Shift property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Shift
		{
			get
			{
				return this.entityData.Shift; 
			}
			
			set
			{
				if (this.entityData.Shift == value)
					return;
				
                OnPropertyChanging("Shift");                    
				OnColumnChanging(TransactionColumn.Shift, this.entityData.Shift);
				this.entityData.Shift = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Shift, this.entityData.Shift);
				OnPropertyChanged("Shift");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(TransactionColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TransactionColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TranTime", "Tran Time", 5));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransNum", "Trans Num", 12));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransCode", "Trans Code", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Voucher", "Voucher", 15));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Invoice", "Invoice", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ExpId", "Exp Id", 5));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ImpId", "Imp Id", 5));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoodsId", "Goods Id", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("KitId", "Kit Id", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UnitSymb", "Unit Symb", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ForexCys", "Forex Cys", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CsId", "Cs Id", 5));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustaxId", "Custax Id", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SafeNameRef", "Ref", 12));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Remark", "Remark", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MercType", "Merc Type", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TaxCode", "Tax Code", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CardId", "Card Id", 16));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblTransaction"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"idx", "tran_date", "tran_time", "trans_num", "trans_code", "voucher", "invoice", "post", "exp_id", "imp_id", "goods_id", "kit_qty", "kit_id", "qty", "unit_symb", "amount", "discount", "carddisc_amt", "vat_amt", "surplus", "commis_amt", "forex_cys", "forex_rate", "expiry_dt", "user_id", "station", "cs_id", "custax_id", "ref", "remark", "updated", "merc_type", "tax_code", "vat_incl", "discpervat", "disc_incl", "copies", "recnum", "card_id", "Shift", "Status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TransactionEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Transaction) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Transaction>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Transaction);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Transaction Entity 
		///</summary>
		protected virtual Transaction Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Transaction copy = new Transaction();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Idx = this.Idx;
				copy.TranDate = this.TranDate;
				copy.TranTime = this.TranTime;
				copy.TransNum = this.TransNum;
				copy.TransCode = this.TransCode;
				copy.Voucher = this.Voucher;
				copy.Invoice = this.Invoice;
				copy.Post = this.Post;
				copy.ExpId = this.ExpId;
				copy.ImpId = this.ImpId;
				copy.GoodsId = this.GoodsId;
				copy.KitQty = this.KitQty;
				copy.KitId = this.KitId;
				copy.Qty = this.Qty;
				copy.UnitSymb = this.UnitSymb;
				copy.Amount = this.Amount;
				copy.Discount = this.Discount;
				copy.CarddiscAmt = this.CarddiscAmt;
				copy.VatAmt = this.VatAmt;
				copy.Surplus = this.Surplus;
				copy.CommisAmt = this.CommisAmt;
				copy.ForexCys = this.ForexCys;
				copy.ForexRate = this.ForexRate;
				copy.ExpiryDt = this.ExpiryDt;
				copy.UserId = this.UserId;
				copy.Station = this.Station;
				copy.CsId = this.CsId;
				copy.CustaxId = this.CustaxId;
				copy.SafeNameRef = this.SafeNameRef;
				copy.Remark = this.Remark;
				copy.Updated = this.Updated;
				copy.MercType = this.MercType;
				copy.TaxCode = this.TaxCode;
				copy.VatIncl = this.VatIncl;
				copy.Discpervat = this.Discpervat;
				copy.DiscIncl = this.DiscIncl;
				copy.Copies = this.Copies;
				copy.Recnum = this.Recnum;
				copy.CardId = this.CardId;
				copy.Shift = this.Shift;
				copy.Status = this.Status;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Transaction Entity 
		///</summary>
		public virtual Transaction Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Transaction Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Transaction DeepCopy()
		{
			return EntityHelper.Clone<Transaction>(this as Transaction);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TransactionEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TransactionEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TransactionEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TransactionColumn column)
		{
			switch(column)
			{
					case TransactionColumn.Idx:
					return entityData.Idx != _originalData.Idx;
					case TransactionColumn.TranDate:
					return entityData.TranDate != _originalData.TranDate;
					case TransactionColumn.TranTime:
					return entityData.TranTime != _originalData.TranTime;
					case TransactionColumn.TransNum:
					return entityData.TransNum != _originalData.TransNum;
					case TransactionColumn.TransCode:
					return entityData.TransCode != _originalData.TransCode;
					case TransactionColumn.Voucher:
					return entityData.Voucher != _originalData.Voucher;
					case TransactionColumn.Invoice:
					return entityData.Invoice != _originalData.Invoice;
					case TransactionColumn.Post:
					return entityData.Post != _originalData.Post;
					case TransactionColumn.ExpId:
					return entityData.ExpId != _originalData.ExpId;
					case TransactionColumn.ImpId:
					return entityData.ImpId != _originalData.ImpId;
					case TransactionColumn.GoodsId:
					return entityData.GoodsId != _originalData.GoodsId;
					case TransactionColumn.KitQty:
					return entityData.KitQty != _originalData.KitQty;
					case TransactionColumn.KitId:
					return entityData.KitId != _originalData.KitId;
					case TransactionColumn.Qty:
					return entityData.Qty != _originalData.Qty;
					case TransactionColumn.UnitSymb:
					return entityData.UnitSymb != _originalData.UnitSymb;
					case TransactionColumn.Amount:
					return entityData.Amount != _originalData.Amount;
					case TransactionColumn.Discount:
					return entityData.Discount != _originalData.Discount;
					case TransactionColumn.CarddiscAmt:
					return entityData.CarddiscAmt != _originalData.CarddiscAmt;
					case TransactionColumn.VatAmt:
					return entityData.VatAmt != _originalData.VatAmt;
					case TransactionColumn.Surplus:
					return entityData.Surplus != _originalData.Surplus;
					case TransactionColumn.CommisAmt:
					return entityData.CommisAmt != _originalData.CommisAmt;
					case TransactionColumn.ForexCys:
					return entityData.ForexCys != _originalData.ForexCys;
					case TransactionColumn.ForexRate:
					return entityData.ForexRate != _originalData.ForexRate;
					case TransactionColumn.ExpiryDt:
					return entityData.ExpiryDt != _originalData.ExpiryDt;
					case TransactionColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case TransactionColumn.Station:
					return entityData.Station != _originalData.Station;
					case TransactionColumn.CsId:
					return entityData.CsId != _originalData.CsId;
					case TransactionColumn.CustaxId:
					return entityData.CustaxId != _originalData.CustaxId;
					case TransactionColumn.SafeNameRef:
					return entityData.SafeNameRef != _originalData.SafeNameRef;
					case TransactionColumn.Remark:
					return entityData.Remark != _originalData.Remark;
					case TransactionColumn.Updated:
					return entityData.Updated != _originalData.Updated;
					case TransactionColumn.MercType:
					return entityData.MercType != _originalData.MercType;
					case TransactionColumn.TaxCode:
					return entityData.TaxCode != _originalData.TaxCode;
					case TransactionColumn.VatIncl:
					return entityData.VatIncl != _originalData.VatIncl;
					case TransactionColumn.Discpervat:
					return entityData.Discpervat != _originalData.Discpervat;
					case TransactionColumn.DiscIncl:
					return entityData.DiscIncl != _originalData.DiscIncl;
					case TransactionColumn.Copies:
					return entityData.Copies != _originalData.Copies;
					case TransactionColumn.Recnum:
					return entityData.Recnum != _originalData.Recnum;
					case TransactionColumn.CardId:
					return entityData.CardId != _originalData.CardId;
					case TransactionColumn.Shift:
					return entityData.Shift != _originalData.Shift;
					case TransactionColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TransactionColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Idx != _originalData.Idx;
			result = result || entityData.TranDate != _originalData.TranDate;
			result = result || entityData.TranTime != _originalData.TranTime;
			result = result || entityData.TransNum != _originalData.TransNum;
			result = result || entityData.TransCode != _originalData.TransCode;
			result = result || entityData.Voucher != _originalData.Voucher;
			result = result || entityData.Invoice != _originalData.Invoice;
			result = result || entityData.Post != _originalData.Post;
			result = result || entityData.ExpId != _originalData.ExpId;
			result = result || entityData.ImpId != _originalData.ImpId;
			result = result || entityData.GoodsId != _originalData.GoodsId;
			result = result || entityData.KitQty != _originalData.KitQty;
			result = result || entityData.KitId != _originalData.KitId;
			result = result || entityData.Qty != _originalData.Qty;
			result = result || entityData.UnitSymb != _originalData.UnitSymb;
			result = result || entityData.Amount != _originalData.Amount;
			result = result || entityData.Discount != _originalData.Discount;
			result = result || entityData.CarddiscAmt != _originalData.CarddiscAmt;
			result = result || entityData.VatAmt != _originalData.VatAmt;
			result = result || entityData.Surplus != _originalData.Surplus;
			result = result || entityData.CommisAmt != _originalData.CommisAmt;
			result = result || entityData.ForexCys != _originalData.ForexCys;
			result = result || entityData.ForexRate != _originalData.ForexRate;
			result = result || entityData.ExpiryDt != _originalData.ExpiryDt;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.Station != _originalData.Station;
			result = result || entityData.CsId != _originalData.CsId;
			result = result || entityData.CustaxId != _originalData.CustaxId;
			result = result || entityData.SafeNameRef != _originalData.SafeNameRef;
			result = result || entityData.Remark != _originalData.Remark;
			result = result || entityData.Updated != _originalData.Updated;
			result = result || entityData.MercType != _originalData.MercType;
			result = result || entityData.TaxCode != _originalData.TaxCode;
			result = result || entityData.VatIncl != _originalData.VatIncl;
			result = result || entityData.Discpervat != _originalData.Discpervat;
			result = result || entityData.DiscIncl != _originalData.DiscIncl;
			result = result || entityData.Copies != _originalData.Copies;
			result = result || entityData.Recnum != _originalData.Recnum;
			result = result || entityData.CardId != _originalData.CardId;
			result = result || entityData.Shift != _originalData.Shift;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a Transaction Entity with the original data.
		///</summary>
		public Transaction GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTransaction(
				_originalData.TranDate,
				_originalData.TranTime,
				_originalData.TransNum,
				_originalData.TransCode,
				_originalData.Voucher,
				_originalData.Invoice,
				_originalData.Post,
				_originalData.ExpId,
				_originalData.ImpId,
				_originalData.GoodsId,
				_originalData.KitQty,
				_originalData.KitId,
				_originalData.Qty,
				_originalData.UnitSymb,
				_originalData.Amount,
				_originalData.Discount,
				_originalData.CarddiscAmt,
				_originalData.VatAmt,
				_originalData.Surplus,
				_originalData.CommisAmt,
				_originalData.ForexCys,
				_originalData.ForexRate,
				_originalData.ExpiryDt,
				_originalData.UserId,
				_originalData.Station,
				_originalData.CsId,
				_originalData.CustaxId,
				_originalData.SafeNameRef,
				_originalData.Remark,
				_originalData.Updated,
				_originalData.MercType,
				_originalData.TaxCode,
				_originalData.VatIncl,
				_originalData.Discpervat,
				_originalData.DiscIncl,
				_originalData.Copies,
				_originalData.Recnum,
				_originalData.CardId,
				_originalData.Shift,
				_originalData.Status
				);
				
			return (Transaction)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TransactionBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TransactionBase)
				return ValueEquals(this, (TransactionBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TransactionBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Idx.GetHashCode() ^ 
					((this.TranDate == null) ? string.Empty : this.TranDate.ToString()).GetHashCode() ^ 
					((this.TranTime == null) ? string.Empty : this.TranTime.ToString()).GetHashCode() ^ 
					((this.TransNum == null) ? string.Empty : this.TransNum.ToString()).GetHashCode() ^ 
					((this.TransCode == null) ? string.Empty : this.TransCode.ToString()).GetHashCode() ^ 
					((this.Voucher == null) ? string.Empty : this.Voucher.ToString()).GetHashCode() ^ 
					((this.Invoice == null) ? string.Empty : this.Invoice.ToString()).GetHashCode() ^ 
					((this.Post == null) ? string.Empty : this.Post.ToString()).GetHashCode() ^ 
					((this.ExpId == null) ? string.Empty : this.ExpId.ToString()).GetHashCode() ^ 
					((this.ImpId == null) ? string.Empty : this.ImpId.ToString()).GetHashCode() ^ 
					((this.GoodsId == null) ? string.Empty : this.GoodsId.ToString()).GetHashCode() ^ 
					((this.KitQty == null) ? string.Empty : this.KitQty.ToString()).GetHashCode() ^ 
					((this.KitId == null) ? string.Empty : this.KitId.ToString()).GetHashCode() ^ 
					((this.Qty == null) ? string.Empty : this.Qty.ToString()).GetHashCode() ^ 
					((this.UnitSymb == null) ? string.Empty : this.UnitSymb.ToString()).GetHashCode() ^ 
					this.Amount.GetHashCode() ^ 
					this.Discount.GetHashCode() ^ 
					((this.CarddiscAmt == null) ? string.Empty : this.CarddiscAmt.ToString()).GetHashCode() ^ 
					this.VatAmt.GetHashCode() ^ 
					this.Surplus.GetHashCode() ^ 
					((this.CommisAmt == null) ? string.Empty : this.CommisAmt.ToString()).GetHashCode() ^ 
					((this.ForexCys == null) ? string.Empty : this.ForexCys.ToString()).GetHashCode() ^ 
					((this.ForexRate == null) ? string.Empty : this.ForexRate.ToString()).GetHashCode() ^ 
					((this.ExpiryDt == null) ? string.Empty : this.ExpiryDt.ToString()).GetHashCode() ^ 
					((this.UserId == null) ? string.Empty : this.UserId.ToString()).GetHashCode() ^ 
					((this.Station == null) ? string.Empty : this.Station.ToString()).GetHashCode() ^ 
					((this.CsId == null) ? string.Empty : this.CsId.ToString()).GetHashCode() ^ 
					((this.CustaxId == null) ? string.Empty : this.CustaxId.ToString()).GetHashCode() ^ 
					((this.SafeNameRef == null) ? string.Empty : this.SafeNameRef.ToString()).GetHashCode() ^ 
					((this.Remark == null) ? string.Empty : this.Remark.ToString()).GetHashCode() ^ 
					((this.Updated == null) ? string.Empty : this.Updated.ToString()).GetHashCode() ^ 
					((this.MercType == null) ? string.Empty : this.MercType.ToString()).GetHashCode() ^ 
					((this.TaxCode == null) ? string.Empty : this.TaxCode.ToString()).GetHashCode() ^ 
					((this.VatIncl == null) ? string.Empty : this.VatIncl.ToString()).GetHashCode() ^ 
					((this.Discpervat == null) ? string.Empty : this.Discpervat.ToString()).GetHashCode() ^ 
					((this.DiscIncl == null) ? string.Empty : this.DiscIncl.ToString()).GetHashCode() ^ 
					((this.Copies == null) ? string.Empty : this.Copies.ToString()).GetHashCode() ^ 
					((this.Recnum == null) ? string.Empty : this.Recnum.ToString()).GetHashCode() ^ 
					((this.CardId == null) ? string.Empty : this.CardId.ToString()).GetHashCode() ^ 
					((this.Shift == null) ? string.Empty : this.Shift.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TransactionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TransactionBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TransactionBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TransactionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TransactionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TransactionBase Object1, TransactionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Idx != Object2.Idx)
				equal = false;
			if ( Object1.TranDate != null && Object2.TranDate != null )
			{
				if (Object1.TranDate != Object2.TranDate)
					equal = false;
			}
			else if (Object1.TranDate == null ^ Object2.TranDate == null )
			{
				equal = false;
			}
			if ( Object1.TranTime != null && Object2.TranTime != null )
			{
				if (Object1.TranTime != Object2.TranTime)
					equal = false;
			}
			else if (Object1.TranTime == null ^ Object2.TranTime == null )
			{
				equal = false;
			}
			if ( Object1.TransNum != null && Object2.TransNum != null )
			{
				if (Object1.TransNum != Object2.TransNum)
					equal = false;
			}
			else if (Object1.TransNum == null ^ Object2.TransNum == null )
			{
				equal = false;
			}
			if ( Object1.TransCode != null && Object2.TransCode != null )
			{
				if (Object1.TransCode != Object2.TransCode)
					equal = false;
			}
			else if (Object1.TransCode == null ^ Object2.TransCode == null )
			{
				equal = false;
			}
			if ( Object1.Voucher != null && Object2.Voucher != null )
			{
				if (Object1.Voucher != Object2.Voucher)
					equal = false;
			}
			else if (Object1.Voucher == null ^ Object2.Voucher == null )
			{
				equal = false;
			}
			if ( Object1.Invoice != null && Object2.Invoice != null )
			{
				if (Object1.Invoice != Object2.Invoice)
					equal = false;
			}
			else if (Object1.Invoice == null ^ Object2.Invoice == null )
			{
				equal = false;
			}
			if ( Object1.Post != null && Object2.Post != null )
			{
				if (Object1.Post != Object2.Post)
					equal = false;
			}
			else if (Object1.Post == null ^ Object2.Post == null )
			{
				equal = false;
			}
			if ( Object1.ExpId != null && Object2.ExpId != null )
			{
				if (Object1.ExpId != Object2.ExpId)
					equal = false;
			}
			else if (Object1.ExpId == null ^ Object2.ExpId == null )
			{
				equal = false;
			}
			if ( Object1.ImpId != null && Object2.ImpId != null )
			{
				if (Object1.ImpId != Object2.ImpId)
					equal = false;
			}
			else if (Object1.ImpId == null ^ Object2.ImpId == null )
			{
				equal = false;
			}
			if ( Object1.GoodsId != null && Object2.GoodsId != null )
			{
				if (Object1.GoodsId != Object2.GoodsId)
					equal = false;
			}
			else if (Object1.GoodsId == null ^ Object2.GoodsId == null )
			{
				equal = false;
			}
			if ( Object1.KitQty != null && Object2.KitQty != null )
			{
				if (Object1.KitQty != Object2.KitQty)
					equal = false;
			}
			else if (Object1.KitQty == null ^ Object2.KitQty == null )
			{
				equal = false;
			}
			if ( Object1.KitId != null && Object2.KitId != null )
			{
				if (Object1.KitId != Object2.KitId)
					equal = false;
			}
			else if (Object1.KitId == null ^ Object2.KitId == null )
			{
				equal = false;
			}
			if ( Object1.Qty != null && Object2.Qty != null )
			{
				if (Object1.Qty != Object2.Qty)
					equal = false;
			}
			else if (Object1.Qty == null ^ Object2.Qty == null )
			{
				equal = false;
			}
			if ( Object1.UnitSymb != null && Object2.UnitSymb != null )
			{
				if (Object1.UnitSymb != Object2.UnitSymb)
					equal = false;
			}
			else if (Object1.UnitSymb == null ^ Object2.UnitSymb == null )
			{
				equal = false;
			}
			if (Object1.Amount != Object2.Amount)
				equal = false;
			if (Object1.Discount != Object2.Discount)
				equal = false;
			if ( Object1.CarddiscAmt != null && Object2.CarddiscAmt != null )
			{
				if (Object1.CarddiscAmt != Object2.CarddiscAmt)
					equal = false;
			}
			else if (Object1.CarddiscAmt == null ^ Object2.CarddiscAmt == null )
			{
				equal = false;
			}
			if (Object1.VatAmt != Object2.VatAmt)
				equal = false;
			if (Object1.Surplus != Object2.Surplus)
				equal = false;
			if ( Object1.CommisAmt != null && Object2.CommisAmt != null )
			{
				if (Object1.CommisAmt != Object2.CommisAmt)
					equal = false;
			}
			else if (Object1.CommisAmt == null ^ Object2.CommisAmt == null )
			{
				equal = false;
			}
			if ( Object1.ForexCys != null && Object2.ForexCys != null )
			{
				if (Object1.ForexCys != Object2.ForexCys)
					equal = false;
			}
			else if (Object1.ForexCys == null ^ Object2.ForexCys == null )
			{
				equal = false;
			}
			if ( Object1.ForexRate != null && Object2.ForexRate != null )
			{
				if (Object1.ForexRate != Object2.ForexRate)
					equal = false;
			}
			else if (Object1.ForexRate == null ^ Object2.ForexRate == null )
			{
				equal = false;
			}
			if ( Object1.ExpiryDt != null && Object2.ExpiryDt != null )
			{
				if (Object1.ExpiryDt != Object2.ExpiryDt)
					equal = false;
			}
			else if (Object1.ExpiryDt == null ^ Object2.ExpiryDt == null )
			{
				equal = false;
			}
			if ( Object1.UserId != null && Object2.UserId != null )
			{
				if (Object1.UserId != Object2.UserId)
					equal = false;
			}
			else if (Object1.UserId == null ^ Object2.UserId == null )
			{
				equal = false;
			}
			if ( Object1.Station != null && Object2.Station != null )
			{
				if (Object1.Station != Object2.Station)
					equal = false;
			}
			else if (Object1.Station == null ^ Object2.Station == null )
			{
				equal = false;
			}
			if ( Object1.CsId != null && Object2.CsId != null )
			{
				if (Object1.CsId != Object2.CsId)
					equal = false;
			}
			else if (Object1.CsId == null ^ Object2.CsId == null )
			{
				equal = false;
			}
			if ( Object1.CustaxId != null && Object2.CustaxId != null )
			{
				if (Object1.CustaxId != Object2.CustaxId)
					equal = false;
			}
			else if (Object1.CustaxId == null ^ Object2.CustaxId == null )
			{
				equal = false;
			}
			if ( Object1.SafeNameRef != null && Object2.SafeNameRef != null )
			{
				if (Object1.SafeNameRef != Object2.SafeNameRef)
					equal = false;
			}
			else if (Object1.SafeNameRef == null ^ Object2.SafeNameRef == null )
			{
				equal = false;
			}
			if ( Object1.Remark != null && Object2.Remark != null )
			{
				if (Object1.Remark != Object2.Remark)
					equal = false;
			}
			else if (Object1.Remark == null ^ Object2.Remark == null )
			{
				equal = false;
			}
			if ( Object1.Updated != null && Object2.Updated != null )
			{
				if (Object1.Updated != Object2.Updated)
					equal = false;
			}
			else if (Object1.Updated == null ^ Object2.Updated == null )
			{
				equal = false;
			}
			if ( Object1.MercType != null && Object2.MercType != null )
			{
				if (Object1.MercType != Object2.MercType)
					equal = false;
			}
			else if (Object1.MercType == null ^ Object2.MercType == null )
			{
				equal = false;
			}
			if ( Object1.TaxCode != null && Object2.TaxCode != null )
			{
				if (Object1.TaxCode != Object2.TaxCode)
					equal = false;
			}
			else if (Object1.TaxCode == null ^ Object2.TaxCode == null )
			{
				equal = false;
			}
			if ( Object1.VatIncl != null && Object2.VatIncl != null )
			{
				if (Object1.VatIncl != Object2.VatIncl)
					equal = false;
			}
			else if (Object1.VatIncl == null ^ Object2.VatIncl == null )
			{
				equal = false;
			}
			if ( Object1.Discpervat != null && Object2.Discpervat != null )
			{
				if (Object1.Discpervat != Object2.Discpervat)
					equal = false;
			}
			else if (Object1.Discpervat == null ^ Object2.Discpervat == null )
			{
				equal = false;
			}
			if ( Object1.DiscIncl != null && Object2.DiscIncl != null )
			{
				if (Object1.DiscIncl != Object2.DiscIncl)
					equal = false;
			}
			else if (Object1.DiscIncl == null ^ Object2.DiscIncl == null )
			{
				equal = false;
			}
			if ( Object1.Copies != null && Object2.Copies != null )
			{
				if (Object1.Copies != Object2.Copies)
					equal = false;
			}
			else if (Object1.Copies == null ^ Object2.Copies == null )
			{
				equal = false;
			}
			if ( Object1.Recnum != null && Object2.Recnum != null )
			{
				if (Object1.Recnum != Object2.Recnum)
					equal = false;
			}
			else if (Object1.Recnum == null ^ Object2.Recnum == null )
			{
				equal = false;
			}
			if ( Object1.CardId != null && Object2.CardId != null )
			{
				if (Object1.CardId != Object2.CardId)
					equal = false;
			}
			else if (Object1.CardId == null ^ Object2.CardId == null )
			{
				equal = false;
			}
			if ( Object1.Shift != null && Object2.Shift != null )
			{
				if (Object1.Shift != Object2.Shift)
					equal = false;
			}
			else if (Object1.Shift == null ^ Object2.Shift == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TransactionBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TransactionComparer GetComparer()
        {
            return new TransactionComparer();
        }
        */

        // Comparer delegates back to Transaction
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Transaction rhs, TransactionColumn which)
        {
            switch (which)
            {
            	
            	
            	case TransactionColumn.Idx:
            		return this.Idx.CompareTo(rhs.Idx);
            		
            		                 
            	
            	
            	case TransactionColumn.TranDate:
            		return this.TranDate.Value.CompareTo(rhs.TranDate.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.TranTime:
            		return this.TranTime.CompareTo(rhs.TranTime);
            		
            		                 
            	
            	
            	case TransactionColumn.TransNum:
            		return this.TransNum.CompareTo(rhs.TransNum);
            		
            		                 
            	
            	
            	case TransactionColumn.TransCode:
            		return this.TransCode.CompareTo(rhs.TransCode);
            		
            		                 
            	
            	
            	case TransactionColumn.Voucher:
            		return this.Voucher.CompareTo(rhs.Voucher);
            		
            		                 
            	
            	
            	case TransactionColumn.Invoice:
            		return this.Invoice.CompareTo(rhs.Invoice);
            		
            		                 
            	
            	
            	case TransactionColumn.Post:
            		return this.Post.Value.CompareTo(rhs.Post.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.ExpId:
            		return this.ExpId.CompareTo(rhs.ExpId);
            		
            		                 
            	
            	
            	case TransactionColumn.ImpId:
            		return this.ImpId.CompareTo(rhs.ImpId);
            		
            		                 
            	
            	
            	case TransactionColumn.GoodsId:
            		return this.GoodsId.CompareTo(rhs.GoodsId);
            		
            		                 
            	
            	
            	case TransactionColumn.KitQty:
            		return this.KitQty.Value.CompareTo(rhs.KitQty.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.KitId:
            		return this.KitId.CompareTo(rhs.KitId);
            		
            		                 
            	
            	
            	case TransactionColumn.Qty:
            		return this.Qty.Value.CompareTo(rhs.Qty.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.UnitSymb:
            		return this.UnitSymb.CompareTo(rhs.UnitSymb);
            		
            		                 
            	
            	
            	case TransactionColumn.Amount:
            		return this.Amount.CompareTo(rhs.Amount);
            		
            		                 
            	
            	
            	case TransactionColumn.Discount:
            		return this.Discount.CompareTo(rhs.Discount);
            		
            		                 
            	
            	
            	case TransactionColumn.CarddiscAmt:
            		return this.CarddiscAmt.Value.CompareTo(rhs.CarddiscAmt.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.VatAmt:
            		return this.VatAmt.CompareTo(rhs.VatAmt);
            		
            		                 
            	
            	
            	case TransactionColumn.Surplus:
            		return this.Surplus.CompareTo(rhs.Surplus);
            		
            		                 
            	
            	
            	case TransactionColumn.CommisAmt:
            		return this.CommisAmt.Value.CompareTo(rhs.CommisAmt.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.ForexCys:
            		return this.ForexCys.CompareTo(rhs.ForexCys);
            		
            		                 
            	
            	
            	case TransactionColumn.ForexRate:
            		return this.ForexRate.Value.CompareTo(rhs.ForexRate.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.ExpiryDt:
            		return this.ExpiryDt.Value.CompareTo(rhs.ExpiryDt.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.UserId:
            		return this.UserId.Value.CompareTo(rhs.UserId.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.Station:
            		return this.Station.Value.CompareTo(rhs.Station.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.CsId:
            		return this.CsId.CompareTo(rhs.CsId);
            		
            		                 
            	
            	
            	case TransactionColumn.CustaxId:
            		return this.CustaxId.CompareTo(rhs.CustaxId);
            		
            		                 
            	
            	
            	case TransactionColumn.SafeNameRef:
            		return this.SafeNameRef.CompareTo(rhs.SafeNameRef);
            		
            		                 
            	
            	
            	case TransactionColumn.Remark:
            		return this.Remark.CompareTo(rhs.Remark);
            		
            		                 
            	
            	
            	case TransactionColumn.Updated:
            		return this.Updated.Value.CompareTo(rhs.Updated.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.MercType:
            		return this.MercType.CompareTo(rhs.MercType);
            		
            		                 
            	
            	
            	case TransactionColumn.TaxCode:
            		return this.TaxCode.CompareTo(rhs.TaxCode);
            		
            		                 
            	
            	
            	case TransactionColumn.VatIncl:
            		return this.VatIncl.Value.CompareTo(rhs.VatIncl.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.Discpervat:
            		return this.Discpervat.Value.CompareTo(rhs.Discpervat.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.DiscIncl:
            		return this.DiscIncl.Value.CompareTo(rhs.DiscIncl.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.Copies:
            		return this.Copies.Value.CompareTo(rhs.Copies.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.Recnum:
            		return this.Recnum.Value.CompareTo(rhs.Recnum.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.CardId:
            		return this.CardId.CompareTo(rhs.CardId);
            		
            		                 
            	
            	
            	case TransactionColumn.Shift:
            		return this.Shift.Value.CompareTo(rhs.Shift.Value);
            		
            		                 
            	
            	
            	case TransactionColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TransactionKey> Members
		
		// member variable for the EntityId property
		private TransactionKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TransactionKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TransactionKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Transaction")
					.Append("|").Append( this.Idx.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{42}{41}- Idx: {0}{41}- TranDate: {1}{41}- TranTime: {2}{41}- TransNum: {3}{41}- TransCode: {4}{41}- Voucher: {5}{41}- Invoice: {6}{41}- Post: {7}{41}- ExpId: {8}{41}- ImpId: {9}{41}- GoodsId: {10}{41}- KitQty: {11}{41}- KitId: {12}{41}- Qty: {13}{41}- UnitSymb: {14}{41}- Amount: {15}{41}- Discount: {16}{41}- CarddiscAmt: {17}{41}- VatAmt: {18}{41}- Surplus: {19}{41}- CommisAmt: {20}{41}- ForexCys: {21}{41}- ForexRate: {22}{41}- ExpiryDt: {23}{41}- UserId: {24}{41}- Station: {25}{41}- CsId: {26}{41}- CustaxId: {27}{41}- SafeNameRef: {28}{41}- Remark: {29}{41}- Updated: {30}{41}- MercType: {31}{41}- TaxCode: {32}{41}- VatIncl: {33}{41}- Discpervat: {34}{41}- DiscIncl: {35}{41}- Copies: {36}{41}- Recnum: {37}{41}- CardId: {38}{41}- Shift: {39}{41}- Status: {40}{41}{43}", 
				this.Idx,
				(this.TranDate == null) ? string.Empty : this.TranDate.ToString(),
				(this.TranTime == null) ? string.Empty : this.TranTime.ToString(),
				(this.TransNum == null) ? string.Empty : this.TransNum.ToString(),
				(this.TransCode == null) ? string.Empty : this.TransCode.ToString(),
				(this.Voucher == null) ? string.Empty : this.Voucher.ToString(),
				(this.Invoice == null) ? string.Empty : this.Invoice.ToString(),
				(this.Post == null) ? string.Empty : this.Post.ToString(),
				(this.ExpId == null) ? string.Empty : this.ExpId.ToString(),
				(this.ImpId == null) ? string.Empty : this.ImpId.ToString(),
				(this.GoodsId == null) ? string.Empty : this.GoodsId.ToString(),
				(this.KitQty == null) ? string.Empty : this.KitQty.ToString(),
				(this.KitId == null) ? string.Empty : this.KitId.ToString(),
				(this.Qty == null) ? string.Empty : this.Qty.ToString(),
				(this.UnitSymb == null) ? string.Empty : this.UnitSymb.ToString(),
				this.Amount,
				this.Discount,
				(this.CarddiscAmt == null) ? string.Empty : this.CarddiscAmt.ToString(),
				this.VatAmt,
				this.Surplus,
				(this.CommisAmt == null) ? string.Empty : this.CommisAmt.ToString(),
				(this.ForexCys == null) ? string.Empty : this.ForexCys.ToString(),
				(this.ForexRate == null) ? string.Empty : this.ForexRate.ToString(),
				(this.ExpiryDt == null) ? string.Empty : this.ExpiryDt.ToString(),
				(this.UserId == null) ? string.Empty : this.UserId.ToString(),
				(this.Station == null) ? string.Empty : this.Station.ToString(),
				(this.CsId == null) ? string.Empty : this.CsId.ToString(),
				(this.CustaxId == null) ? string.Empty : this.CustaxId.ToString(),
				(this.SafeNameRef == null) ? string.Empty : this.SafeNameRef.ToString(),
				(this.Remark == null) ? string.Empty : this.Remark.ToString(),
				(this.Updated == null) ? string.Empty : this.Updated.ToString(),
				(this.MercType == null) ? string.Empty : this.MercType.ToString(),
				(this.TaxCode == null) ? string.Empty : this.TaxCode.ToString(),
				(this.VatIncl == null) ? string.Empty : this.VatIncl.ToString(),
				(this.Discpervat == null) ? string.Empty : this.Discpervat.ToString(),
				(this.DiscIncl == null) ? string.Empty : this.DiscIncl.ToString(),
				(this.Copies == null) ? string.Empty : this.Copies.ToString(),
				(this.Recnum == null) ? string.Empty : this.Recnum.ToString(),
				(this.CardId == null) ? string.Empty : this.CardId.ToString(),
				(this.Shift == null) ? string.Empty : this.Shift.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblTransaction' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TransactionEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// idx : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblTransaction"</remarks>
		public System.Decimal Idx;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// tran_date : 
		/// </summary>
		public System.DateTime? TranDate = null;
		
		/// <summary>
		/// tran_time : 
		/// </summary>
		public System.String TranTime = null;
		
		/// <summary>
		/// trans_num : 
		/// </summary>
		public System.String TransNum = null;
		
		/// <summary>
		/// trans_code : 
		/// </summary>
		public System.String TransCode = null;
		
		/// <summary>
		/// voucher : 
		/// </summary>
		public System.String Voucher = null;
		
		/// <summary>
		/// invoice : 
		/// </summary>
		public System.String Invoice = null;
		
		/// <summary>
		/// post : 
		/// </summary>
		public System.Boolean? Post = null;
		
		/// <summary>
		/// exp_id : 
		/// </summary>
		public System.String ExpId = null;
		
		/// <summary>
		/// imp_id : 
		/// </summary>
		public System.String ImpId = null;
		
		/// <summary>
		/// goods_id : 
		/// </summary>
		public System.String GoodsId = null;
		
		/// <summary>
		/// kit_qty : 
		/// </summary>
		public System.Decimal? KitQty = 0m;
		
		/// <summary>
		/// kit_id : 
		/// </summary>
		public System.String KitId = null;
		
		/// <summary>
		/// qty : 
		/// </summary>
		public System.Decimal? Qty = null;
		
		/// <summary>
		/// unit_symb : 
		/// </summary>
		public System.String UnitSymb = null;
		
		/// <summary>
		/// amount : 
		/// </summary>
		public System.Decimal Amount = 0m;
		
		/// <summary>
		/// discount : 
		/// </summary>
		public System.Decimal Discount = 0m;
		
		/// <summary>
		/// carddisc_amt : 
		/// </summary>
		public System.Decimal? CarddiscAmt = 0m;
		
		/// <summary>
		/// vat_amt : 
		/// </summary>
		public System.Decimal VatAmt = 0m;
		
		/// <summary>
		/// surplus : 
		/// </summary>
		public System.Decimal Surplus = 0m;
		
		/// <summary>
		/// commis_amt : 
		/// </summary>
		public System.Decimal? CommisAmt = 0m;
		
		/// <summary>
		/// forex_cys : 
		/// </summary>
		public System.String ForexCys = null;
		
		/// <summary>
		/// forex_rate : 
		/// </summary>
		public System.Decimal? ForexRate = 1m;
		
		/// <summary>
		/// expiry_dt : 
		/// </summary>
		public System.DateTime? ExpiryDt = null;
		
		/// <summary>
		/// user_id : 
		/// </summary>
		public System.Decimal? UserId = null;
		
		/// <summary>
		/// station : 
		/// </summary>
		public System.Int32? Station = null;
		
		/// <summary>
		/// cs_id : 
		/// </summary>
		public System.String CsId = null;
		
		/// <summary>
		/// custax_id : 
		/// </summary>
		public System.String CustaxId = null;
		
		/// <summary>
		/// ref : 
		/// </summary>
		public System.String SafeNameRef = null;
		
		/// <summary>
		/// remark : 
		/// </summary>
		public System.String Remark = null;
		
		/// <summary>
		/// updated : 
		/// </summary>
		public System.Boolean? Updated = null;
		
		/// <summary>
		/// merc_type : 
		/// </summary>
		public System.String MercType = null;
		
		/// <summary>
		/// tax_code : 
		/// </summary>
		public System.String TaxCode = null;
		
		/// <summary>
		/// vat_incl : 
		/// </summary>
		public System.Boolean? VatIncl = null;
		
		/// <summary>
		/// discpervat : 
		/// </summary>
		public System.Boolean? Discpervat = null;
		
		/// <summary>
		/// disc_incl : 
		/// </summary>
		public System.Boolean? DiscIncl = null;
		
		/// <summary>
		/// copies : 
		/// </summary>
		public System.Decimal? Copies = null;
		
		/// <summary>
		/// recnum : 
		/// </summary>
		public System.Decimal? Recnum = null;
		
		/// <summary>
		/// card_id : 
		/// </summary>
		public System.String CardId = null;
		
		/// <summary>
		/// Shift : 
		/// </summary>
		public System.Int32? Shift = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.Boolean? Status = true;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TransactionEntityData _tmp = new TransactionEntityData();
						
			_tmp.Idx = this.Idx;
			
			_tmp.TranDate = this.TranDate;
			_tmp.TranTime = this.TranTime;
			_tmp.TransNum = this.TransNum;
			_tmp.TransCode = this.TransCode;
			_tmp.Voucher = this.Voucher;
			_tmp.Invoice = this.Invoice;
			_tmp.Post = this.Post;
			_tmp.ExpId = this.ExpId;
			_tmp.ImpId = this.ImpId;
			_tmp.GoodsId = this.GoodsId;
			_tmp.KitQty = this.KitQty;
			_tmp.KitId = this.KitId;
			_tmp.Qty = this.Qty;
			_tmp.UnitSymb = this.UnitSymb;
			_tmp.Amount = this.Amount;
			_tmp.Discount = this.Discount;
			_tmp.CarddiscAmt = this.CarddiscAmt;
			_tmp.VatAmt = this.VatAmt;
			_tmp.Surplus = this.Surplus;
			_tmp.CommisAmt = this.CommisAmt;
			_tmp.ForexCys = this.ForexCys;
			_tmp.ForexRate = this.ForexRate;
			_tmp.ExpiryDt = this.ExpiryDt;
			_tmp.UserId = this.UserId;
			_tmp.Station = this.Station;
			_tmp.CsId = this.CsId;
			_tmp.CustaxId = this.CustaxId;
			_tmp.SafeNameRef = this.SafeNameRef;
			_tmp.Remark = this.Remark;
			_tmp.Updated = this.Updated;
			_tmp.MercType = this.MercType;
			_tmp.TaxCode = this.TaxCode;
			_tmp.VatIncl = this.VatIncl;
			_tmp.Discpervat = this.Discpervat;
			_tmp.DiscIncl = this.DiscIncl;
			_tmp.Copies = this.Copies;
			_tmp.Recnum = this.Recnum;
			_tmp.CardId = this.CardId;
			_tmp.Shift = this.Shift;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TransactionEntityData _tmp = new TransactionEntityData();
						
			_tmp.Idx = this.Idx;
			
			_tmp.TranDate = this.TranDate;
			_tmp.TranTime = this.TranTime;
			_tmp.TransNum = this.TransNum;
			_tmp.TransCode = this.TransCode;
			_tmp.Voucher = this.Voucher;
			_tmp.Invoice = this.Invoice;
			_tmp.Post = this.Post;
			_tmp.ExpId = this.ExpId;
			_tmp.ImpId = this.ImpId;
			_tmp.GoodsId = this.GoodsId;
			_tmp.KitQty = this.KitQty;
			_tmp.KitId = this.KitId;
			_tmp.Qty = this.Qty;
			_tmp.UnitSymb = this.UnitSymb;
			_tmp.Amount = this.Amount;
			_tmp.Discount = this.Discount;
			_tmp.CarddiscAmt = this.CarddiscAmt;
			_tmp.VatAmt = this.VatAmt;
			_tmp.Surplus = this.Surplus;
			_tmp.CommisAmt = this.CommisAmt;
			_tmp.ForexCys = this.ForexCys;
			_tmp.ForexRate = this.ForexRate;
			_tmp.ExpiryDt = this.ExpiryDt;
			_tmp.UserId = this.UserId;
			_tmp.Station = this.Station;
			_tmp.CsId = this.CsId;
			_tmp.CustaxId = this.CustaxId;
			_tmp.SafeNameRef = this.SafeNameRef;
			_tmp.Remark = this.Remark;
			_tmp.Updated = this.Updated;
			_tmp.MercType = this.MercType;
			_tmp.TaxCode = this.TaxCode;
			_tmp.VatIncl = this.VatIncl;
			_tmp.Discpervat = this.Discpervat;
			_tmp.DiscIncl = this.DiscIncl;
			_tmp.Copies = this.Copies;
			_tmp.Recnum = this.Recnum;
			_tmp.CardId = this.CardId;
			_tmp.Shift = this.Shift;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TransactionColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TransactionColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TransactionColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TransactionColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TransactionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TransactionColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				TransactionEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TransactionEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TransactionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TransactionColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TransactionEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TransactionEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TransactionEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Transaction"/> object.
	/// </remarks>
	public class TransactionEventArgs : System.EventArgs
	{
		private TransactionColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TransactionEventArgs class.
		///</summary>
		public TransactionEventArgs(TransactionColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TransactionEventArgs class.
		///</summary>
		public TransactionEventArgs(TransactionColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TransactionColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TransactionColumn" />
		public TransactionColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Transaction related events.
	///</summary>
	public delegate void TransactionEventHandler(object sender, TransactionEventArgs e);
	
	#region TransactionComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TransactionComparer : System.Collections.Generic.IComparer<Transaction>
	{
		TransactionColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TransactionComparer"/> class.
        /// </summary>
		public TransactionComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TransactionComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TransactionComparer(TransactionColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Transaction"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Transaction"/> to compare.</param>
        /// <param name="b">The second <c>Transaction</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Transaction a, Transaction b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Transaction entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Transaction a, Transaction b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TransactionColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TransactionKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Transaction"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TransactionKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TransactionKey class.
		/// </summary>
		public TransactionKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TransactionKey class.
		/// </summary>
		public TransactionKey(TransactionBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Idx = entity.Idx;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TransactionKey class.
		/// </summary>
		public TransactionKey(System.Decimal _idx)
		{
			#region Init Properties

			this.Idx = _idx;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TransactionBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TransactionBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Idx property
		private System.Decimal _idx;
		
		/// <summary>
		/// Gets or sets the Idx property.
		/// </summary>
		public System.Decimal Idx
		{
			get { return _idx; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Idx = value;
				
				_idx = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Idx = ( values["Idx"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["Idx"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Idx", Idx);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Idx: {0}{1}",
								Idx,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TransactionColumn Enum
	
	/// <summary>
	/// Enumerate the Transaction columns.
	/// </summary>
	[Serializable]
	public enum TransactionColumn : int
	{
		/// <summary>
		/// Idx : 
		/// </summary>
		[EnumTextValue("Idx")]
		[ColumnEnum("idx", typeof(System.Decimal), System.Data.DbType.Decimal, true, true, false)]
		Idx = 1,
		/// <summary>
		/// TranDate : 
		/// </summary>
		[EnumTextValue("Tran Date")]
		[ColumnEnum("tran_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TranDate = 2,
		/// <summary>
		/// TranTime : 
		/// </summary>
		[EnumTextValue("Tran Time")]
		[ColumnEnum("tran_time", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 5)]
		TranTime = 3,
		/// <summary>
		/// TransNum : 
		/// </summary>
		[EnumTextValue("Trans Num")]
		[ColumnEnum("trans_num", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 12)]
		TransNum = 4,
		/// <summary>
		/// TransCode : 
		/// </summary>
		[EnumTextValue("Trans Code")]
		[ColumnEnum("trans_code", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 2)]
		TransCode = 5,
		/// <summary>
		/// Voucher : 
		/// </summary>
		[EnumTextValue("Voucher")]
		[ColumnEnum("voucher", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 15)]
		Voucher = 6,
		/// <summary>
		/// Invoice : 
		/// </summary>
		[EnumTextValue("Invoice")]
		[ColumnEnum("invoice", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 10)]
		Invoice = 7,
		/// <summary>
		/// Post : 
		/// </summary>
		[EnumTextValue("Post")]
		[ColumnEnum("post", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Post = 8,
		/// <summary>
		/// ExpId : 
		/// </summary>
		[EnumTextValue("Exp Id")]
		[ColumnEnum("exp_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 5)]
		ExpId = 9,
		/// <summary>
		/// ImpId : 
		/// </summary>
		[EnumTextValue("Imp Id")]
		[ColumnEnum("imp_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 5)]
		ImpId = 10,
		/// <summary>
		/// GoodsId : 
		/// </summary>
		[EnumTextValue("Goods Id")]
		[ColumnEnum("goods_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 6)]
		GoodsId = 11,
		/// <summary>
		/// KitQty : 
		/// </summary>
		[EnumTextValue("Kit Qty")]
		[ColumnEnum("kit_qty", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		KitQty = 12,
		/// <summary>
		/// KitId : 
		/// </summary>
		[EnumTextValue("Kit Id")]
		[ColumnEnum("kit_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 6)]
		KitId = 13,
		/// <summary>
		/// Qty : 
		/// </summary>
		[EnumTextValue("Qty")]
		[ColumnEnum("qty", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Qty = 14,
		/// <summary>
		/// UnitSymb : 
		/// </summary>
		[EnumTextValue("Unit Symb")]
		[ColumnEnum("unit_symb", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 3)]
		UnitSymb = 15,
		/// <summary>
		/// Amount : 
		/// </summary>
		[EnumTextValue("Amount")]
		[ColumnEnum("amount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Amount = 16,
		/// <summary>
		/// Discount : 
		/// </summary>
		[EnumTextValue("Discount")]
		[ColumnEnum("discount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Discount = 17,
		/// <summary>
		/// CarddiscAmt : 
		/// </summary>
		[EnumTextValue("Carddisc Amt")]
		[ColumnEnum("carddisc_amt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CarddiscAmt = 18,
		/// <summary>
		/// VatAmt : 
		/// </summary>
		[EnumTextValue("Vat Amt")]
		[ColumnEnum("vat_amt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		VatAmt = 19,
		/// <summary>
		/// Surplus : 
		/// </summary>
		[EnumTextValue("Surplus")]
		[ColumnEnum("surplus", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Surplus = 20,
		/// <summary>
		/// CommisAmt : 
		/// </summary>
		[EnumTextValue("Commis Amt")]
		[ColumnEnum("commis_amt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CommisAmt = 21,
		/// <summary>
		/// ForexCys : 
		/// </summary>
		[EnumTextValue("Forex Cys")]
		[ColumnEnum("forex_cys", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 3)]
		ForexCys = 22,
		/// <summary>
		/// ForexRate : 
		/// </summary>
		[EnumTextValue("Forex Rate")]
		[ColumnEnum("forex_rate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ForexRate = 23,
		/// <summary>
		/// ExpiryDt : 
		/// </summary>
		[EnumTextValue("Expiry Dt")]
		[ColumnEnum("expiry_dt", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExpiryDt = 24,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("User Id")]
		[ColumnEnum("user_id", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		UserId = 25,
		/// <summary>
		/// Station : 
		/// </summary>
		[EnumTextValue("Station")]
		[ColumnEnum("station", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Station = 26,
		/// <summary>
		/// CsId : 
		/// </summary>
		[EnumTextValue("Cs Id")]
		[ColumnEnum("cs_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 5)]
		CsId = 27,
		/// <summary>
		/// CustaxId : 
		/// </summary>
		[EnumTextValue("Custax Id")]
		[ColumnEnum("custax_id", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 30)]
		CustaxId = 28,
		/// <summary>
		/// SafeNameRef : 
		/// </summary>
		[EnumTextValue("Ref")]
		[ColumnEnum("ref", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 12)]
		SafeNameRef = 29,
		/// <summary>
		/// Remark : 
		/// </summary>
		[EnumTextValue("Remark")]
		[ColumnEnum("remark", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Remark = 30,
		/// <summary>
		/// Updated : 
		/// </summary>
		[EnumTextValue("Updated")]
		[ColumnEnum("updated", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Updated = 31,
		/// <summary>
		/// MercType : 
		/// </summary>
		[EnumTextValue("Merc Type")]
		[ColumnEnum("merc_type", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 2)]
		MercType = 32,
		/// <summary>
		/// TaxCode : 
		/// </summary>
		[EnumTextValue("Tax Code")]
		[ColumnEnum("tax_code", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 3)]
		TaxCode = 33,
		/// <summary>
		/// VatIncl : 
		/// </summary>
		[EnumTextValue("Vat Incl")]
		[ColumnEnum("vat_incl", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		VatIncl = 34,
		/// <summary>
		/// Discpervat : 
		/// </summary>
		[EnumTextValue("Discpervat")]
		[ColumnEnum("discpervat", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Discpervat = 35,
		/// <summary>
		/// DiscIncl : 
		/// </summary>
		[EnumTextValue("Disc Incl")]
		[ColumnEnum("disc_incl", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		DiscIncl = 36,
		/// <summary>
		/// Copies : 
		/// </summary>
		[EnumTextValue("Copies")]
		[ColumnEnum("copies", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Copies = 37,
		/// <summary>
		/// Recnum : 
		/// </summary>
		[EnumTextValue("Recnum")]
		[ColumnEnum("recnum", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Recnum = 38,
		/// <summary>
		/// CardId : 
		/// </summary>
		[EnumTextValue("Card Id")]
		[ColumnEnum("card_id", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 16)]
		CardId = 39,
		/// <summary>
		/// Shift : 
		/// </summary>
		[EnumTextValue("Shift")]
		[ColumnEnum("Shift", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Shift = 40,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Status = 41
	}//End enum

	#endregion TransactionColumn Enum

} // end namespace
