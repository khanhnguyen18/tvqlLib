
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file AccTrans.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblAccTrans' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class AccTransBase : EntityBase, IAccTrans, IEntityId<AccTransKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AccTransEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AccTransEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AccTransEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AccTrans> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccTransEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccTransEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccTransBase"/> instance.
		///</summary>
		public AccTransBase()
		{
			this.entityData = new AccTransEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccTransBase"/> instance.
		///</summary>
		///<param name="_tranDate"></param>
		///<param name="_tranTime"></param>
		///<param name="_efDate"></param>
		///<param name="_transNum"></param>
		///<param name="_voucher"></param>
		///<param name="_transCode"></param>
		///<param name="_accountId"></param>
		///<param name="_dbAmount"></param>
		///<param name="_crAmount"></param>
		///<param name="_userId"></param>
		///<param name="_corrAcc"></param>
		///<param name="_remark"></param>
		///<param name="_name"></param>
		///<param name="_address"></param>
		///<param name="_personId"></param>
		///<param name="_updated"></param>
		///<param name="_recnum"></param>
		///<param name="_status"></param>
		public AccTransBase(System.DateTime _tranDate, System.String _tranTime, System.DateTime? _efDate, 
			System.String _transNum, System.String _voucher, System.String _transCode, System.String _accountId, 
			System.Decimal _dbAmount, System.Decimal _crAmount, System.Decimal _userId, System.String _corrAcc, 
			System.String _remark, System.String _name, System.String _address, System.String _personId, 
			System.Boolean _updated, System.Decimal? _recnum, System.Boolean _status)
		{
			this.entityData = new AccTransEntityData();
			this.backupData = null;

			this.TranDate = _tranDate;
			this.TranTime = _tranTime;
			this.EfDate = _efDate;
			this.TransNum = _transNum;
			this.Voucher = _voucher;
			this.TransCode = _transCode;
			this.AccountId = _accountId;
			this.DbAmount = _dbAmount;
			this.CrAmount = _crAmount;
			this.UserId = _userId;
			this.CorrAcc = _corrAcc;
			this.Remark = _remark;
			this.Name = _name;
			this.Address = _address;
			this.PersonId = _personId;
			this.Updated = _updated;
			this.Recnum = _recnum;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AccTrans"/> instance.
		///</summary>
		///<param name="_tranDate"></param>
		///<param name="_tranTime"></param>
		///<param name="_efDate"></param>
		///<param name="_transNum"></param>
		///<param name="_voucher"></param>
		///<param name="_transCode"></param>
		///<param name="_accountId"></param>
		///<param name="_dbAmount"></param>
		///<param name="_crAmount"></param>
		///<param name="_userId"></param>
		///<param name="_corrAcc"></param>
		///<param name="_remark"></param>
		///<param name="_name"></param>
		///<param name="_address"></param>
		///<param name="_personId"></param>
		///<param name="_updated"></param>
		///<param name="_recnum"></param>
		///<param name="_status"></param>
		public static AccTrans CreateAccTrans(System.DateTime _tranDate, System.String _tranTime, System.DateTime? _efDate, 
			System.String _transNum, System.String _voucher, System.String _transCode, System.String _accountId, 
			System.Decimal _dbAmount, System.Decimal _crAmount, System.Decimal _userId, System.String _corrAcc, 
			System.String _remark, System.String _name, System.String _address, System.String _personId, 
			System.Boolean _updated, System.Decimal? _recnum, System.Boolean _status)
		{
			AccTrans newAccTrans = new AccTrans();
			newAccTrans.TranDate = _tranDate;
			newAccTrans.TranTime = _tranTime;
			newAccTrans.EfDate = _efDate;
			newAccTrans.TransNum = _transNum;
			newAccTrans.Voucher = _voucher;
			newAccTrans.TransCode = _transCode;
			newAccTrans.AccountId = _accountId;
			newAccTrans.DbAmount = _dbAmount;
			newAccTrans.CrAmount = _crAmount;
			newAccTrans.UserId = _userId;
			newAccTrans.CorrAcc = _corrAcc;
			newAccTrans.Remark = _remark;
			newAccTrans.Name = _name;
			newAccTrans.Address = _address;
			newAccTrans.PersonId = _personId;
			newAccTrans.Updated = _updated;
			newAccTrans.Recnum = _recnum;
			newAccTrans.Status = _status;
			return newAccTrans;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Decimal Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(AccTransColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TranDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime TranDate
		{
			get
			{
				return this.entityData.TranDate; 
			}
			
			set
			{
				if (this.entityData.TranDate == value)
					return;
				
                OnPropertyChanging("TranDate");                    
				OnColumnChanging(AccTransColumn.TranDate, this.entityData.TranDate);
				this.entityData.TranDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.TranDate, this.entityData.TranDate);
				OnPropertyChanged("TranDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TranTime property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String TranTime
		{
			get
			{
				return this.entityData.TranTime; 
			}
			
			set
			{
				if (this.entityData.TranTime == value)
					return;
				
                OnPropertyChanging("TranTime");                    
				OnColumnChanging(AccTransColumn.TranTime, this.entityData.TranTime);
				this.entityData.TranTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.TranTime, this.entityData.TranTime);
				OnPropertyChanged("TranTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EfDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EfDate
		{
			get
			{
				return this.entityData.EfDate; 
			}
			
			set
			{
				if (this.entityData.EfDate == value)
					return;
				
                OnPropertyChanging("EfDate");                    
				OnColumnChanging(AccTransColumn.EfDate, this.entityData.EfDate);
				this.entityData.EfDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.EfDate, this.entityData.EfDate);
				OnPropertyChanged("EfDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransNum property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 12)]
		public virtual System.String TransNum
		{
			get
			{
				return this.entityData.TransNum; 
			}
			
			set
			{
				if (this.entityData.TransNum == value)
					return;
				
                OnPropertyChanging("TransNum");                    
				OnColumnChanging(AccTransColumn.TransNum, this.entityData.TransNum);
				this.entityData.TransNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.TransNum, this.entityData.TransNum);
				OnPropertyChanged("TransNum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Voucher property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String Voucher
		{
			get
			{
				return this.entityData.Voucher; 
			}
			
			set
			{
				if (this.entityData.Voucher == value)
					return;
				
                OnPropertyChanging("Voucher");                    
				OnColumnChanging(AccTransColumn.Voucher, this.entityData.Voucher);
				this.entityData.Voucher = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.Voucher, this.entityData.Voucher);
				OnPropertyChanged("Voucher");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransCode property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 2)]
		public virtual System.String TransCode
		{
			get
			{
				return this.entityData.TransCode; 
			}
			
			set
			{
				if (this.entityData.TransCode == value)
					return;
				
                OnPropertyChanging("TransCode");                    
				OnColumnChanging(AccTransColumn.TransCode, this.entityData.TransCode);
				this.entityData.TransCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.TransCode, this.entityData.TransCode);
				OnPropertyChanged("TransCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 9)]
		public virtual System.String AccountId
		{
			get
			{
				return this.entityData.AccountId; 
			}
			
			set
			{
				if (this.entityData.AccountId == value)
					return;
				
                OnPropertyChanging("AccountId");                    
				OnColumnChanging(AccTransColumn.AccountId, this.entityData.AccountId);
				this.entityData.AccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.AccountId, this.entityData.AccountId);
				OnPropertyChanged("AccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DbAmount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal DbAmount
		{
			get
			{
				return this.entityData.DbAmount; 
			}
			
			set
			{
				if (this.entityData.DbAmount == value)
					return;
				
                OnPropertyChanging("DbAmount");                    
				OnColumnChanging(AccTransColumn.DbAmount, this.entityData.DbAmount);
				this.entityData.DbAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.DbAmount, this.entityData.DbAmount);
				OnPropertyChanged("DbAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CrAmount property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal CrAmount
		{
			get
			{
				return this.entityData.CrAmount; 
			}
			
			set
			{
				if (this.entityData.CrAmount == value)
					return;
				
                OnPropertyChanging("CrAmount");                    
				OnColumnChanging(AccTransColumn.CrAmount, this.entityData.CrAmount);
				this.entityData.CrAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.CrAmount, this.entityData.CrAmount);
				OnPropertyChanged("CrAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
				
                OnPropertyChanging("UserId");                    
				OnColumnChanging(AccTransColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CorrAcc property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 9)]
		public virtual System.String CorrAcc
		{
			get
			{
				return this.entityData.CorrAcc; 
			}
			
			set
			{
				if (this.entityData.CorrAcc == value)
					return;
				
                OnPropertyChanging("CorrAcc");                    
				OnColumnChanging(AccTransColumn.CorrAcc, this.entityData.CorrAcc);
				this.entityData.CorrAcc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.CorrAcc, this.entityData.CorrAcc);
				OnPropertyChanged("CorrAcc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Remark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String Remark
		{
			get
			{
				return this.entityData.Remark; 
			}
			
			set
			{
				if (this.entityData.Remark == value)
					return;
				
                OnPropertyChanging("Remark");                    
				OnColumnChanging(AccTransColumn.Remark, this.entityData.Remark);
				this.entityData.Remark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.Remark, this.entityData.Remark);
				OnPropertyChanged("Remark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
				
                OnPropertyChanging("Name");                    
				OnColumnChanging(AccTransColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(AccTransColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PersonId property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PersonId
		{
			get
			{
				return this.entityData.PersonId; 
			}
			
			set
			{
				if (this.entityData.PersonId == value)
					return;
				
                OnPropertyChanging("PersonId");                    
				OnColumnChanging(AccTransColumn.PersonId, this.entityData.PersonId);
				this.entityData.PersonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.PersonId, this.entityData.PersonId);
				OnPropertyChanged("PersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Updated property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Updated
		{
			get
			{
				return this.entityData.Updated; 
			}
			
			set
			{
				if (this.entityData.Updated == value)
					return;
				
                OnPropertyChanging("Updated");                    
				OnColumnChanging(AccTransColumn.Updated, this.entityData.Updated);
				this.entityData.Updated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.Updated, this.entityData.Updated);
				OnPropertyChanged("Updated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Recnum property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Recnum
		{
			get
			{
				return this.entityData.Recnum; 
			}
			
			set
			{
				if (this.entityData.Recnum == value)
					return;
				
                OnPropertyChanging("Recnum");                    
				OnColumnChanging(AccTransColumn.Recnum, this.entityData.Recnum);
				this.entityData.Recnum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.Recnum, this.entityData.Recnum);
				OnPropertyChanged("Recnum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(AccTransColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccTransColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TranTime", "Tran Time", 5));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TransNum", "Trans Num"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransNum", "Trans Num", 12));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Voucher", "Voucher"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Voucher", "Voucher", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TransCode", "Trans Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransCode", "Trans Code", 2));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("AccountId", "Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AccountId", "Account Id", 9));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CorrAcc", "Corr Acc"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CorrAcc", "Corr Acc", 9));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Remark", "Remark"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Remark", "Remark", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PersonId", "Person Id", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblAccTrans"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "tran_date", "tran_time", "ef_date", "trans_num", "voucher", "trans_code", "account_id", "db_amount", "cr_amount", "user_id", "corr_acc", "remark", "name", "address", "person_id", "updated", "recnum", "status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccTransEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AccTrans) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AccTrans>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AccTrans);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AccTrans Entity 
		///</summary>
		protected virtual AccTrans Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			AccTrans copy = new AccTrans();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.TranDate = this.TranDate;
				copy.TranTime = this.TranTime;
				copy.EfDate = this.EfDate;
				copy.TransNum = this.TransNum;
				copy.Voucher = this.Voucher;
				copy.TransCode = this.TransCode;
				copy.AccountId = this.AccountId;
				copy.DbAmount = this.DbAmount;
				copy.CrAmount = this.CrAmount;
				copy.UserId = this.UserId;
				copy.CorrAcc = this.CorrAcc;
				copy.Remark = this.Remark;
				copy.Name = this.Name;
				copy.Address = this.Address;
				copy.PersonId = this.PersonId;
				copy.Updated = this.Updated;
				copy.Recnum = this.Recnum;
				copy.Status = this.Status;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed AccTrans Entity 
		///</summary>
		public virtual AccTrans Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed AccTrans Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AccTrans DeepCopy()
		{
			return EntityHelper.Clone<AccTrans>(this as AccTrans);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AccTransEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new AccTransEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AccTransEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AccTransColumn column)
		{
			switch(column)
			{
					case AccTransColumn.Id:
					return entityData.Id != _originalData.Id;
					case AccTransColumn.TranDate:
					return entityData.TranDate != _originalData.TranDate;
					case AccTransColumn.TranTime:
					return entityData.TranTime != _originalData.TranTime;
					case AccTransColumn.EfDate:
					return entityData.EfDate != _originalData.EfDate;
					case AccTransColumn.TransNum:
					return entityData.TransNum != _originalData.TransNum;
					case AccTransColumn.Voucher:
					return entityData.Voucher != _originalData.Voucher;
					case AccTransColumn.TransCode:
					return entityData.TransCode != _originalData.TransCode;
					case AccTransColumn.AccountId:
					return entityData.AccountId != _originalData.AccountId;
					case AccTransColumn.DbAmount:
					return entityData.DbAmount != _originalData.DbAmount;
					case AccTransColumn.CrAmount:
					return entityData.CrAmount != _originalData.CrAmount;
					case AccTransColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case AccTransColumn.CorrAcc:
					return entityData.CorrAcc != _originalData.CorrAcc;
					case AccTransColumn.Remark:
					return entityData.Remark != _originalData.Remark;
					case AccTransColumn.Name:
					return entityData.Name != _originalData.Name;
					case AccTransColumn.Address:
					return entityData.Address != _originalData.Address;
					case AccTransColumn.PersonId:
					return entityData.PersonId != _originalData.PersonId;
					case AccTransColumn.Updated:
					return entityData.Updated != _originalData.Updated;
					case AccTransColumn.Recnum:
					return entityData.Recnum != _originalData.Recnum;
					case AccTransColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< AccTransColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.TranDate != _originalData.TranDate;
			result = result || entityData.TranTime != _originalData.TranTime;
			result = result || entityData.EfDate != _originalData.EfDate;
			result = result || entityData.TransNum != _originalData.TransNum;
			result = result || entityData.Voucher != _originalData.Voucher;
			result = result || entityData.TransCode != _originalData.TransCode;
			result = result || entityData.AccountId != _originalData.AccountId;
			result = result || entityData.DbAmount != _originalData.DbAmount;
			result = result || entityData.CrAmount != _originalData.CrAmount;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.CorrAcc != _originalData.CorrAcc;
			result = result || entityData.Remark != _originalData.Remark;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.PersonId != _originalData.PersonId;
			result = result || entityData.Updated != _originalData.Updated;
			result = result || entityData.Recnum != _originalData.Recnum;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a AccTrans Entity with the original data.
		///</summary>
		public AccTrans GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateAccTrans(
				_originalData.TranDate,
				_originalData.TranTime,
				_originalData.EfDate,
				_originalData.TransNum,
				_originalData.Voucher,
				_originalData.TransCode,
				_originalData.AccountId,
				_originalData.DbAmount,
				_originalData.CrAmount,
				_originalData.UserId,
				_originalData.CorrAcc,
				_originalData.Remark,
				_originalData.Name,
				_originalData.Address,
				_originalData.PersonId,
				_originalData.Updated,
				_originalData.Recnum,
				_originalData.Status
				);
				
			return (AccTrans)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AccTransBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is AccTransBase)
				return ValueEquals(this, (AccTransBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AccTransBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.TranDate.GetHashCode() ^ 
					((this.TranTime == null) ? string.Empty : this.TranTime.ToString()).GetHashCode() ^ 
					((this.EfDate == null) ? string.Empty : this.EfDate.ToString()).GetHashCode() ^ 
					this.TransNum.GetHashCode() ^ 
					this.Voucher.GetHashCode() ^ 
					this.TransCode.GetHashCode() ^ 
					this.AccountId.GetHashCode() ^ 
					this.DbAmount.GetHashCode() ^ 
					this.CrAmount.GetHashCode() ^ 
					this.UserId.GetHashCode() ^ 
					this.CorrAcc.GetHashCode() ^ 
					this.Remark.GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.PersonId == null) ? string.Empty : this.PersonId.ToString()).GetHashCode() ^ 
					this.Updated.GetHashCode() ^ 
					((this.Recnum == null) ? string.Empty : this.Recnum.ToString()).GetHashCode() ^ 
					this.Status.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccTransBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccTransBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="AccTransBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="AccTransBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccTransBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(AccTransBase Object1, AccTransBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.TranDate != Object2.TranDate)
				equal = false;
			if ( Object1.TranTime != null && Object2.TranTime != null )
			{
				if (Object1.TranTime != Object2.TranTime)
					equal = false;
			}
			else if (Object1.TranTime == null ^ Object2.TranTime == null )
			{
				equal = false;
			}
			if ( Object1.EfDate != null && Object2.EfDate != null )
			{
				if (Object1.EfDate != Object2.EfDate)
					equal = false;
			}
			else if (Object1.EfDate == null ^ Object2.EfDate == null )
			{
				equal = false;
			}
			if (Object1.TransNum != Object2.TransNum)
				equal = false;
			if (Object1.Voucher != Object2.Voucher)
				equal = false;
			if (Object1.TransCode != Object2.TransCode)
				equal = false;
			if (Object1.AccountId != Object2.AccountId)
				equal = false;
			if (Object1.DbAmount != Object2.DbAmount)
				equal = false;
			if (Object1.CrAmount != Object2.CrAmount)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.CorrAcc != Object2.CorrAcc)
				equal = false;
			if (Object1.Remark != Object2.Remark)
				equal = false;
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.PersonId != null && Object2.PersonId != null )
			{
				if (Object1.PersonId != Object2.PersonId)
					equal = false;
			}
			else if (Object1.PersonId == null ^ Object2.PersonId == null )
			{
				equal = false;
			}
			if (Object1.Updated != Object2.Updated)
				equal = false;
			if ( Object1.Recnum != null && Object2.Recnum != null )
			{
				if (Object1.Recnum != Object2.Recnum)
					equal = false;
			}
			else if (Object1.Recnum == null ^ Object2.Recnum == null )
			{
				equal = false;
			}
			if (Object1.Status != Object2.Status)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AccTransBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AccTransComparer GetComparer()
        {
            return new AccTransComparer();
        }
        */

        // Comparer delegates back to AccTrans
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AccTrans rhs, AccTransColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccTransColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case AccTransColumn.TranDate:
            		return this.TranDate.CompareTo(rhs.TranDate);
            		
            		                 
            	
            	
            	case AccTransColumn.TranTime:
            		return this.TranTime.CompareTo(rhs.TranTime);
            		
            		                 
            	
            	
            	case AccTransColumn.EfDate:
            		return this.EfDate.Value.CompareTo(rhs.EfDate.Value);
            		
            		                 
            	
            	
            	case AccTransColumn.TransNum:
            		return this.TransNum.CompareTo(rhs.TransNum);
            		
            		                 
            	
            	
            	case AccTransColumn.Voucher:
            		return this.Voucher.CompareTo(rhs.Voucher);
            		
            		                 
            	
            	
            	case AccTransColumn.TransCode:
            		return this.TransCode.CompareTo(rhs.TransCode);
            		
            		                 
            	
            	
            	case AccTransColumn.AccountId:
            		return this.AccountId.CompareTo(rhs.AccountId);
            		
            		                 
            	
            	
            	case AccTransColumn.DbAmount:
            		return this.DbAmount.CompareTo(rhs.DbAmount);
            		
            		                 
            	
            	
            	case AccTransColumn.CrAmount:
            		return this.CrAmount.CompareTo(rhs.CrAmount);
            		
            		                 
            	
            	
            	case AccTransColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case AccTransColumn.CorrAcc:
            		return this.CorrAcc.CompareTo(rhs.CorrAcc);
            		
            		                 
            	
            	
            	case AccTransColumn.Remark:
            		return this.Remark.CompareTo(rhs.Remark);
            		
            		                 
            	
            	
            	case AccTransColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case AccTransColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case AccTransColumn.PersonId:
            		return this.PersonId.CompareTo(rhs.PersonId);
            		
            		                 
            	
            	
            	case AccTransColumn.Updated:
            		return this.Updated.CompareTo(rhs.Updated);
            		
            		                 
            	
            	
            	case AccTransColumn.Recnum:
            		return this.Recnum.Value.CompareTo(rhs.Recnum.Value);
            		
            		                 
            	
            	
            	case AccTransColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccTransKey> Members
		
		// member variable for the EntityId property
		private AccTransKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AccTransKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccTransKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AccTrans")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- Id: {0}{19}- TranDate: {1}{19}- TranTime: {2}{19}- EfDate: {3}{19}- TransNum: {4}{19}- Voucher: {5}{19}- TransCode: {6}{19}- AccountId: {7}{19}- DbAmount: {8}{19}- CrAmount: {9}{19}- UserId: {10}{19}- CorrAcc: {11}{19}- Remark: {12}{19}- Name: {13}{19}- Address: {14}{19}- PersonId: {15}{19}- Updated: {16}{19}- Recnum: {17}{19}- Status: {18}{19}{21}", 
				this.Id,
				this.TranDate,
				(this.TranTime == null) ? string.Empty : this.TranTime.ToString(),
				(this.EfDate == null) ? string.Empty : this.EfDate.ToString(),
				this.TransNum,
				this.Voucher,
				this.TransCode,
				this.AccountId,
				this.DbAmount,
				this.CrAmount,
				this.UserId,
				this.CorrAcc,
				this.Remark,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.PersonId == null) ? string.Empty : this.PersonId.ToString(),
				this.Updated,
				(this.Recnum == null) ? string.Empty : this.Recnum.ToString(),
				this.Status,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblAccTrans' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AccTransEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblAccTrans"</remarks>
		public System.Decimal Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// tran_date : 
		/// </summary>
		public System.DateTime TranDate = DateTime.MinValue;
		
		/// <summary>
		/// tran_time : 
		/// </summary>
		public System.String TranTime = null;
		
		/// <summary>
		/// ef_date : 
		/// </summary>
		public System.DateTime? EfDate = null;
		
		/// <summary>
		/// trans_num : 
		/// </summary>
		public System.String TransNum = string.Empty;
		
		/// <summary>
		/// voucher : 
		/// </summary>
		public System.String Voucher = string.Empty;
		
		/// <summary>
		/// trans_code : 
		/// </summary>
		public System.String TransCode = string.Empty;
		
		/// <summary>
		/// account_id : 
		/// </summary>
		public System.String AccountId = string.Empty;
		
		/// <summary>
		/// db_amount : 
		/// </summary>
		public System.Decimal DbAmount = 0m;
		
		/// <summary>
		/// cr_amount : 
		/// </summary>
		public System.Decimal CrAmount = 0m;
		
		/// <summary>
		/// user_id : 
		/// </summary>
		public System.Decimal UserId = 0m;
		
		/// <summary>
		/// corr_acc : 
		/// </summary>
		public System.String CorrAcc = string.Empty;
		
		/// <summary>
		/// remark : 
		/// </summary>
		public System.String Remark = string.Empty;
		
		/// <summary>
		/// name : 
		/// </summary>
		public System.String Name = null;
		
		/// <summary>
		/// address : 
		/// </summary>
		public System.String Address = null;
		
		/// <summary>
		/// person_id : 
		/// </summary>
		public System.String PersonId = null;
		
		/// <summary>
		/// updated : 
		/// </summary>
		public System.Boolean Updated = false;
		
		/// <summary>
		/// recnum : 
		/// </summary>
		public System.Decimal? Recnum = 0m;
		
		/// <summary>
		/// status : 
		/// </summary>
		public System.Boolean Status = true;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AccTransEntityData _tmp = new AccTransEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TranDate = this.TranDate;
			_tmp.TranTime = this.TranTime;
			_tmp.EfDate = this.EfDate;
			_tmp.TransNum = this.TransNum;
			_tmp.Voucher = this.Voucher;
			_tmp.TransCode = this.TransCode;
			_tmp.AccountId = this.AccountId;
			_tmp.DbAmount = this.DbAmount;
			_tmp.CrAmount = this.CrAmount;
			_tmp.UserId = this.UserId;
			_tmp.CorrAcc = this.CorrAcc;
			_tmp.Remark = this.Remark;
			_tmp.Name = this.Name;
			_tmp.Address = this.Address;
			_tmp.PersonId = this.PersonId;
			_tmp.Updated = this.Updated;
			_tmp.Recnum = this.Recnum;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			AccTransEntityData _tmp = new AccTransEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TranDate = this.TranDate;
			_tmp.TranTime = this.TranTime;
			_tmp.EfDate = this.EfDate;
			_tmp.TransNum = this.TransNum;
			_tmp.Voucher = this.Voucher;
			_tmp.TransCode = this.TransCode;
			_tmp.AccountId = this.AccountId;
			_tmp.DbAmount = this.DbAmount;
			_tmp.CrAmount = this.CrAmount;
			_tmp.UserId = this.UserId;
			_tmp.CorrAcc = this.CorrAcc;
			_tmp.Remark = this.Remark;
			_tmp.Name = this.Name;
			_tmp.Address = this.Address;
			_tmp.PersonId = this.PersonId;
			_tmp.Updated = this.Updated;
			_tmp.Recnum = this.Recnum;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccTransColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(AccTransColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccTransColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(AccTransColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccTransColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(AccTransColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				AccTransEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccTransEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccTransColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(AccTransColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccTransEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccTransEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AccTransEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AccTrans"/> object.
	/// </remarks>
	public class AccTransEventArgs : System.EventArgs
	{
		private AccTransColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AccTransEventArgs class.
		///</summary>
		public AccTransEventArgs(AccTransColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccTransEventArgs class.
		///</summary>
		public AccTransEventArgs(AccTransColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AccTransColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccTransColumn" />
		public AccTransColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AccTrans related events.
	///</summary>
	public delegate void AccTransEventHandler(object sender, AccTransEventArgs e);
	
	#region AccTransComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccTransComparer : System.Collections.Generic.IComparer<AccTrans>
	{
		AccTransColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccTransComparer"/> class.
        /// </summary>
		public AccTransComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AccTransComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccTransComparer(AccTransColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="AccTrans"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="AccTrans"/> to compare.</param>
        /// <param name="b">The second <c>AccTrans</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AccTrans a, AccTrans b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AccTrans entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AccTrans a, AccTrans b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccTransColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccTransKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AccTrans"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccTransKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccTransKey class.
		/// </summary>
		public AccTransKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccTransKey class.
		/// </summary>
		public AccTransKey(AccTransBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccTransKey class.
		/// </summary>
		public AccTransKey(System.Decimal _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccTransBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccTransBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Decimal _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Decimal Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Decimal) EntityUtil.ChangeType(values["Id"], typeof(System.Decimal)) : 0.0m;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccTransColumn Enum
	
	/// <summary>
	/// Enumerate the AccTrans columns.
	/// </summary>
	[Serializable]
	public enum AccTransColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("id", typeof(System.Decimal), System.Data.DbType.Decimal, true, true, false)]
		Id = 1,
		/// <summary>
		/// TranDate : 
		/// </summary>
		[EnumTextValue("Tran Date")]
		[ColumnEnum("tran_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TranDate = 2,
		/// <summary>
		/// TranTime : 
		/// </summary>
		[EnumTextValue("Tran Time")]
		[ColumnEnum("tran_time", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 5)]
		TranTime = 3,
		/// <summary>
		/// EfDate : 
		/// </summary>
		[EnumTextValue("Ef Date")]
		[ColumnEnum("ef_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EfDate = 4,
		/// <summary>
		/// TransNum : 
		/// </summary>
		[EnumTextValue("Trans Num")]
		[ColumnEnum("trans_num", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 12)]
		TransNum = 5,
		/// <summary>
		/// Voucher : 
		/// </summary>
		[EnumTextValue("Voucher")]
		[ColumnEnum("voucher", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 20)]
		Voucher = 6,
		/// <summary>
		/// TransCode : 
		/// </summary>
		[EnumTextValue("Trans Code")]
		[ColumnEnum("trans_code", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 2)]
		TransCode = 7,
		/// <summary>
		/// AccountId : 
		/// </summary>
		[EnumTextValue("Account Id")]
		[ColumnEnum("account_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 9)]
		AccountId = 8,
		/// <summary>
		/// DbAmount : 
		/// </summary>
		[EnumTextValue("Db Amount")]
		[ColumnEnum("db_amount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		DbAmount = 9,
		/// <summary>
		/// CrAmount : 
		/// </summary>
		[EnumTextValue("Cr Amount")]
		[ColumnEnum("cr_amount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		CrAmount = 10,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("User Id")]
		[ColumnEnum("user_id", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		UserId = 11,
		/// <summary>
		/// CorrAcc : 
		/// </summary>
		[EnumTextValue("Corr Acc")]
		[ColumnEnum("corr_acc", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 9)]
		CorrAcc = 12,
		/// <summary>
		/// Remark : 
		/// </summary>
		[EnumTextValue("Remark")]
		[ColumnEnum("remark", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		Remark = 13,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("name", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Name = 14,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("address", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Address = 15,
		/// <summary>
		/// PersonId : 
		/// </summary>
		[EnumTextValue("Person Id")]
		[ColumnEnum("person_id", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 20)]
		PersonId = 16,
		/// <summary>
		/// Updated : 
		/// </summary>
		[EnumTextValue("Updated")]
		[ColumnEnum("updated", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Updated = 17,
		/// <summary>
		/// Recnum : 
		/// </summary>
		[EnumTextValue("Recnum")]
		[ColumnEnum("recnum", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Recnum = 18,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("status", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Status = 19
	}//End enum

	#endregion AccTransColumn Enum

} // end namespace
