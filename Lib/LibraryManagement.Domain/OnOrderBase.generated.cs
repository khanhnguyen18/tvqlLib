
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file OnOrder.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblOn_order' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class OnOrderBase : EntityBase, IOnOrder, IEntityId<OnOrderKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private OnOrderEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private OnOrderEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private OnOrderEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<OnOrder> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OnOrderEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OnOrderEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OnOrderBase"/> instance.
		///</summary>
		public OnOrderBase()
		{
			this.entityData = new OnOrderEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OnOrderBase"/> instance.
		///</summary>
		///<param name="_tranDate"></param>
		///<param name="_tranTime"></param>
		///<param name="_deliverDt"></param>
		///<param name="_transNum"></param>
		///<param name="_transCode"></param>
		///<param name="_expId"></param>
		///<param name="_goodsId"></param>
		///<param name="_qty"></param>
		///<param name="_unitSymb"></param>
		///<param name="_price"></param>
		///<param name="_mercType"></param>
		///<param name="_userId"></param>
		///<param name="_remark"></param>
		///<param name="_recnum"></param>
		///<param name="_status"></param>
		///<param name="_endQty"></param>
		public OnOrderBase(System.DateTime _tranDate, System.String _tranTime, System.DateTime? _deliverDt, 
			System.String _transNum, System.String _transCode, System.String _expId, System.String _goodsId, 
			System.Decimal _qty, System.String _unitSymb, System.Decimal _price, System.String _mercType, 
			System.Decimal _userId, System.String _remark, System.Decimal _recnum, System.Boolean? _status, 
			System.Decimal? _endQty)
		{
			this.entityData = new OnOrderEntityData();
			this.backupData = null;

			this.TranDate = _tranDate;
			this.TranTime = _tranTime;
			this.DeliverDt = _deliverDt;
			this.TransNum = _transNum;
			this.TransCode = _transCode;
			this.ExpId = _expId;
			this.GoodsId = _goodsId;
			this.Qty = _qty;
			this.UnitSymb = _unitSymb;
			this.Price = _price;
			this.MercType = _mercType;
			this.UserId = _userId;
			this.Remark = _remark;
			this.Recnum = _recnum;
			this.Status = _status;
			this.EndQty = _endQty;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="OnOrder"/> instance.
		///</summary>
		///<param name="_tranDate"></param>
		///<param name="_tranTime"></param>
		///<param name="_deliverDt"></param>
		///<param name="_transNum"></param>
		///<param name="_transCode"></param>
		///<param name="_expId"></param>
		///<param name="_goodsId"></param>
		///<param name="_qty"></param>
		///<param name="_unitSymb"></param>
		///<param name="_price"></param>
		///<param name="_mercType"></param>
		///<param name="_userId"></param>
		///<param name="_remark"></param>
		///<param name="_recnum"></param>
		///<param name="_status"></param>
		///<param name="_endQty"></param>
		public static OnOrder CreateOnOrder(System.DateTime _tranDate, System.String _tranTime, System.DateTime? _deliverDt, 
			System.String _transNum, System.String _transCode, System.String _expId, System.String _goodsId, 
			System.Decimal _qty, System.String _unitSymb, System.Decimal _price, System.String _mercType, 
			System.Decimal _userId, System.String _remark, System.Decimal _recnum, System.Boolean? _status, 
			System.Decimal? _endQty)
		{
			OnOrder newOnOrder = new OnOrder();
			newOnOrder.TranDate = _tranDate;
			newOnOrder.TranTime = _tranTime;
			newOnOrder.DeliverDt = _deliverDt;
			newOnOrder.TransNum = _transNum;
			newOnOrder.TransCode = _transCode;
			newOnOrder.ExpId = _expId;
			newOnOrder.GoodsId = _goodsId;
			newOnOrder.Qty = _qty;
			newOnOrder.UnitSymb = _unitSymb;
			newOnOrder.Price = _price;
			newOnOrder.MercType = _mercType;
			newOnOrder.UserId = _userId;
			newOnOrder.Remark = _remark;
			newOnOrder.Recnum = _recnum;
			newOnOrder.Status = _status;
			newOnOrder.EndQty = _endQty;
			return newOnOrder;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the TranDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime TranDate
		{
			get
			{
				return this.entityData.TranDate; 
			}
			
			set
			{
				if (this.entityData.TranDate == value)
					return;
				
                OnPropertyChanging("TranDate");                    
				OnColumnChanging(OnOrderColumn.TranDate, this.entityData.TranDate);
				this.entityData.TranDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.TranDate, this.entityData.TranDate);
				OnPropertyChanged("TranDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TranTime property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 5)]
		public virtual System.String TranTime
		{
			get
			{
				return this.entityData.TranTime; 
			}
			
			set
			{
				if (this.entityData.TranTime == value)
					return;
				
                OnPropertyChanging("TranTime");                    
				OnColumnChanging(OnOrderColumn.TranTime, this.entityData.TranTime);
				this.entityData.TranTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.TranTime, this.entityData.TranTime);
				OnPropertyChanged("TranTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DeliverDt property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DeliverDt
		{
			get
			{
				return this.entityData.DeliverDt; 
			}
			
			set
			{
				if (this.entityData.DeliverDt == value)
					return;
				
                OnPropertyChanging("DeliverDt");                    
				OnColumnChanging(OnOrderColumn.DeliverDt, this.entityData.DeliverDt);
				this.entityData.DeliverDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.DeliverDt, this.entityData.DeliverDt);
				OnPropertyChanged("DeliverDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransNum property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 12)]
		public virtual System.String TransNum
		{
			get
			{
				return this.entityData.TransNum; 
			}
			
			set
			{
				if (this.entityData.TransNum == value)
					return;
				
                OnPropertyChanging("TransNum");                    
				OnColumnChanging(OnOrderColumn.TransNum, this.entityData.TransNum);
				this.entityData.TransNum = value;
				this.EntityId.TransNum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.TransNum, this.entityData.TransNum);
				OnPropertyChanged("TransNum");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the trans_num property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the trans_num property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalTransNum
		{
			get { return this.entityData.OriginalTransNum; }
			set { this.entityData.OriginalTransNum = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the TransCode property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 2)]
		public virtual System.String TransCode
		{
			get
			{
				return this.entityData.TransCode; 
			}
			
			set
			{
				if (this.entityData.TransCode == value)
					return;
				
                OnPropertyChanging("TransCode");                    
				OnColumnChanging(OnOrderColumn.TransCode, this.entityData.TransCode);
				this.entityData.TransCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.TransCode, this.entityData.TransCode);
				OnPropertyChanged("TransCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 5)]
		public virtual System.String ExpId
		{
			get
			{
				return this.entityData.ExpId; 
			}
			
			set
			{
				if (this.entityData.ExpId == value)
					return;
				
                OnPropertyChanging("ExpId");                    
				OnColumnChanging(OnOrderColumn.ExpId, this.entityData.ExpId);
				this.entityData.ExpId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.ExpId, this.entityData.ExpId);
				OnPropertyChanged("ExpId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GoodsId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 6)]
		public virtual System.String GoodsId
		{
			get
			{
				return this.entityData.GoodsId; 
			}
			
			set
			{
				if (this.entityData.GoodsId == value)
					return;
				
                OnPropertyChanging("GoodsId");                    
				OnColumnChanging(OnOrderColumn.GoodsId, this.entityData.GoodsId);
				this.entityData.GoodsId = value;
				this.EntityId.GoodsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.GoodsId, this.entityData.GoodsId);
				OnPropertyChanged("GoodsId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the goods_id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the goods_id property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalGoodsId
		{
			get { return this.entityData.OriginalGoodsId; }
			set { this.entityData.OriginalGoodsId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Qty property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Qty
		{
			get
			{
				return this.entityData.Qty; 
			}
			
			set
			{
				if (this.entityData.Qty == value)
					return;
				
                OnPropertyChanging("Qty");                    
				OnColumnChanging(OnOrderColumn.Qty, this.entityData.Qty);
				this.entityData.Qty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.Qty, this.entityData.Qty);
				OnPropertyChanged("Qty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UnitSymb property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String UnitSymb
		{
			get
			{
				return this.entityData.UnitSymb; 
			}
			
			set
			{
				if (this.entityData.UnitSymb == value)
					return;
				
                OnPropertyChanging("UnitSymb");                    
				OnColumnChanging(OnOrderColumn.UnitSymb, this.entityData.UnitSymb);
				this.entityData.UnitSymb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.UnitSymb, this.entityData.UnitSymb);
				OnPropertyChanged("UnitSymb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
				
                OnPropertyChanging("Price");                    
				OnColumnChanging(OnOrderColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MercType property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 2)]
		public virtual System.String MercType
		{
			get
			{
				return this.entityData.MercType; 
			}
			
			set
			{
				if (this.entityData.MercType == value)
					return;
				
                OnPropertyChanging("MercType");                    
				OnColumnChanging(OnOrderColumn.MercType, this.entityData.MercType);
				this.entityData.MercType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.MercType, this.entityData.MercType);
				OnPropertyChanged("MercType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
				
                OnPropertyChanging("UserId");                    
				OnColumnChanging(OnOrderColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Remark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String Remark
		{
			get
			{
				return this.entityData.Remark; 
			}
			
			set
			{
				if (this.entityData.Remark == value)
					return;
				
                OnPropertyChanging("Remark");                    
				OnColumnChanging(OnOrderColumn.Remark, this.entityData.Remark);
				this.entityData.Remark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.Remark, this.entityData.Remark);
				OnPropertyChanged("Remark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Recnum property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Recnum
		{
			get
			{
				return this.entityData.Recnum; 
			}
			
			set
			{
				if (this.entityData.Recnum == value)
					return;
				
                OnPropertyChanging("Recnum");                    
				OnColumnChanging(OnOrderColumn.Recnum, this.entityData.Recnum);
				this.entityData.Recnum = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.Recnum, this.entityData.Recnum);
				OnPropertyChanged("Recnum");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(OnOrderColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndQty property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? EndQty
		{
			get
			{
				return this.entityData.EndQty; 
			}
			
			set
			{
				if (this.entityData.EndQty == value)
					return;
				
                OnPropertyChanging("EndQty");                    
				OnColumnChanging(OnOrderColumn.EndQty, this.entityData.EndQty);
				this.entityData.EndQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OnOrderColumn.EndQty, this.entityData.EndQty);
				OnPropertyChanged("EndQty");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TranTime", "Tran Time"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TranTime", "Tran Time", 5));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TransNum", "Trans Num"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransNum", "Trans Num", 12));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TransCode", "Trans Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TransCode", "Trans Code", 2));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ExpId", "Exp Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ExpId", "Exp Id", 5));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GoodsId", "Goods Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoodsId", "Goods Id", 6));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("UnitSymb", "Unit Symb"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UnitSymb", "Unit Symb", 3));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MercType", "Merc Type"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MercType", "Merc Type", 2));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Remark", "Remark"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Remark", "Remark", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblOn_order"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"tran_date", "tran_time", "deliver_dt", "trans_num", "trans_code", "exp_id", "goods_id", "qty", "unit_symb", "price", "merc_type", "user_id", "remark", "recnum", "status", "end_qty"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OnOrderEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (OnOrder) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<OnOrder>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as OnOrder);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed OnOrder Entity 
		///</summary>
		protected virtual OnOrder Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			OnOrder copy = new OnOrder();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.TranDate = this.TranDate;
				copy.TranTime = this.TranTime;
				copy.DeliverDt = this.DeliverDt;
				copy.TransNum = this.TransNum;
					copy.OriginalTransNum = this.OriginalTransNum;
				copy.TransCode = this.TransCode;
				copy.ExpId = this.ExpId;
				copy.GoodsId = this.GoodsId;
					copy.OriginalGoodsId = this.OriginalGoodsId;
				copy.Qty = this.Qty;
				copy.UnitSymb = this.UnitSymb;
				copy.Price = this.Price;
				copy.MercType = this.MercType;
				copy.UserId = this.UserId;
				copy.Remark = this.Remark;
				copy.Recnum = this.Recnum;
				copy.Status = this.Status;
				copy.EndQty = this.EndQty;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed OnOrder Entity 
		///</summary>
		public virtual OnOrder Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed OnOrder Entity which is a deep copy of the current entity.
		///</summary>
		public virtual OnOrder DeepCopy()
		{
			return EntityHelper.Clone<OnOrder>(this as OnOrder);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as OnOrderEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new OnOrderEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as OnOrderEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(OnOrderColumn column)
		{
			switch(column)
			{
					case OnOrderColumn.TranDate:
					return entityData.TranDate != _originalData.TranDate;
					case OnOrderColumn.TranTime:
					return entityData.TranTime != _originalData.TranTime;
					case OnOrderColumn.DeliverDt:
					return entityData.DeliverDt != _originalData.DeliverDt;
					case OnOrderColumn.TransNum:
					return entityData.TransNum != _originalData.TransNum;
					case OnOrderColumn.TransCode:
					return entityData.TransCode != _originalData.TransCode;
					case OnOrderColumn.ExpId:
					return entityData.ExpId != _originalData.ExpId;
					case OnOrderColumn.GoodsId:
					return entityData.GoodsId != _originalData.GoodsId;
					case OnOrderColumn.Qty:
					return entityData.Qty != _originalData.Qty;
					case OnOrderColumn.UnitSymb:
					return entityData.UnitSymb != _originalData.UnitSymb;
					case OnOrderColumn.Price:
					return entityData.Price != _originalData.Price;
					case OnOrderColumn.MercType:
					return entityData.MercType != _originalData.MercType;
					case OnOrderColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case OnOrderColumn.Remark:
					return entityData.Remark != _originalData.Remark;
					case OnOrderColumn.Recnum:
					return entityData.Recnum != _originalData.Recnum;
					case OnOrderColumn.Status:
					return entityData.Status != _originalData.Status;
					case OnOrderColumn.EndQty:
					return entityData.EndQty != _originalData.EndQty;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< OnOrderColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.TranDate != _originalData.TranDate;
			result = result || entityData.TranTime != _originalData.TranTime;
			result = result || entityData.DeliverDt != _originalData.DeliverDt;
			result = result || entityData.TransNum != _originalData.TransNum;
			result = result || entityData.TransCode != _originalData.TransCode;
			result = result || entityData.ExpId != _originalData.ExpId;
			result = result || entityData.GoodsId != _originalData.GoodsId;
			result = result || entityData.Qty != _originalData.Qty;
			result = result || entityData.UnitSymb != _originalData.UnitSymb;
			result = result || entityData.Price != _originalData.Price;
			result = result || entityData.MercType != _originalData.MercType;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.Remark != _originalData.Remark;
			result = result || entityData.Recnum != _originalData.Recnum;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.EndQty != _originalData.EndQty;
			return result;
		}	
		
		///<summary>
		///  Returns a OnOrder Entity with the original data.
		///</summary>
		public OnOrder GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateOnOrder(
				_originalData.TranDate,
				_originalData.TranTime,
				_originalData.DeliverDt,
				_originalData.TransNum,
				_originalData.TransCode,
				_originalData.ExpId,
				_originalData.GoodsId,
				_originalData.Qty,
				_originalData.UnitSymb,
				_originalData.Price,
				_originalData.MercType,
				_originalData.UserId,
				_originalData.Remark,
				_originalData.Recnum,
				_originalData.Status,
				_originalData.EndQty
				);
				
			return (OnOrder)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="OnOrderBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is OnOrderBase)
				return ValueEquals(this, (OnOrderBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="OnOrderBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.TranDate.GetHashCode() ^ 
					this.TranTime.GetHashCode() ^ 
					((this.DeliverDt == null) ? string.Empty : this.DeliverDt.ToString()).GetHashCode() ^ 
					this.TransNum.GetHashCode() ^ 
					this.TransCode.GetHashCode() ^ 
					this.ExpId.GetHashCode() ^ 
					this.GoodsId.GetHashCode() ^ 
					this.Qty.GetHashCode() ^ 
					this.UnitSymb.GetHashCode() ^ 
					this.Price.GetHashCode() ^ 
					this.MercType.GetHashCode() ^ 
					this.UserId.GetHashCode() ^ 
					this.Remark.GetHashCode() ^ 
					this.Recnum.GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					((this.EndQty == null) ? string.Empty : this.EndQty.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OnOrderBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OnOrderBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="OnOrderBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="OnOrderBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OnOrderBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(OnOrderBase Object1, OnOrderBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.TranDate != Object2.TranDate)
				equal = false;
			if (Object1.TranTime != Object2.TranTime)
				equal = false;
			if ( Object1.DeliverDt != null && Object2.DeliverDt != null )
			{
				if (Object1.DeliverDt != Object2.DeliverDt)
					equal = false;
			}
			else if (Object1.DeliverDt == null ^ Object2.DeliverDt == null )
			{
				equal = false;
			}
			if (Object1.TransNum != Object2.TransNum)
				equal = false;
			if (Object1.TransCode != Object2.TransCode)
				equal = false;
			if (Object1.ExpId != Object2.ExpId)
				equal = false;
			if (Object1.GoodsId != Object2.GoodsId)
				equal = false;
			if (Object1.Qty != Object2.Qty)
				equal = false;
			if (Object1.UnitSymb != Object2.UnitSymb)
				equal = false;
			if (Object1.Price != Object2.Price)
				equal = false;
			if (Object1.MercType != Object2.MercType)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.Remark != Object2.Remark)
				equal = false;
			if (Object1.Recnum != Object2.Recnum)
				equal = false;
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.EndQty != null && Object2.EndQty != null )
			{
				if (Object1.EndQty != Object2.EndQty)
					equal = false;
			}
			else if (Object1.EndQty == null ^ Object2.EndQty == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((OnOrderBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static OnOrderComparer GetComparer()
        {
            return new OnOrderComparer();
        }
        */

        // Comparer delegates back to OnOrder
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(OnOrder rhs, OnOrderColumn which)
        {
            switch (which)
            {
            	
            	
            	case OnOrderColumn.TranDate:
            		return this.TranDate.CompareTo(rhs.TranDate);
            		
            		                 
            	
            	
            	case OnOrderColumn.TranTime:
            		return this.TranTime.CompareTo(rhs.TranTime);
            		
            		                 
            	
            	
            	case OnOrderColumn.DeliverDt:
            		return this.DeliverDt.Value.CompareTo(rhs.DeliverDt.Value);
            		
            		                 
            	
            	
            	case OnOrderColumn.TransNum:
            		return this.TransNum.CompareTo(rhs.TransNum);
            		
            		                 
            	
            	
            	case OnOrderColumn.TransCode:
            		return this.TransCode.CompareTo(rhs.TransCode);
            		
            		                 
            	
            	
            	case OnOrderColumn.ExpId:
            		return this.ExpId.CompareTo(rhs.ExpId);
            		
            		                 
            	
            	
            	case OnOrderColumn.GoodsId:
            		return this.GoodsId.CompareTo(rhs.GoodsId);
            		
            		                 
            	
            	
            	case OnOrderColumn.Qty:
            		return this.Qty.CompareTo(rhs.Qty);
            		
            		                 
            	
            	
            	case OnOrderColumn.UnitSymb:
            		return this.UnitSymb.CompareTo(rhs.UnitSymb);
            		
            		                 
            	
            	
            	case OnOrderColumn.Price:
            		return this.Price.CompareTo(rhs.Price);
            		
            		                 
            	
            	
            	case OnOrderColumn.MercType:
            		return this.MercType.CompareTo(rhs.MercType);
            		
            		                 
            	
            	
            	case OnOrderColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case OnOrderColumn.Remark:
            		return this.Remark.CompareTo(rhs.Remark);
            		
            		                 
            	
            	
            	case OnOrderColumn.Recnum:
            		return this.Recnum.CompareTo(rhs.Recnum);
            		
            		                 
            	
            	
            	case OnOrderColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case OnOrderColumn.EndQty:
            		return this.EndQty.Value.CompareTo(rhs.EndQty.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OnOrderKey> Members
		
		// member variable for the EntityId property
		private OnOrderKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual OnOrderKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OnOrderKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("OnOrder")
					.Append("|").Append( this.TransNum.ToString())
					.Append("|").Append( this.GoodsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- TranDate: {0}{16}- TranTime: {1}{16}- DeliverDt: {2}{16}- TransNum: {3}{16}- TransCode: {4}{16}- ExpId: {5}{16}- GoodsId: {6}{16}- Qty: {7}{16}- UnitSymb: {8}{16}- Price: {9}{16}- MercType: {10}{16}- UserId: {11}{16}- Remark: {12}{16}- Recnum: {13}{16}- Status: {14}{16}- EndQty: {15}{16}{18}", 
				this.TranDate,
				this.TranTime,
				(this.DeliverDt == null) ? string.Empty : this.DeliverDt.ToString(),
				this.TransNum,
				this.TransCode,
				this.ExpId,
				this.GoodsId,
				this.Qty,
				this.UnitSymb,
				this.Price,
				this.MercType,
				this.UserId,
				this.Remark,
				this.Recnum,
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.EndQty == null) ? string.Empty : this.EndQty.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblOn_order' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class OnOrderEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// trans_num : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblOn_order"</remarks>
		public System.String TransNum;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalTransNum;
		
		/// <summary>			
		/// goods_id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblOn_order"</remarks>
		public System.String GoodsId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalGoodsId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// tran_date : 
		/// </summary>
		public System.DateTime TranDate = DateTime.MinValue;
		
		/// <summary>
		/// tran_time : 
		/// </summary>
		public System.String TranTime = string.Empty;
		
		/// <summary>
		/// deliver_dt : 
		/// </summary>
		public System.DateTime? DeliverDt = null;
		
		/// <summary>
		/// trans_code : 
		/// </summary>
		public System.String TransCode = string.Empty;
		
		/// <summary>
		/// exp_id : 
		/// </summary>
		public System.String ExpId = string.Empty;
		
		/// <summary>
		/// qty : 
		/// </summary>
		public System.Decimal Qty = 0m;
		
		/// <summary>
		/// unit_symb : 
		/// </summary>
		public System.String UnitSymb = string.Empty;
		
		/// <summary>
		/// price : 
		/// </summary>
		public System.Decimal Price = 0m;
		
		/// <summary>
		/// merc_type : 
		/// </summary>
		public System.String MercType = string.Empty;
		
		/// <summary>
		/// user_id : 
		/// </summary>
		public System.Decimal UserId = 0m;
		
		/// <summary>
		/// remark : 
		/// </summary>
		public System.String Remark = string.Empty;
		
		/// <summary>
		/// recnum : 
		/// </summary>
		public System.Decimal Recnum = 0m;
		
		/// <summary>
		/// status : 
		/// </summary>
		public System.Boolean? Status = true;
		
		/// <summary>
		/// end_qty : 
		/// </summary>
		public System.Decimal? EndQty = 0m;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			OnOrderEntityData _tmp = new OnOrderEntityData();
						
			_tmp.TransNum = this.TransNum;
			_tmp.OriginalTransNum = this.OriginalTransNum;
			_tmp.GoodsId = this.GoodsId;
			_tmp.OriginalGoodsId = this.OriginalGoodsId;
			
			_tmp.TranDate = this.TranDate;
			_tmp.TranTime = this.TranTime;
			_tmp.DeliverDt = this.DeliverDt;
			_tmp.TransCode = this.TransCode;
			_tmp.ExpId = this.ExpId;
			_tmp.Qty = this.Qty;
			_tmp.UnitSymb = this.UnitSymb;
			_tmp.Price = this.Price;
			_tmp.MercType = this.MercType;
			_tmp.UserId = this.UserId;
			_tmp.Remark = this.Remark;
			_tmp.Recnum = this.Recnum;
			_tmp.Status = this.Status;
			_tmp.EndQty = this.EndQty;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			OnOrderEntityData _tmp = new OnOrderEntityData();
						
			_tmp.TransNum = this.TransNum;
			_tmp.OriginalTransNum = this.OriginalTransNum;
			_tmp.GoodsId = this.GoodsId;
			_tmp.OriginalGoodsId = this.OriginalGoodsId;
			
			_tmp.TranDate = this.TranDate;
			_tmp.TranTime = this.TranTime;
			_tmp.DeliverDt = this.DeliverDt;
			_tmp.TransCode = this.TransCode;
			_tmp.ExpId = this.ExpId;
			_tmp.Qty = this.Qty;
			_tmp.UnitSymb = this.UnitSymb;
			_tmp.Price = this.Price;
			_tmp.MercType = this.MercType;
			_tmp.UserId = this.UserId;
			_tmp.Remark = this.Remark;
			_tmp.Recnum = this.Recnum;
			_tmp.Status = this.Status;
			_tmp.EndQty = this.EndQty;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OnOrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(OnOrderColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OnOrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(OnOrderColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OnOrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(OnOrderColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				OnOrderEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OnOrderEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OnOrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(OnOrderColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OnOrderEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OnOrderEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region OnOrderEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="OnOrder"/> object.
	/// </remarks>
	public class OnOrderEventArgs : System.EventArgs
	{
		private OnOrderColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the OnOrderEventArgs class.
		///</summary>
		public OnOrderEventArgs(OnOrderColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OnOrderEventArgs class.
		///</summary>
		public OnOrderEventArgs(OnOrderColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The OnOrderColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OnOrderColumn" />
		public OnOrderColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all OnOrder related events.
	///</summary>
	public delegate void OnOrderEventHandler(object sender, OnOrderEventArgs e);
	
	#region OnOrderComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OnOrderComparer : System.Collections.Generic.IComparer<OnOrder>
	{
		OnOrderColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OnOrderComparer"/> class.
        /// </summary>
		public OnOrderComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:OnOrderComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OnOrderComparer(OnOrderColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="OnOrder"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="OnOrder"/> to compare.</param>
        /// <param name="b">The second <c>OnOrder</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(OnOrder a, OnOrder b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(OnOrder entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(OnOrder a, OnOrder b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OnOrderColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OnOrderKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="OnOrder"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OnOrderKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OnOrderKey class.
		/// </summary>
		public OnOrderKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OnOrderKey class.
		/// </summary>
		public OnOrderKey(OnOrderBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.TransNum = entity.TransNum;
				this.GoodsId = entity.GoodsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OnOrderKey class.
		/// </summary>
		public OnOrderKey(System.String _transNum, System.String _goodsId)
		{
			#region Init Properties

			this.TransNum = _transNum;
			this.GoodsId = _goodsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OnOrderBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OnOrderBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the TransNum property
		private System.String _transNum;
		
		/// <summary>
		/// Gets or sets the TransNum property.
		/// </summary>
		public System.String TransNum
		{
			get { return _transNum; }
			set
			{
				if ( this.Entity != null )
					this.Entity.TransNum = value;
				
				_transNum = value;
			}
		}
		
		// member variable for the GoodsId property
		private System.String _goodsId;
		
		/// <summary>
		/// Gets or sets the GoodsId property.
		/// </summary>
		public System.String GoodsId
		{
			get { return _goodsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GoodsId = value;
				
				_goodsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				TransNum = ( values["TransNum"] != null ) ? (System.String) EntityUtil.ChangeType(values["TransNum"], typeof(System.String)) : string.Empty;
				GoodsId = ( values["GoodsId"] != null ) ? (System.String) EntityUtil.ChangeType(values["GoodsId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("TransNum", TransNum);
			values.Add("GoodsId", GoodsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("TransNum: {0}{2}GoodsId: {1}{2}",
								TransNum,
								GoodsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OnOrderColumn Enum
	
	/// <summary>
	/// Enumerate the OnOrder columns.
	/// </summary>
	[Serializable]
	public enum OnOrderColumn : int
	{
		/// <summary>
		/// TranDate : 
		/// </summary>
		[EnumTextValue("Tran Date")]
		[ColumnEnum("tran_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TranDate = 1,
		/// <summary>
		/// TranTime : 
		/// </summary>
		[EnumTextValue("Tran Time")]
		[ColumnEnum("tran_time", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 5)]
		TranTime = 2,
		/// <summary>
		/// DeliverDt : 
		/// </summary>
		[EnumTextValue("Deliver Dt")]
		[ColumnEnum("deliver_dt", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DeliverDt = 3,
		/// <summary>
		/// TransNum : 
		/// </summary>
		[EnumTextValue("Trans Num")]
		[ColumnEnum("trans_num", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 12)]
		TransNum = 4,
		/// <summary>
		/// TransCode : 
		/// </summary>
		[EnumTextValue("Trans Code")]
		[ColumnEnum("trans_code", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 2)]
		TransCode = 5,
		/// <summary>
		/// ExpId : 
		/// </summary>
		[EnumTextValue("Exp Id")]
		[ColumnEnum("exp_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 5)]
		ExpId = 6,
		/// <summary>
		/// GoodsId : 
		/// </summary>
		[EnumTextValue("Goods Id")]
		[ColumnEnum("goods_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 6)]
		GoodsId = 7,
		/// <summary>
		/// Qty : 
		/// </summary>
		[EnumTextValue("Qty")]
		[ColumnEnum("qty", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Qty = 8,
		/// <summary>
		/// UnitSymb : 
		/// </summary>
		[EnumTextValue("Unit Symb")]
		[ColumnEnum("unit_symb", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 3)]
		UnitSymb = 9,
		/// <summary>
		/// Price : 
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("price", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Price = 10,
		/// <summary>
		/// MercType : 
		/// </summary>
		[EnumTextValue("Merc Type")]
		[ColumnEnum("merc_type", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 2)]
		MercType = 11,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("User Id")]
		[ColumnEnum("user_id", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		UserId = 12,
		/// <summary>
		/// Remark : 
		/// </summary>
		[EnumTextValue("Remark")]
		[ColumnEnum("remark", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		Remark = 13,
		/// <summary>
		/// Recnum : 
		/// </summary>
		[EnumTextValue("Recnum")]
		[ColumnEnum("recnum", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Recnum = 14,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("status", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Status = 15,
		/// <summary>
		/// EndQty : 
		/// </summary>
		[EnumTextValue("End Qty")]
		[ColumnEnum("end_qty", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		EndQty = 16
	}//End enum

	#endregion OnOrderColumn Enum

} // end namespace
