
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file CsCard.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblCsCard' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CsCardBase : EntityBase, ICsCard, IEntityId<CsCardKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CsCardEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CsCardEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CsCardEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CsCard> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CsCardEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CsCardEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CsCardBase"/> instance.
		///</summary>
		public CsCardBase()
		{
			this.entityData = new CsCardEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CsCardBase"/> instance.
		///</summary>
		///<param name="_cardId"></param>
		///<param name="_isVip"></param>
		///<param name="_csSex"></param>
		///<param name="_personId"></param>
		///<param name="_birthday"></param>
		///<param name="_psIssuedate"></param>
		///<param name="_psPlaceissuse"></param>
		///<param name="_fullname"></param>
		///<param name="_address"></param>
		///<param name="_phone"></param>
		///<param name="_email"></param>
		///<param name="_discPc"></param>
		///<param name="_issDate"></param>
		///<param name="_dueDate"></param>
		///<param name="_image"></param>
		///<param name="_remark"></param>
		///<param name="_begmark"></param>
		///<param name="_endmark"></param>
		///<param name="_status"></param>
		public CsCardBase(System.String _cardId, System.Boolean? _isVip, System.Boolean? _csSex, 
			System.String _personId, System.DateTime? _birthday, System.DateTime? _psIssuedate, System.String _psPlaceissuse, 
			System.String _fullname, System.String _address, System.String _phone, System.String _email, 
			System.Decimal? _discPc, System.DateTime? _issDate, System.DateTime? _dueDate, System.Byte[] _image, 
			System.String _remark, System.Decimal? _begmark, System.Decimal? _endmark, System.Boolean _status)
		{
			this.entityData = new CsCardEntityData();
			this.backupData = null;

			this.CardId = _cardId;
			this.IsVip = _isVip;
			this.CsSex = _csSex;
			this.PersonId = _personId;
			this.Birthday = _birthday;
			this.PsIssuedate = _psIssuedate;
			this.PsPlaceissuse = _psPlaceissuse;
			this.Fullname = _fullname;
			this.Address = _address;
			this.Phone = _phone;
			this.Email = _email;
			this.DiscPc = _discPc;
			this.IssDate = _issDate;
			this.DueDate = _dueDate;
			this.Image = _image;
			this.Remark = _remark;
			this.Begmark = _begmark;
			this.Endmark = _endmark;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CsCard"/> instance.
		///</summary>
		///<param name="_cardId"></param>
		///<param name="_isVip"></param>
		///<param name="_csSex"></param>
		///<param name="_personId"></param>
		///<param name="_birthday"></param>
		///<param name="_psIssuedate"></param>
		///<param name="_psPlaceissuse"></param>
		///<param name="_fullname"></param>
		///<param name="_address"></param>
		///<param name="_phone"></param>
		///<param name="_email"></param>
		///<param name="_discPc"></param>
		///<param name="_issDate"></param>
		///<param name="_dueDate"></param>
		///<param name="_image"></param>
		///<param name="_remark"></param>
		///<param name="_begmark"></param>
		///<param name="_endmark"></param>
		///<param name="_status"></param>
		public static CsCard CreateCsCard(System.String _cardId, System.Boolean? _isVip, System.Boolean? _csSex, 
			System.String _personId, System.DateTime? _birthday, System.DateTime? _psIssuedate, System.String _psPlaceissuse, 
			System.String _fullname, System.String _address, System.String _phone, System.String _email, 
			System.Decimal? _discPc, System.DateTime? _issDate, System.DateTime? _dueDate, System.Byte[] _image, 
			System.String _remark, System.Decimal? _begmark, System.Decimal? _endmark, System.Boolean _status)
		{
			CsCard newCsCard = new CsCard();
			newCsCard.CardId = _cardId;
			newCsCard.IsVip = _isVip;
			newCsCard.CsSex = _csSex;
			newCsCard.PersonId = _personId;
			newCsCard.Birthday = _birthday;
			newCsCard.PsIssuedate = _psIssuedate;
			newCsCard.PsPlaceissuse = _psPlaceissuse;
			newCsCard.Fullname = _fullname;
			newCsCard.Address = _address;
			newCsCard.Phone = _phone;
			newCsCard.Email = _email;
			newCsCard.DiscPc = _discPc;
			newCsCard.IssDate = _issDate;
			newCsCard.DueDate = _dueDate;
			newCsCard.Image = _image;
			newCsCard.Remark = _remark;
			newCsCard.Begmark = _begmark;
			newCsCard.Endmark = _endmark;
			newCsCard.Status = _status;
			return newCsCard;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CardId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 8)]
		public virtual System.String CardId
		{
			get
			{
				return this.entityData.CardId; 
			}
			
			set
			{
				if (this.entityData.CardId == value)
					return;
				
                OnPropertyChanging("CardId");                    
				OnColumnChanging(CsCardColumn.CardId, this.entityData.CardId);
				this.entityData.CardId = value;
				this.EntityId.CardId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.CardId, this.entityData.CardId);
				OnPropertyChanged("CardId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the card_id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the card_id property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalCardId
		{
			get { return this.entityData.OriginalCardId; }
			set { this.entityData.OriginalCardId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the IsVip property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsVip
		{
			get
			{
				return this.entityData.IsVip; 
			}
			
			set
			{
				if (this.entityData.IsVip == value)
					return;
				
                OnPropertyChanging("IsVip");                    
				OnColumnChanging(CsCardColumn.IsVip, this.entityData.IsVip);
				this.entityData.IsVip = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.IsVip, this.entityData.IsVip);
				OnPropertyChanged("IsVip");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CsSex property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? CsSex
		{
			get
			{
				return this.entityData.CsSex; 
			}
			
			set
			{
				if (this.entityData.CsSex == value)
					return;
				
                OnPropertyChanging("CsSex");                    
				OnColumnChanging(CsCardColumn.CsSex, this.entityData.CsSex);
				this.entityData.CsSex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.CsSex, this.entityData.CsSex);
				OnPropertyChanged("CsSex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PersonId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PersonId
		{
			get
			{
				return this.entityData.PersonId; 
			}
			
			set
			{
				if (this.entityData.PersonId == value)
					return;
				
                OnPropertyChanging("PersonId");                    
				OnColumnChanging(CsCardColumn.PersonId, this.entityData.PersonId);
				this.entityData.PersonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.PersonId, this.entityData.PersonId);
				OnPropertyChanged("PersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Birthday property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Birthday
		{
			get
			{
				return this.entityData.Birthday; 
			}
			
			set
			{
				if (this.entityData.Birthday == value)
					return;
				
                OnPropertyChanging("Birthday");                    
				OnColumnChanging(CsCardColumn.Birthday, this.entityData.Birthday);
				this.entityData.Birthday = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Birthday, this.entityData.Birthday);
				OnPropertyChanged("Birthday");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PsIssuedate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PsIssuedate
		{
			get
			{
				return this.entityData.PsIssuedate; 
			}
			
			set
			{
				if (this.entityData.PsIssuedate == value)
					return;
				
                OnPropertyChanging("PsIssuedate");                    
				OnColumnChanging(CsCardColumn.PsIssuedate, this.entityData.PsIssuedate);
				this.entityData.PsIssuedate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.PsIssuedate, this.entityData.PsIssuedate);
				OnPropertyChanged("PsIssuedate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PsPlaceissuse property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String PsPlaceissuse
		{
			get
			{
				return this.entityData.PsPlaceissuse; 
			}
			
			set
			{
				if (this.entityData.PsPlaceissuse == value)
					return;
				
                OnPropertyChanging("PsPlaceissuse");                    
				OnColumnChanging(CsCardColumn.PsPlaceissuse, this.entityData.PsPlaceissuse);
				this.entityData.PsPlaceissuse = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.PsPlaceissuse, this.entityData.PsPlaceissuse);
				OnPropertyChanged("PsPlaceissuse");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fullname property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String Fullname
		{
			get
			{
				return this.entityData.Fullname; 
			}
			
			set
			{
				if (this.entityData.Fullname == value)
					return;
				
                OnPropertyChanging("Fullname");                    
				OnColumnChanging(CsCardColumn.Fullname, this.entityData.Fullname);
				this.entityData.Fullname = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Fullname, this.entityData.Fullname);
				OnPropertyChanged("Fullname");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 300)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
				
                OnPropertyChanging("Address");                    
				OnColumnChanging(CsCardColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
				
                OnPropertyChanging("Phone");                    
				OnColumnChanging(CsCardColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
				
                OnPropertyChanging("Email");                    
				OnColumnChanging(CsCardColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscPc property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? DiscPc
		{
			get
			{
				return this.entityData.DiscPc; 
			}
			
			set
			{
				if (this.entityData.DiscPc == value)
					return;
				
                OnPropertyChanging("DiscPc");                    
				OnColumnChanging(CsCardColumn.DiscPc, this.entityData.DiscPc);
				this.entityData.DiscPc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.DiscPc, this.entityData.DiscPc);
				OnPropertyChanged("DiscPc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? IssDate
		{
			get
			{
				return this.entityData.IssDate; 
			}
			
			set
			{
				if (this.entityData.IssDate == value)
					return;
				
                OnPropertyChanging("IssDate");                    
				OnColumnChanging(CsCardColumn.IssDate, this.entityData.IssDate);
				this.entityData.IssDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.IssDate, this.entityData.IssDate);
				OnPropertyChanged("IssDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DueDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DueDate
		{
			get
			{
				return this.entityData.DueDate; 
			}
			
			set
			{
				if (this.entityData.DueDate == value)
					return;
				
                OnPropertyChanging("DueDate");                    
				OnColumnChanging(CsCardColumn.DueDate, this.entityData.DueDate);
				this.entityData.DueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.DueDate, this.entityData.DueDate);
				OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Image property. 
		///		
		/// </summary>
		/// <value>This type is image.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] Image
		{
			get
			{
				return this.entityData.Image; 
			}
			
			set
			{
				if (this.entityData.Image == value)
					return;
				
                OnPropertyChanging("Image");                    
				OnColumnChanging(CsCardColumn.Image, this.entityData.Image);
				this.entityData.Image = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Image, this.entityData.Image);
				OnPropertyChanged("Image");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Remark property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Remark
		{
			get
			{
				return this.entityData.Remark; 
			}
			
			set
			{
				if (this.entityData.Remark == value)
					return;
				
                OnPropertyChanging("Remark");                    
				OnColumnChanging(CsCardColumn.Remark, this.entityData.Remark);
				this.entityData.Remark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Remark, this.entityData.Remark);
				OnPropertyChanged("Remark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Begmark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Begmark
		{
			get
			{
				return this.entityData.Begmark; 
			}
			
			set
			{
				if (this.entityData.Begmark == value)
					return;
				
                OnPropertyChanging("Begmark");                    
				OnColumnChanging(CsCardColumn.Begmark, this.entityData.Begmark);
				this.entityData.Begmark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Begmark, this.entityData.Begmark);
				OnPropertyChanged("Begmark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Endmark property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Endmark
		{
			get
			{
				return this.entityData.Endmark; 
			}
			
			set
			{
				if (this.entityData.Endmark == value)
					return;
				
                OnPropertyChanging("Endmark");                    
				OnColumnChanging(CsCardColumn.Endmark, this.entityData.Endmark);
				this.entityData.Endmark = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Endmark, this.entityData.Endmark);
				OnPropertyChanged("Endmark");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(CsCardColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CsCardColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CardId", "Card Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CardId", "Card Id", 8));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PersonId", "Person Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PsPlaceissuse", "Ps Placeissuse", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Fullname", "Fullname"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fullname", "Fullname", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Address", "Address"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address", "Address", 300));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Remark", "Remark", 300));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblCsCard"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"card_id", "is_vip", "cs_sex", "person_id", "birthday", "ps_issuedate", "ps_placeissuse", "fullname", "address", "phone", "email", "disc_pc", "iss_date", "due_date", "image", "remark", "begmark", "endmark", "status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CsCardEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CsCard) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CsCard>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CsCard);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CsCard Entity 
		///</summary>
		protected virtual CsCard Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CsCard copy = new CsCard();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CardId = this.CardId;
					copy.OriginalCardId = this.OriginalCardId;
				copy.IsVip = this.IsVip;
				copy.CsSex = this.CsSex;
				copy.PersonId = this.PersonId;
				copy.Birthday = this.Birthday;
				copy.PsIssuedate = this.PsIssuedate;
				copy.PsPlaceissuse = this.PsPlaceissuse;
				copy.Fullname = this.Fullname;
				copy.Address = this.Address;
				copy.Phone = this.Phone;
				copy.Email = this.Email;
				copy.DiscPc = this.DiscPc;
				copy.IssDate = this.IssDate;
				copy.DueDate = this.DueDate;
				copy.Image = this.Image;
				copy.Remark = this.Remark;
				copy.Begmark = this.Begmark;
				copy.Endmark = this.Endmark;
				copy.Status = this.Status;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CsCard Entity 
		///</summary>
		public virtual CsCard Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CsCard Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CsCard DeepCopy()
		{
			return EntityHelper.Clone<CsCard>(this as CsCard);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CsCardEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CsCardEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CsCardEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CsCardColumn column)
		{
			switch(column)
			{
					case CsCardColumn.CardId:
					return entityData.CardId != _originalData.CardId;
					case CsCardColumn.IsVip:
					return entityData.IsVip != _originalData.IsVip;
					case CsCardColumn.CsSex:
					return entityData.CsSex != _originalData.CsSex;
					case CsCardColumn.PersonId:
					return entityData.PersonId != _originalData.PersonId;
					case CsCardColumn.Birthday:
					return entityData.Birthday != _originalData.Birthday;
					case CsCardColumn.PsIssuedate:
					return entityData.PsIssuedate != _originalData.PsIssuedate;
					case CsCardColumn.PsPlaceissuse:
					return entityData.PsPlaceissuse != _originalData.PsPlaceissuse;
					case CsCardColumn.Fullname:
					return entityData.Fullname != _originalData.Fullname;
					case CsCardColumn.Address:
					return entityData.Address != _originalData.Address;
					case CsCardColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case CsCardColumn.Email:
					return entityData.Email != _originalData.Email;
					case CsCardColumn.DiscPc:
					return entityData.DiscPc != _originalData.DiscPc;
					case CsCardColumn.IssDate:
					return entityData.IssDate != _originalData.IssDate;
					case CsCardColumn.DueDate:
					return entityData.DueDate != _originalData.DueDate;
					case CsCardColumn.Image:
					return entityData.Image != _originalData.Image;
					case CsCardColumn.Remark:
					return entityData.Remark != _originalData.Remark;
					case CsCardColumn.Begmark:
					return entityData.Begmark != _originalData.Begmark;
					case CsCardColumn.Endmark:
					return entityData.Endmark != _originalData.Endmark;
					case CsCardColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CsCardColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CardId != _originalData.CardId;
			result = result || entityData.IsVip != _originalData.IsVip;
			result = result || entityData.CsSex != _originalData.CsSex;
			result = result || entityData.PersonId != _originalData.PersonId;
			result = result || entityData.Birthday != _originalData.Birthday;
			result = result || entityData.PsIssuedate != _originalData.PsIssuedate;
			result = result || entityData.PsPlaceissuse != _originalData.PsPlaceissuse;
			result = result || entityData.Fullname != _originalData.Fullname;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.DiscPc != _originalData.DiscPc;
			result = result || entityData.IssDate != _originalData.IssDate;
			result = result || entityData.DueDate != _originalData.DueDate;
			result = result || entityData.Image != _originalData.Image;
			result = result || entityData.Remark != _originalData.Remark;
			result = result || entityData.Begmark != _originalData.Begmark;
			result = result || entityData.Endmark != _originalData.Endmark;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a CsCard Entity with the original data.
		///</summary>
		public CsCard GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCsCard(
				_originalData.CardId,
				_originalData.IsVip,
				_originalData.CsSex,
				_originalData.PersonId,
				_originalData.Birthday,
				_originalData.PsIssuedate,
				_originalData.PsPlaceissuse,
				_originalData.Fullname,
				_originalData.Address,
				_originalData.Phone,
				_originalData.Email,
				_originalData.DiscPc,
				_originalData.IssDate,
				_originalData.DueDate,
				_originalData.Image,
				_originalData.Remark,
				_originalData.Begmark,
				_originalData.Endmark,
				_originalData.Status
				);
				
			return (CsCard)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CsCardBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CsCardBase)
				return ValueEquals(this, (CsCardBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CsCardBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CardId.GetHashCode() ^ 
					((this.IsVip == null) ? string.Empty : this.IsVip.ToString()).GetHashCode() ^ 
					((this.CsSex == null) ? string.Empty : this.CsSex.ToString()).GetHashCode() ^ 
					((this.PersonId == null) ? string.Empty : this.PersonId.ToString()).GetHashCode() ^ 
					((this.Birthday == null) ? string.Empty : this.Birthday.ToString()).GetHashCode() ^ 
					((this.PsIssuedate == null) ? string.Empty : this.PsIssuedate.ToString()).GetHashCode() ^ 
					((this.PsPlaceissuse == null) ? string.Empty : this.PsPlaceissuse.ToString()).GetHashCode() ^ 
					this.Fullname.GetHashCode() ^ 
					this.Address.GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.DiscPc == null) ? string.Empty : this.DiscPc.ToString()).GetHashCode() ^ 
					((this.IssDate == null) ? string.Empty : this.IssDate.ToString()).GetHashCode() ^ 
					((this.DueDate == null) ? string.Empty : this.DueDate.ToString()).GetHashCode() ^ 
					((this.Image == null) ? string.Empty : this.Image.ToString()).GetHashCode() ^ 
					((this.Remark == null) ? string.Empty : this.Remark.ToString()).GetHashCode() ^ 
					((this.Begmark == null) ? string.Empty : this.Begmark.ToString()).GetHashCode() ^ 
					((this.Endmark == null) ? string.Empty : this.Endmark.ToString()).GetHashCode() ^ 
					this.Status.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CsCardBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CsCardBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CsCardBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CsCardBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CsCardBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CsCardBase Object1, CsCardBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CardId != Object2.CardId)
				equal = false;
			if ( Object1.IsVip != null && Object2.IsVip != null )
			{
				if (Object1.IsVip != Object2.IsVip)
					equal = false;
			}
			else if (Object1.IsVip == null ^ Object2.IsVip == null )
			{
				equal = false;
			}
			if ( Object1.CsSex != null && Object2.CsSex != null )
			{
				if (Object1.CsSex != Object2.CsSex)
					equal = false;
			}
			else if (Object1.CsSex == null ^ Object2.CsSex == null )
			{
				equal = false;
			}
			if ( Object1.PersonId != null && Object2.PersonId != null )
			{
				if (Object1.PersonId != Object2.PersonId)
					equal = false;
			}
			else if (Object1.PersonId == null ^ Object2.PersonId == null )
			{
				equal = false;
			}
			if ( Object1.Birthday != null && Object2.Birthday != null )
			{
				if (Object1.Birthday != Object2.Birthday)
					equal = false;
			}
			else if (Object1.Birthday == null ^ Object2.Birthday == null )
			{
				equal = false;
			}
			if ( Object1.PsIssuedate != null && Object2.PsIssuedate != null )
			{
				if (Object1.PsIssuedate != Object2.PsIssuedate)
					equal = false;
			}
			else if (Object1.PsIssuedate == null ^ Object2.PsIssuedate == null )
			{
				equal = false;
			}
			if ( Object1.PsPlaceissuse != null && Object2.PsPlaceissuse != null )
			{
				if (Object1.PsPlaceissuse != Object2.PsPlaceissuse)
					equal = false;
			}
			else if (Object1.PsPlaceissuse == null ^ Object2.PsPlaceissuse == null )
			{
				equal = false;
			}
			if (Object1.Fullname != Object2.Fullname)
				equal = false;
			if (Object1.Address != Object2.Address)
				equal = false;
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.DiscPc != null && Object2.DiscPc != null )
			{
				if (Object1.DiscPc != Object2.DiscPc)
					equal = false;
			}
			else if (Object1.DiscPc == null ^ Object2.DiscPc == null )
			{
				equal = false;
			}
			if ( Object1.IssDate != null && Object2.IssDate != null )
			{
				if (Object1.IssDate != Object2.IssDate)
					equal = false;
			}
			else if (Object1.IssDate == null ^ Object2.IssDate == null )
			{
				equal = false;
			}
			if ( Object1.DueDate != null && Object2.DueDate != null )
			{
				if (Object1.DueDate != Object2.DueDate)
					equal = false;
			}
			else if (Object1.DueDate == null ^ Object2.DueDate == null )
			{
				equal = false;
			}
			if ( Object1.Image != null && Object2.Image != null )
			{
				if (Object1.Image != Object2.Image)
					equal = false;
			}
			else if (Object1.Image == null ^ Object2.Image == null )
			{
				equal = false;
			}
			if ( Object1.Remark != null && Object2.Remark != null )
			{
				if (Object1.Remark != Object2.Remark)
					equal = false;
			}
			else if (Object1.Remark == null ^ Object2.Remark == null )
			{
				equal = false;
			}
			if ( Object1.Begmark != null && Object2.Begmark != null )
			{
				if (Object1.Begmark != Object2.Begmark)
					equal = false;
			}
			else if (Object1.Begmark == null ^ Object2.Begmark == null )
			{
				equal = false;
			}
			if ( Object1.Endmark != null && Object2.Endmark != null )
			{
				if (Object1.Endmark != Object2.Endmark)
					equal = false;
			}
			else if (Object1.Endmark == null ^ Object2.Endmark == null )
			{
				equal = false;
			}
			if (Object1.Status != Object2.Status)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CsCardBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CsCardComparer GetComparer()
        {
            return new CsCardComparer();
        }
        */

        // Comparer delegates back to CsCard
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CsCard rhs, CsCardColumn which)
        {
            switch (which)
            {
            	
            	
            	case CsCardColumn.CardId:
            		return this.CardId.CompareTo(rhs.CardId);
            		
            		                 
            	
            	
            	case CsCardColumn.IsVip:
            		return this.IsVip.Value.CompareTo(rhs.IsVip.Value);
            		
            		                 
            	
            	
            	case CsCardColumn.CsSex:
            		return this.CsSex.Value.CompareTo(rhs.CsSex.Value);
            		
            		                 
            	
            	
            	case CsCardColumn.PersonId:
            		return this.PersonId.CompareTo(rhs.PersonId);
            		
            		                 
            	
            	
            	case CsCardColumn.Birthday:
            		return this.Birthday.Value.CompareTo(rhs.Birthday.Value);
            		
            		                 
            	
            	
            	case CsCardColumn.PsIssuedate:
            		return this.PsIssuedate.Value.CompareTo(rhs.PsIssuedate.Value);
            		
            		                 
            	
            	
            	case CsCardColumn.PsPlaceissuse:
            		return this.PsPlaceissuse.CompareTo(rhs.PsPlaceissuse);
            		
            		                 
            	
            	
            	case CsCardColumn.Fullname:
            		return this.Fullname.CompareTo(rhs.Fullname);
            		
            		                 
            	
            	
            	case CsCardColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case CsCardColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case CsCardColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case CsCardColumn.DiscPc:
            		return this.DiscPc.Value.CompareTo(rhs.DiscPc.Value);
            		
            		                 
            	
            	
            	case CsCardColumn.IssDate:
            		return this.IssDate.Value.CompareTo(rhs.IssDate.Value);
            		
            		                 
            	
            	
            	case CsCardColumn.DueDate:
            		return this.DueDate.Value.CompareTo(rhs.DueDate.Value);
            		
            		                 
            	
            		                 
            	
            	
            	case CsCardColumn.Remark:
            		return this.Remark.CompareTo(rhs.Remark);
            		
            		                 
            	
            	
            	case CsCardColumn.Begmark:
            		return this.Begmark.Value.CompareTo(rhs.Begmark.Value);
            		
            		                 
            	
            	
            	case CsCardColumn.Endmark:
            		return this.Endmark.Value.CompareTo(rhs.Endmark.Value);
            		
            		                 
            	
            	
            	case CsCardColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CsCardKey> Members
		
		// member variable for the EntityId property
		private CsCardKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CsCardKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CsCardKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CsCard")
					.Append("|").Append( this.CardId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- CardId: {0}{19}- IsVip: {1}{19}- CsSex: {2}{19}- PersonId: {3}{19}- Birthday: {4}{19}- PsIssuedate: {5}{19}- PsPlaceissuse: {6}{19}- Fullname: {7}{19}- Address: {8}{19}- Phone: {9}{19}- Email: {10}{19}- DiscPc: {11}{19}- IssDate: {12}{19}- DueDate: {13}{19}- Image: {14}{19}- Remark: {15}{19}- Begmark: {16}{19}- Endmark: {17}{19}- Status: {18}{19}{21}", 
				this.CardId,
				(this.IsVip == null) ? string.Empty : this.IsVip.ToString(),
				(this.CsSex == null) ? string.Empty : this.CsSex.ToString(),
				(this.PersonId == null) ? string.Empty : this.PersonId.ToString(),
				(this.Birthday == null) ? string.Empty : this.Birthday.ToString(),
				(this.PsIssuedate == null) ? string.Empty : this.PsIssuedate.ToString(),
				(this.PsPlaceissuse == null) ? string.Empty : this.PsPlaceissuse.ToString(),
				this.Fullname,
				this.Address,
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.DiscPc == null) ? string.Empty : this.DiscPc.ToString(),
				(this.IssDate == null) ? string.Empty : this.IssDate.ToString(),
				(this.DueDate == null) ? string.Empty : this.DueDate.ToString(),
				(this.Image == null) ? string.Empty : this.Image.ToString(),
				(this.Remark == null) ? string.Empty : this.Remark.ToString(),
				(this.Begmark == null) ? string.Empty : this.Begmark.ToString(),
				(this.Endmark == null) ? string.Empty : this.Endmark.ToString(),
				this.Status,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblCsCard' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CsCardEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// card_id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblCsCard"</remarks>
		public System.String CardId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalCardId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// is_vip : 
		/// </summary>
		public System.Boolean? IsVip = null;
		
		/// <summary>
		/// cs_sex : 
		/// </summary>
		public System.Boolean? CsSex = null;
		
		/// <summary>
		/// person_id : 
		/// </summary>
		public System.String PersonId = null;
		
		/// <summary>
		/// birthday : 
		/// </summary>
		public System.DateTime? Birthday = null;
		
		/// <summary>
		/// ps_issuedate : 
		/// </summary>
		public System.DateTime? PsIssuedate = null;
		
		/// <summary>
		/// ps_placeissuse : 
		/// </summary>
		public System.String PsPlaceissuse = null;
		
		/// <summary>
		/// fullname : 
		/// </summary>
		public System.String Fullname = string.Empty;
		
		/// <summary>
		/// address : 
		/// </summary>
		public System.String Address = string.Empty;
		
		/// <summary>
		/// phone : 
		/// </summary>
		public System.String Phone = null;
		
		/// <summary>
		/// email : 
		/// </summary>
		public System.String Email = null;
		
		/// <summary>
		/// disc_pc : 
		/// </summary>
		public System.Decimal? DiscPc = 0m;
		
		/// <summary>
		/// iss_date : 
		/// </summary>
		public System.DateTime? IssDate = null;
		
		/// <summary>
		/// due_date : 
		/// </summary>
		public System.DateTime? DueDate = null;
		
		/// <summary>
		/// image : 
		/// </summary>
		public System.Byte[] Image = null;
		
		/// <summary>
		/// remark : 
		/// </summary>
		public System.String Remark = null;
		
		/// <summary>
		/// begmark : 
		/// </summary>
		public System.Decimal? Begmark = 0m;
		
		/// <summary>
		/// endmark : 
		/// </summary>
		public System.Decimal? Endmark = 0m;
		
		/// <summary>
		/// status : 
		/// </summary>
		public System.Boolean Status = true;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CsCardEntityData _tmp = new CsCardEntityData();
						
			_tmp.CardId = this.CardId;
			_tmp.OriginalCardId = this.OriginalCardId;
			
			_tmp.IsVip = this.IsVip;
			_tmp.CsSex = this.CsSex;
			_tmp.PersonId = this.PersonId;
			_tmp.Birthday = this.Birthday;
			_tmp.PsIssuedate = this.PsIssuedate;
			_tmp.PsPlaceissuse = this.PsPlaceissuse;
			_tmp.Fullname = this.Fullname;
			_tmp.Address = this.Address;
			_tmp.Phone = this.Phone;
			_tmp.Email = this.Email;
			_tmp.DiscPc = this.DiscPc;
			_tmp.IssDate = this.IssDate;
			_tmp.DueDate = this.DueDate;
			_tmp.Image = this.Image;
			_tmp.Remark = this.Remark;
			_tmp.Begmark = this.Begmark;
			_tmp.Endmark = this.Endmark;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CsCardEntityData _tmp = new CsCardEntityData();
						
			_tmp.CardId = this.CardId;
			_tmp.OriginalCardId = this.OriginalCardId;
			
			_tmp.IsVip = this.IsVip;
			_tmp.CsSex = this.CsSex;
			_tmp.PersonId = this.PersonId;
			_tmp.Birthday = this.Birthday;
			_tmp.PsIssuedate = this.PsIssuedate;
			_tmp.PsPlaceissuse = this.PsPlaceissuse;
			_tmp.Fullname = this.Fullname;
			_tmp.Address = this.Address;
			_tmp.Phone = this.Phone;
			_tmp.Email = this.Email;
			_tmp.DiscPc = this.DiscPc;
			_tmp.IssDate = this.IssDate;
			_tmp.DueDate = this.DueDate;
			_tmp.Image = this.Image;
			_tmp.Remark = this.Remark;
			_tmp.Begmark = this.Begmark;
			_tmp.Endmark = this.Endmark;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CsCardColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CsCardColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CsCardColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CsCardColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CsCardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CsCardColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				CsCardEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CsCardEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CsCardColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CsCardColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CsCardEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CsCardEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CsCardEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CsCard"/> object.
	/// </remarks>
	public class CsCardEventArgs : System.EventArgs
	{
		private CsCardColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CsCardEventArgs class.
		///</summary>
		public CsCardEventArgs(CsCardColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CsCardEventArgs class.
		///</summary>
		public CsCardEventArgs(CsCardColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CsCardColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CsCardColumn" />
		public CsCardColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CsCard related events.
	///</summary>
	public delegate void CsCardEventHandler(object sender, CsCardEventArgs e);
	
	#region CsCardComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CsCardComparer : System.Collections.Generic.IComparer<CsCard>
	{
		CsCardColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CsCardComparer"/> class.
        /// </summary>
		public CsCardComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CsCardComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CsCardComparer(CsCardColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="CsCard"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="CsCard"/> to compare.</param>
        /// <param name="b">The second <c>CsCard</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CsCard a, CsCard b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CsCard entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CsCard a, CsCard b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CsCardColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CsCardKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CsCard"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CsCardKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CsCardKey class.
		/// </summary>
		public CsCardKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CsCardKey class.
		/// </summary>
		public CsCardKey(CsCardBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CardId = entity.CardId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CsCardKey class.
		/// </summary>
		public CsCardKey(System.String _cardId)
		{
			#region Init Properties

			this.CardId = _cardId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CsCardBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CsCardBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CardId property
		private System.String _cardId;
		
		/// <summary>
		/// Gets or sets the CardId property.
		/// </summary>
		public System.String CardId
		{
			get { return _cardId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CardId = value;
				
				_cardId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CardId = ( values["CardId"] != null ) ? (System.String) EntityUtil.ChangeType(values["CardId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CardId", CardId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CardId: {0}{1}",
								CardId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CsCardColumn Enum
	
	/// <summary>
	/// Enumerate the CsCard columns.
	/// </summary>
	[Serializable]
	public enum CsCardColumn : int
	{
		/// <summary>
		/// CardId : 
		/// </summary>
		[EnumTextValue("Card Id")]
		[ColumnEnum("card_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 8)]
		CardId = 1,
		/// <summary>
		/// IsVip : 
		/// </summary>
		[EnumTextValue("Is Vip")]
		[ColumnEnum("is_vip", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsVip = 2,
		/// <summary>
		/// CsSex : 
		/// </summary>
		[EnumTextValue("Cs Sex")]
		[ColumnEnum("cs_sex", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		CsSex = 3,
		/// <summary>
		/// PersonId : 
		/// </summary>
		[EnumTextValue("Person Id")]
		[ColumnEnum("person_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 20)]
		PersonId = 4,
		/// <summary>
		/// Birthday : 
		/// </summary>
		[EnumTextValue("Birthday")]
		[ColumnEnum("birthday", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Birthday = 5,
		/// <summary>
		/// PsIssuedate : 
		/// </summary>
		[EnumTextValue("Ps Issuedate")]
		[ColumnEnum("ps_issuedate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PsIssuedate = 6,
		/// <summary>
		/// PsPlaceissuse : 
		/// </summary>
		[EnumTextValue("Ps Placeissuse")]
		[ColumnEnum("ps_placeissuse", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 100)]
		PsPlaceissuse = 7,
		/// <summary>
		/// Fullname : 
		/// </summary>
		[EnumTextValue("Fullname")]
		[ColumnEnum("fullname", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		Fullname = 8,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("address", typeof(System.String), System.Data.DbType.String, false, false, false, 300)]
		Address = 9,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("phone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Phone = 10,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("email", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		Email = 11,
		/// <summary>
		/// DiscPc : 
		/// </summary>
		[EnumTextValue("Disc Pc")]
		[ColumnEnum("disc_pc", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		DiscPc = 12,
		/// <summary>
		/// IssDate : 
		/// </summary>
		[EnumTextValue("Iss Date")]
		[ColumnEnum("iss_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		IssDate = 13,
		/// <summary>
		/// DueDate : 
		/// </summary>
		[EnumTextValue("Due Date")]
		[ColumnEnum("due_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DueDate = 14,
		/// <summary>
		/// Image : 
		/// </summary>
		[EnumTextValue("Image")]
		[ColumnEnum("image", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		Image = 15,
		/// <summary>
		/// Remark : 
		/// </summary>
		[EnumTextValue("Remark")]
		[ColumnEnum("remark", typeof(System.String), System.Data.DbType.String, false, false, true, 300)]
		Remark = 16,
		/// <summary>
		/// Begmark : 
		/// </summary>
		[EnumTextValue("Begmark")]
		[ColumnEnum("begmark", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Begmark = 17,
		/// <summary>
		/// Endmark : 
		/// </summary>
		[EnumTextValue("Endmark")]
		[ColumnEnum("endmark", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Endmark = 18,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("status", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Status = 19
	}//End enum

	#endregion CsCardColumn Enum

} // end namespace
