
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Goods.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblGoods' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class GoodsBase : EntityBase, IGoods, IEntityId<GoodsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private GoodsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private GoodsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private GoodsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Goods> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GoodsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event GoodsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="GoodsBase"/> instance.
		///</summary>
		public GoodsBase()
		{
			this.entityData = new GoodsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="GoodsBase"/> instance.
		///</summary>
		///<param name="_goodsId"></param>
		///<param name="_barcode"></param>
		///<param name="_mbc"></param>
		///<param name="_safeNameRef"></param>
		///<param name="_grpId"></param>
		///<param name="_shortName"></param>
		///<param name="_fullName"></param>
		///<param name="_packunit"></param>
		///<param name="_piceunit"></param>
		///<param name="_unitconv"></param>
		///<param name="_suppId"></param>
		///<param name="_image"></param>
		///<param name="_openDate"></param>
		///<param name="_taxCode"></param>
		///<param name="_mercType"></param>
		///<param name="_attrType"></param>
		///<param name="_domestic"></param>
		///<param name="_warranty"></param>
		///<param name="_status"></param>
		public GoodsBase(System.String _goodsId, System.String _barcode, System.Boolean _mbc, 
			System.String _safeNameRef, System.String _grpId, System.String _shortName, System.String _fullName, 
			System.String _packunit, System.String _piceunit, System.Decimal _unitconv, System.String _suppId, 
			System.Byte[] _image, System.DateTime? _openDate, System.String _taxCode, System.String _mercType, 
			System.String _attrType, System.Boolean? _domestic, System.Boolean? _warranty, System.Boolean? _status)
		{
			this.entityData = new GoodsEntityData();
			this.backupData = null;

			this.GoodsId = _goodsId;
			this.Barcode = _barcode;
			this.Mbc = _mbc;
			this.SafeNameRef = _safeNameRef;
			this.GrpId = _grpId;
			this.ShortName = _shortName;
			this.FullName = _fullName;
			this.Packunit = _packunit;
			this.Piceunit = _piceunit;
			this.Unitconv = _unitconv;
			this.SuppId = _suppId;
			this.Image = _image;
			this.OpenDate = _openDate;
			this.TaxCode = _taxCode;
			this.MercType = _mercType;
			this.AttrType = _attrType;
			this.Domestic = _domestic;
			this.Warranty = _warranty;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Goods"/> instance.
		///</summary>
		///<param name="_goodsId"></param>
		///<param name="_barcode"></param>
		///<param name="_mbc"></param>
		///<param name="_safeNameRef"></param>
		///<param name="_grpId"></param>
		///<param name="_shortName"></param>
		///<param name="_fullName"></param>
		///<param name="_packunit"></param>
		///<param name="_piceunit"></param>
		///<param name="_unitconv"></param>
		///<param name="_suppId"></param>
		///<param name="_image"></param>
		///<param name="_openDate"></param>
		///<param name="_taxCode"></param>
		///<param name="_mercType"></param>
		///<param name="_attrType"></param>
		///<param name="_domestic"></param>
		///<param name="_warranty"></param>
		///<param name="_status"></param>
		public static Goods CreateGoods(System.String _goodsId, System.String _barcode, System.Boolean _mbc, 
			System.String _safeNameRef, System.String _grpId, System.String _shortName, System.String _fullName, 
			System.String _packunit, System.String _piceunit, System.Decimal _unitconv, System.String _suppId, 
			System.Byte[] _image, System.DateTime? _openDate, System.String _taxCode, System.String _mercType, 
			System.String _attrType, System.Boolean? _domestic, System.Boolean? _warranty, System.Boolean? _status)
		{
			Goods newGoods = new Goods();
			newGoods.GoodsId = _goodsId;
			newGoods.Barcode = _barcode;
			newGoods.Mbc = _mbc;
			newGoods.SafeNameRef = _safeNameRef;
			newGoods.GrpId = _grpId;
			newGoods.ShortName = _shortName;
			newGoods.FullName = _fullName;
			newGoods.Packunit = _packunit;
			newGoods.Piceunit = _piceunit;
			newGoods.Unitconv = _unitconv;
			newGoods.SuppId = _suppId;
			newGoods.Image = _image;
			newGoods.OpenDate = _openDate;
			newGoods.TaxCode = _taxCode;
			newGoods.MercType = _mercType;
			newGoods.AttrType = _attrType;
			newGoods.Domestic = _domestic;
			newGoods.Warranty = _warranty;
			newGoods.Status = _status;
			return newGoods;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GoodsId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 6)]
		public virtual System.String GoodsId
		{
			get
			{
				return this.entityData.GoodsId; 
			}
			
			set
			{
				if (this.entityData.GoodsId == value)
					return;
				
                OnPropertyChanging("GoodsId");                    
				OnColumnChanging(GoodsColumn.GoodsId, this.entityData.GoodsId);
				this.entityData.GoodsId = value;
				this.EntityId.GoodsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.GoodsId, this.entityData.GoodsId);
				OnPropertyChanged("GoodsId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the goods_id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the goods_id property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalGoodsId
		{
			get { return this.entityData.OriginalGoodsId; }
			set { this.entityData.OriginalGoodsId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Barcode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String Barcode
		{
			get
			{
				return this.entityData.Barcode; 
			}
			
			set
			{
				if (this.entityData.Barcode == value)
					return;
				
                OnPropertyChanging("Barcode");                    
				OnColumnChanging(GoodsColumn.Barcode, this.entityData.Barcode);
				this.entityData.Barcode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Barcode, this.entityData.Barcode);
				OnPropertyChanged("Barcode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mbc property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Mbc
		{
			get
			{
				return this.entityData.Mbc; 
			}
			
			set
			{
				if (this.entityData.Mbc == value)
					return;
				
                OnPropertyChanging("Mbc");                    
				OnColumnChanging(GoodsColumn.Mbc, this.entityData.Mbc);
				this.entityData.Mbc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Mbc, this.entityData.Mbc);
				OnPropertyChanged("Mbc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeNameRef property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String SafeNameRef
		{
			get
			{
				return this.entityData.SafeNameRef; 
			}
			
			set
			{
				if (this.entityData.SafeNameRef == value)
					return;
				
                OnPropertyChanging("SafeNameRef");                    
				OnColumnChanging(GoodsColumn.SafeNameRef, this.entityData.SafeNameRef);
				this.entityData.SafeNameRef = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.SafeNameRef, this.entityData.SafeNameRef);
				OnPropertyChanged("SafeNameRef");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GrpId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String GrpId
		{
			get
			{
				return this.entityData.GrpId; 
			}
			
			set
			{
				if (this.entityData.GrpId == value)
					return;
				
                OnPropertyChanging("GrpId");                    
				OnColumnChanging(GoodsColumn.GrpId, this.entityData.GrpId);
				this.entityData.GrpId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.GrpId, this.entityData.GrpId);
				OnPropertyChanged("GrpId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShortName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String ShortName
		{
			get
			{
				return this.entityData.ShortName; 
			}
			
			set
			{
				if (this.entityData.ShortName == value)
					return;
				
                OnPropertyChanging("ShortName");                    
				OnColumnChanging(GoodsColumn.ShortName, this.entityData.ShortName);
				this.entityData.ShortName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.ShortName, this.entityData.ShortName);
				OnPropertyChanged("ShortName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FullName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 200)]
		public virtual System.String FullName
		{
			get
			{
				return this.entityData.FullName; 
			}
			
			set
			{
				if (this.entityData.FullName == value)
					return;
				
                OnPropertyChanging("FullName");                    
				OnColumnChanging(GoodsColumn.FullName, this.entityData.FullName);
				this.entityData.FullName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.FullName, this.entityData.FullName);
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Packunit property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String Packunit
		{
			get
			{
				return this.entityData.Packunit; 
			}
			
			set
			{
				if (this.entityData.Packunit == value)
					return;
				
                OnPropertyChanging("Packunit");                    
				OnColumnChanging(GoodsColumn.Packunit, this.entityData.Packunit);
				this.entityData.Packunit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Packunit, this.entityData.Packunit);
				OnPropertyChanged("Packunit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Piceunit property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String Piceunit
		{
			get
			{
				return this.entityData.Piceunit; 
			}
			
			set
			{
				if (this.entityData.Piceunit == value)
					return;
				
                OnPropertyChanging("Piceunit");                    
				OnColumnChanging(GoodsColumn.Piceunit, this.entityData.Piceunit);
				this.entityData.Piceunit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Piceunit, this.entityData.Piceunit);
				OnPropertyChanged("Piceunit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Unitconv property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Unitconv
		{
			get
			{
				return this.entityData.Unitconv; 
			}
			
			set
			{
				if (this.entityData.Unitconv == value)
					return;
				
                OnPropertyChanging("Unitconv");                    
				OnColumnChanging(GoodsColumn.Unitconv, this.entityData.Unitconv);
				this.entityData.Unitconv = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Unitconv, this.entityData.Unitconv);
				OnPropertyChanged("Unitconv");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SuppId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 5)]
		public virtual System.String SuppId
		{
			get
			{
				return this.entityData.SuppId; 
			}
			
			set
			{
				if (this.entityData.SuppId == value)
					return;
				
                OnPropertyChanging("SuppId");                    
				OnColumnChanging(GoodsColumn.SuppId, this.entityData.SuppId);
				this.entityData.SuppId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.SuppId, this.entityData.SuppId);
				OnPropertyChanged("SuppId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Image property. 
		///		
		/// </summary>
		/// <value>This type is image.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Byte[] Image
		{
			get
			{
				return this.entityData.Image; 
			}
			
			set
			{
				if (this.entityData.Image == value)
					return;
				
                OnPropertyChanging("Image");                    
				OnColumnChanging(GoodsColumn.Image, this.entityData.Image);
				this.entityData.Image = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Image, this.entityData.Image);
				OnPropertyChanged("Image");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OpenDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? OpenDate
		{
			get
			{
				return this.entityData.OpenDate; 
			}
			
			set
			{
				if (this.entityData.OpenDate == value)
					return;
				
                OnPropertyChanging("OpenDate");                    
				OnColumnChanging(GoodsColumn.OpenDate, this.entityData.OpenDate);
				this.entityData.OpenDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.OpenDate, this.entityData.OpenDate);
				OnPropertyChanged("OpenDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxCode property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String TaxCode
		{
			get
			{
				return this.entityData.TaxCode; 
			}
			
			set
			{
				if (this.entityData.TaxCode == value)
					return;
				
                OnPropertyChanging("TaxCode");                    
				OnColumnChanging(GoodsColumn.TaxCode, this.entityData.TaxCode);
				this.entityData.TaxCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.TaxCode, this.entityData.TaxCode);
				OnPropertyChanged("TaxCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MercType property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String MercType
		{
			get
			{
				return this.entityData.MercType; 
			}
			
			set
			{
				if (this.entityData.MercType == value)
					return;
				
                OnPropertyChanging("MercType");                    
				OnColumnChanging(GoodsColumn.MercType, this.entityData.MercType);
				this.entityData.MercType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.MercType, this.entityData.MercType);
				OnPropertyChanged("MercType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttrType property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String AttrType
		{
			get
			{
				return this.entityData.AttrType; 
			}
			
			set
			{
				if (this.entityData.AttrType == value)
					return;
				
                OnPropertyChanging("AttrType");                    
				OnColumnChanging(GoodsColumn.AttrType, this.entityData.AttrType);
				this.entityData.AttrType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.AttrType, this.entityData.AttrType);
				OnPropertyChanged("AttrType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Domestic property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Domestic
		{
			get
			{
				return this.entityData.Domestic; 
			}
			
			set
			{
				if (this.entityData.Domestic == value)
					return;
				
                OnPropertyChanging("Domestic");                    
				OnColumnChanging(GoodsColumn.Domestic, this.entityData.Domestic);
				this.entityData.Domestic = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Domestic, this.entityData.Domestic);
				OnPropertyChanged("Domestic");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Warranty property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Warranty
		{
			get
			{
				return this.entityData.Warranty; 
			}
			
			set
			{
				if (this.entityData.Warranty == value)
					return;
				
                OnPropertyChanging("Warranty");                    
				OnColumnChanging(GoodsColumn.Warranty, this.entityData.Warranty);
				this.entityData.Warranty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Warranty, this.entityData.Warranty);
				OnPropertyChanged("Warranty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(GoodsColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(GoodsColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GoodsId", "Goods Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoodsId", "Goods Id", 6));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Barcode", "Barcode"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Barcode", "Barcode", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SafeNameRef", "Ref", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GrpId", "Grp Id", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("ShortName", "Short Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShortName", "Short Name", 100));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("FullName", "Full Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullName", "Full Name", 200));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Packunit", "Packunit"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Packunit", "Packunit", 3));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Piceunit", "Piceunit"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Piceunit", "Piceunit", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SuppId", "Supp Id", 5));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TaxCode", "Tax Code", 3));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MercType", "Merc Type", 2));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("AttrType", "Attr Type", 2));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblGoods"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"goods_id", "barcode", "mbc", "ref", "grp_id", "short_name", "full_name", "packunit", "piceunit", "unitconv", "supp_id", "image", "open_date", "tax_code", "merc_type", "attr_type", "domestic", "warranty", "status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as GoodsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Goods) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Goods>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Goods);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Goods Entity 
		///</summary>
		protected virtual Goods Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Goods copy = new Goods();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GoodsId = this.GoodsId;
					copy.OriginalGoodsId = this.OriginalGoodsId;
				copy.Barcode = this.Barcode;
				copy.Mbc = this.Mbc;
				copy.SafeNameRef = this.SafeNameRef;
				copy.GrpId = this.GrpId;
				copy.ShortName = this.ShortName;
				copy.FullName = this.FullName;
				copy.Packunit = this.Packunit;
				copy.Piceunit = this.Piceunit;
				copy.Unitconv = this.Unitconv;
				copy.SuppId = this.SuppId;
				copy.Image = this.Image;
				copy.OpenDate = this.OpenDate;
				copy.TaxCode = this.TaxCode;
				copy.MercType = this.MercType;
				copy.AttrType = this.AttrType;
				copy.Domestic = this.Domestic;
				copy.Warranty = this.Warranty;
				copy.Status = this.Status;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Goods Entity 
		///</summary>
		public virtual Goods Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Goods Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Goods DeepCopy()
		{
			return EntityHelper.Clone<Goods>(this as Goods);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as GoodsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new GoodsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as GoodsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(GoodsColumn column)
		{
			switch(column)
			{
					case GoodsColumn.GoodsId:
					return entityData.GoodsId != _originalData.GoodsId;
					case GoodsColumn.Barcode:
					return entityData.Barcode != _originalData.Barcode;
					case GoodsColumn.Mbc:
					return entityData.Mbc != _originalData.Mbc;
					case GoodsColumn.SafeNameRef:
					return entityData.SafeNameRef != _originalData.SafeNameRef;
					case GoodsColumn.GrpId:
					return entityData.GrpId != _originalData.GrpId;
					case GoodsColumn.ShortName:
					return entityData.ShortName != _originalData.ShortName;
					case GoodsColumn.FullName:
					return entityData.FullName != _originalData.FullName;
					case GoodsColumn.Packunit:
					return entityData.Packunit != _originalData.Packunit;
					case GoodsColumn.Piceunit:
					return entityData.Piceunit != _originalData.Piceunit;
					case GoodsColumn.Unitconv:
					return entityData.Unitconv != _originalData.Unitconv;
					case GoodsColumn.SuppId:
					return entityData.SuppId != _originalData.SuppId;
					case GoodsColumn.Image:
					return entityData.Image != _originalData.Image;
					case GoodsColumn.OpenDate:
					return entityData.OpenDate != _originalData.OpenDate;
					case GoodsColumn.TaxCode:
					return entityData.TaxCode != _originalData.TaxCode;
					case GoodsColumn.MercType:
					return entityData.MercType != _originalData.MercType;
					case GoodsColumn.AttrType:
					return entityData.AttrType != _originalData.AttrType;
					case GoodsColumn.Domestic:
					return entityData.Domestic != _originalData.Domestic;
					case GoodsColumn.Warranty:
					return entityData.Warranty != _originalData.Warranty;
					case GoodsColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< GoodsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GoodsId != _originalData.GoodsId;
			result = result || entityData.Barcode != _originalData.Barcode;
			result = result || entityData.Mbc != _originalData.Mbc;
			result = result || entityData.SafeNameRef != _originalData.SafeNameRef;
			result = result || entityData.GrpId != _originalData.GrpId;
			result = result || entityData.ShortName != _originalData.ShortName;
			result = result || entityData.FullName != _originalData.FullName;
			result = result || entityData.Packunit != _originalData.Packunit;
			result = result || entityData.Piceunit != _originalData.Piceunit;
			result = result || entityData.Unitconv != _originalData.Unitconv;
			result = result || entityData.SuppId != _originalData.SuppId;
			result = result || entityData.Image != _originalData.Image;
			result = result || entityData.OpenDate != _originalData.OpenDate;
			result = result || entityData.TaxCode != _originalData.TaxCode;
			result = result || entityData.MercType != _originalData.MercType;
			result = result || entityData.AttrType != _originalData.AttrType;
			result = result || entityData.Domestic != _originalData.Domestic;
			result = result || entityData.Warranty != _originalData.Warranty;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a Goods Entity with the original data.
		///</summary>
		public Goods GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateGoods(
				_originalData.GoodsId,
				_originalData.Barcode,
				_originalData.Mbc,
				_originalData.SafeNameRef,
				_originalData.GrpId,
				_originalData.ShortName,
				_originalData.FullName,
				_originalData.Packunit,
				_originalData.Piceunit,
				_originalData.Unitconv,
				_originalData.SuppId,
				_originalData.Image,
				_originalData.OpenDate,
				_originalData.TaxCode,
				_originalData.MercType,
				_originalData.AttrType,
				_originalData.Domestic,
				_originalData.Warranty,
				_originalData.Status
				);
				
			return (Goods)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="GoodsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is GoodsBase)
				return ValueEquals(this, (GoodsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="GoodsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GoodsId.GetHashCode() ^ 
					this.Barcode.GetHashCode() ^ 
					this.Mbc.GetHashCode() ^ 
					((this.SafeNameRef == null) ? string.Empty : this.SafeNameRef.ToString()).GetHashCode() ^ 
					((this.GrpId == null) ? string.Empty : this.GrpId.ToString()).GetHashCode() ^ 
					this.ShortName.GetHashCode() ^ 
					this.FullName.GetHashCode() ^ 
					this.Packunit.GetHashCode() ^ 
					this.Piceunit.GetHashCode() ^ 
					this.Unitconv.GetHashCode() ^ 
					((this.SuppId == null) ? string.Empty : this.SuppId.ToString()).GetHashCode() ^ 
					((this.Image == null) ? string.Empty : this.Image.ToString()).GetHashCode() ^ 
					((this.OpenDate == null) ? string.Empty : this.OpenDate.ToString()).GetHashCode() ^ 
					((this.TaxCode == null) ? string.Empty : this.TaxCode.ToString()).GetHashCode() ^ 
					((this.MercType == null) ? string.Empty : this.MercType.ToString()).GetHashCode() ^ 
					((this.AttrType == null) ? string.Empty : this.AttrType.ToString()).GetHashCode() ^ 
					((this.Domestic == null) ? string.Empty : this.Domestic.ToString()).GetHashCode() ^ 
					((this.Warranty == null) ? string.Empty : this.Warranty.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="GoodsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(GoodsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="GoodsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="GoodsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="GoodsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(GoodsBase Object1, GoodsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GoodsId != Object2.GoodsId)
				equal = false;
			if (Object1.Barcode != Object2.Barcode)
				equal = false;
			if (Object1.Mbc != Object2.Mbc)
				equal = false;
			if ( Object1.SafeNameRef != null && Object2.SafeNameRef != null )
			{
				if (Object1.SafeNameRef != Object2.SafeNameRef)
					equal = false;
			}
			else if (Object1.SafeNameRef == null ^ Object2.SafeNameRef == null )
			{
				equal = false;
			}
			if ( Object1.GrpId != null && Object2.GrpId != null )
			{
				if (Object1.GrpId != Object2.GrpId)
					equal = false;
			}
			else if (Object1.GrpId == null ^ Object2.GrpId == null )
			{
				equal = false;
			}
			if (Object1.ShortName != Object2.ShortName)
				equal = false;
			if (Object1.FullName != Object2.FullName)
				equal = false;
			if (Object1.Packunit != Object2.Packunit)
				equal = false;
			if (Object1.Piceunit != Object2.Piceunit)
				equal = false;
			if (Object1.Unitconv != Object2.Unitconv)
				equal = false;
			if ( Object1.SuppId != null && Object2.SuppId != null )
			{
				if (Object1.SuppId != Object2.SuppId)
					equal = false;
			}
			else if (Object1.SuppId == null ^ Object2.SuppId == null )
			{
				equal = false;
			}
			if ( Object1.Image != null && Object2.Image != null )
			{
				if (Object1.Image != Object2.Image)
					equal = false;
			}
			else if (Object1.Image == null ^ Object2.Image == null )
			{
				equal = false;
			}
			if ( Object1.OpenDate != null && Object2.OpenDate != null )
			{
				if (Object1.OpenDate != Object2.OpenDate)
					equal = false;
			}
			else if (Object1.OpenDate == null ^ Object2.OpenDate == null )
			{
				equal = false;
			}
			if ( Object1.TaxCode != null && Object2.TaxCode != null )
			{
				if (Object1.TaxCode != Object2.TaxCode)
					equal = false;
			}
			else if (Object1.TaxCode == null ^ Object2.TaxCode == null )
			{
				equal = false;
			}
			if ( Object1.MercType != null && Object2.MercType != null )
			{
				if (Object1.MercType != Object2.MercType)
					equal = false;
			}
			else if (Object1.MercType == null ^ Object2.MercType == null )
			{
				equal = false;
			}
			if ( Object1.AttrType != null && Object2.AttrType != null )
			{
				if (Object1.AttrType != Object2.AttrType)
					equal = false;
			}
			else if (Object1.AttrType == null ^ Object2.AttrType == null )
			{
				equal = false;
			}
			if ( Object1.Domestic != null && Object2.Domestic != null )
			{
				if (Object1.Domestic != Object2.Domestic)
					equal = false;
			}
			else if (Object1.Domestic == null ^ Object2.Domestic == null )
			{
				equal = false;
			}
			if ( Object1.Warranty != null && Object2.Warranty != null )
			{
				if (Object1.Warranty != Object2.Warranty)
					equal = false;
			}
			else if (Object1.Warranty == null ^ Object2.Warranty == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((GoodsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static GoodsComparer GetComparer()
        {
            return new GoodsComparer();
        }
        */

        // Comparer delegates back to Goods
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Goods rhs, GoodsColumn which)
        {
            switch (which)
            {
            	
            	
            	case GoodsColumn.GoodsId:
            		return this.GoodsId.CompareTo(rhs.GoodsId);
            		
            		                 
            	
            	
            	case GoodsColumn.Barcode:
            		return this.Barcode.CompareTo(rhs.Barcode);
            		
            		                 
            	
            	
            	case GoodsColumn.Mbc:
            		return this.Mbc.CompareTo(rhs.Mbc);
            		
            		                 
            	
            	
            	case GoodsColumn.SafeNameRef:
            		return this.SafeNameRef.CompareTo(rhs.SafeNameRef);
            		
            		                 
            	
            	
            	case GoodsColumn.GrpId:
            		return this.GrpId.CompareTo(rhs.GrpId);
            		
            		                 
            	
            	
            	case GoodsColumn.ShortName:
            		return this.ShortName.CompareTo(rhs.ShortName);
            		
            		                 
            	
            	
            	case GoodsColumn.FullName:
            		return this.FullName.CompareTo(rhs.FullName);
            		
            		                 
            	
            	
            	case GoodsColumn.Packunit:
            		return this.Packunit.CompareTo(rhs.Packunit);
            		
            		                 
            	
            	
            	case GoodsColumn.Piceunit:
            		return this.Piceunit.CompareTo(rhs.Piceunit);
            		
            		                 
            	
            	
            	case GoodsColumn.Unitconv:
            		return this.Unitconv.CompareTo(rhs.Unitconv);
            		
            		                 
            	
            	
            	case GoodsColumn.SuppId:
            		return this.SuppId.CompareTo(rhs.SuppId);
            		
            		                 
            	
            		                 
            	
            	
            	case GoodsColumn.OpenDate:
            		return this.OpenDate.Value.CompareTo(rhs.OpenDate.Value);
            		
            		                 
            	
            	
            	case GoodsColumn.TaxCode:
            		return this.TaxCode.CompareTo(rhs.TaxCode);
            		
            		                 
            	
            	
            	case GoodsColumn.MercType:
            		return this.MercType.CompareTo(rhs.MercType);
            		
            		                 
            	
            	
            	case GoodsColumn.AttrType:
            		return this.AttrType.CompareTo(rhs.AttrType);
            		
            		                 
            	
            	
            	case GoodsColumn.Domestic:
            		return this.Domestic.Value.CompareTo(rhs.Domestic.Value);
            		
            		                 
            	
            	
            	case GoodsColumn.Warranty:
            		return this.Warranty.Value.CompareTo(rhs.Warranty.Value);
            		
            		                 
            	
            	
            	case GoodsColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<GoodsKey> Members
		
		// member variable for the EntityId property
		private GoodsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual GoodsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new GoodsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Goods")
					.Append("|").Append( this.GoodsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- GoodsId: {0}{19}- Barcode: {1}{19}- Mbc: {2}{19}- SafeNameRef: {3}{19}- GrpId: {4}{19}- ShortName: {5}{19}- FullName: {6}{19}- Packunit: {7}{19}- Piceunit: {8}{19}- Unitconv: {9}{19}- SuppId: {10}{19}- Image: {11}{19}- OpenDate: {12}{19}- TaxCode: {13}{19}- MercType: {14}{19}- AttrType: {15}{19}- Domestic: {16}{19}- Warranty: {17}{19}- Status: {18}{19}{21}", 
				this.GoodsId,
				this.Barcode,
				this.Mbc,
				(this.SafeNameRef == null) ? string.Empty : this.SafeNameRef.ToString(),
				(this.GrpId == null) ? string.Empty : this.GrpId.ToString(),
				this.ShortName,
				this.FullName,
				this.Packunit,
				this.Piceunit,
				this.Unitconv,
				(this.SuppId == null) ? string.Empty : this.SuppId.ToString(),
				(this.Image == null) ? string.Empty : this.Image.ToString(),
				(this.OpenDate == null) ? string.Empty : this.OpenDate.ToString(),
				(this.TaxCode == null) ? string.Empty : this.TaxCode.ToString(),
				(this.MercType == null) ? string.Empty : this.MercType.ToString(),
				(this.AttrType == null) ? string.Empty : this.AttrType.ToString(),
				(this.Domestic == null) ? string.Empty : this.Domestic.ToString(),
				(this.Warranty == null) ? string.Empty : this.Warranty.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblGoods' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class GoodsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// goods_id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblGoods"</remarks>
		public System.String GoodsId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalGoodsId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// barcode : 
		/// </summary>
		public System.String Barcode = string.Empty;
		
		/// <summary>
		/// mbc : 
		/// </summary>
		public System.Boolean Mbc = false;
		
		/// <summary>
		/// ref : 
		/// </summary>
		public System.String SafeNameRef = null;
		
		/// <summary>
		/// grp_id : 
		/// </summary>
		public System.String GrpId = null;
		
		/// <summary>
		/// short_name : 
		/// </summary>
		public System.String ShortName = string.Empty;
		
		/// <summary>
		/// full_name : 
		/// </summary>
		public System.String FullName = string.Empty;
		
		/// <summary>
		/// packunit : 
		/// </summary>
		public System.String Packunit = string.Empty;
		
		/// <summary>
		/// piceunit : 
		/// </summary>
		public System.String Piceunit = string.Empty;
		
		/// <summary>
		/// unitconv : 
		/// </summary>
		public System.Decimal Unitconv = 0.0m;
		
		/// <summary>
		/// supp_id : 
		/// </summary>
		public System.String SuppId = null;
		
		/// <summary>
		/// image : 
		/// </summary>
		public System.Byte[] Image = null;
		
		/// <summary>
		/// open_date : 
		/// </summary>
		public System.DateTime? OpenDate = null;
		
		/// <summary>
		/// tax_code : 
		/// </summary>
		public System.String TaxCode = "0";
		
		/// <summary>
		/// merc_type : 
		/// </summary>
		public System.String MercType = "01";
		
		/// <summary>
		/// attr_type : 
		/// </summary>
		public System.String AttrType = null;
		
		/// <summary>
		/// domestic : 
		/// </summary>
		public System.Boolean? Domestic = null;
		
		/// <summary>
		/// warranty : 
		/// </summary>
		public System.Boolean? Warranty = null;
		
		/// <summary>
		/// status : 
		/// </summary>
		public System.Boolean? Status = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			GoodsEntityData _tmp = new GoodsEntityData();
						
			_tmp.GoodsId = this.GoodsId;
			_tmp.OriginalGoodsId = this.OriginalGoodsId;
			
			_tmp.Barcode = this.Barcode;
			_tmp.Mbc = this.Mbc;
			_tmp.SafeNameRef = this.SafeNameRef;
			_tmp.GrpId = this.GrpId;
			_tmp.ShortName = this.ShortName;
			_tmp.FullName = this.FullName;
			_tmp.Packunit = this.Packunit;
			_tmp.Piceunit = this.Piceunit;
			_tmp.Unitconv = this.Unitconv;
			_tmp.SuppId = this.SuppId;
			_tmp.Image = this.Image;
			_tmp.OpenDate = this.OpenDate;
			_tmp.TaxCode = this.TaxCode;
			_tmp.MercType = this.MercType;
			_tmp.AttrType = this.AttrType;
			_tmp.Domestic = this.Domestic;
			_tmp.Warranty = this.Warranty;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			GoodsEntityData _tmp = new GoodsEntityData();
						
			_tmp.GoodsId = this.GoodsId;
			_tmp.OriginalGoodsId = this.OriginalGoodsId;
			
			_tmp.Barcode = this.Barcode;
			_tmp.Mbc = this.Mbc;
			_tmp.SafeNameRef = this.SafeNameRef;
			_tmp.GrpId = this.GrpId;
			_tmp.ShortName = this.ShortName;
			_tmp.FullName = this.FullName;
			_tmp.Packunit = this.Packunit;
			_tmp.Piceunit = this.Piceunit;
			_tmp.Unitconv = this.Unitconv;
			_tmp.SuppId = this.SuppId;
			_tmp.Image = this.Image;
			_tmp.OpenDate = this.OpenDate;
			_tmp.TaxCode = this.TaxCode;
			_tmp.MercType = this.MercType;
			_tmp.AttrType = this.AttrType;
			_tmp.Domestic = this.Domestic;
			_tmp.Warranty = this.Warranty;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GoodsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(GoodsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GoodsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(GoodsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GoodsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(GoodsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				GoodsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new GoodsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="GoodsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(GoodsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				GoodsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new GoodsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region GoodsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Goods"/> object.
	/// </remarks>
	public class GoodsEventArgs : System.EventArgs
	{
		private GoodsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the GoodsEventArgs class.
		///</summary>
		public GoodsEventArgs(GoodsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the GoodsEventArgs class.
		///</summary>
		public GoodsEventArgs(GoodsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The GoodsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="GoodsColumn" />
		public GoodsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Goods related events.
	///</summary>
	public delegate void GoodsEventHandler(object sender, GoodsEventArgs e);
	
	#region GoodsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class GoodsComparer : System.Collections.Generic.IComparer<Goods>
	{
		GoodsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:GoodsComparer"/> class.
        /// </summary>
		public GoodsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:GoodsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public GoodsComparer(GoodsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Goods"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Goods"/> to compare.</param>
        /// <param name="b">The second <c>Goods</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Goods a, Goods b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Goods entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Goods a, Goods b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public GoodsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region GoodsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Goods"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class GoodsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the GoodsKey class.
		/// </summary>
		public GoodsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the GoodsKey class.
		/// </summary>
		public GoodsKey(GoodsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GoodsId = entity.GoodsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the GoodsKey class.
		/// </summary>
		public GoodsKey(System.String _goodsId)
		{
			#region Init Properties

			this.GoodsId = _goodsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private GoodsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public GoodsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GoodsId property
		private System.String _goodsId;
		
		/// <summary>
		/// Gets or sets the GoodsId property.
		/// </summary>
		public System.String GoodsId
		{
			get { return _goodsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GoodsId = value;
				
				_goodsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GoodsId = ( values["GoodsId"] != null ) ? (System.String) EntityUtil.ChangeType(values["GoodsId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GoodsId", GoodsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GoodsId: {0}{1}",
								GoodsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region GoodsColumn Enum
	
	/// <summary>
	/// Enumerate the Goods columns.
	/// </summary>
	[Serializable]
	public enum GoodsColumn : int
	{
		/// <summary>
		/// GoodsId : 
		/// </summary>
		[EnumTextValue("Goods Id")]
		[ColumnEnum("goods_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 6)]
		GoodsId = 1,
		/// <summary>
		/// Barcode : 
		/// </summary>
		[EnumTextValue("Barcode")]
		[ColumnEnum("barcode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		Barcode = 2,
		/// <summary>
		/// Mbc : 
		/// </summary>
		[EnumTextValue("Mbc")]
		[ColumnEnum("mbc", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Mbc = 3,
		/// <summary>
		/// SafeNameRef : 
		/// </summary>
		[EnumTextValue("Ref")]
		[ColumnEnum("ref", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 10)]
		SafeNameRef = 4,
		/// <summary>
		/// GrpId : 
		/// </summary>
		[EnumTextValue("Grp Id")]
		[ColumnEnum("grp_id", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		GrpId = 5,
		/// <summary>
		/// ShortName : 
		/// </summary>
		[EnumTextValue("Short Name")]
		[ColumnEnum("short_name", typeof(System.String), System.Data.DbType.String, false, false, false, 100)]
		ShortName = 6,
		/// <summary>
		/// FullName : 
		/// </summary>
		[EnumTextValue("Full Name")]
		[ColumnEnum("full_name", typeof(System.String), System.Data.DbType.String, false, false, false, 200)]
		FullName = 7,
		/// <summary>
		/// Packunit : 
		/// </summary>
		[EnumTextValue("Packunit")]
		[ColumnEnum("packunit", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 3)]
		Packunit = 8,
		/// <summary>
		/// Piceunit : 
		/// </summary>
		[EnumTextValue("Piceunit")]
		[ColumnEnum("piceunit", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 3)]
		Piceunit = 9,
		/// <summary>
		/// Unitconv : 
		/// </summary>
		[EnumTextValue("Unitconv")]
		[ColumnEnum("unitconv", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Unitconv = 10,
		/// <summary>
		/// SuppId : 
		/// </summary>
		[EnumTextValue("Supp Id")]
		[ColumnEnum("supp_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 5)]
		SuppId = 11,
		/// <summary>
		/// Image : 
		/// </summary>
		[EnumTextValue("Image")]
		[ColumnEnum("image", typeof(System.Byte[]), System.Data.DbType.Binary, false, false, true)]
		Image = 12,
		/// <summary>
		/// OpenDate : 
		/// </summary>
		[EnumTextValue("Open Date")]
		[ColumnEnum("open_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		OpenDate = 13,
		/// <summary>
		/// TaxCode : 
		/// </summary>
		[EnumTextValue("Tax Code")]
		[ColumnEnum("tax_code", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 3)]
		TaxCode = 14,
		/// <summary>
		/// MercType : 
		/// </summary>
		[EnumTextValue("Merc Type")]
		[ColumnEnum("merc_type", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 2)]
		MercType = 15,
		/// <summary>
		/// AttrType : 
		/// </summary>
		[EnumTextValue("Attr Type")]
		[ColumnEnum("attr_type", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 2)]
		AttrType = 16,
		/// <summary>
		/// Domestic : 
		/// </summary>
		[EnumTextValue("Domestic")]
		[ColumnEnum("domestic", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Domestic = 17,
		/// <summary>
		/// Warranty : 
		/// </summary>
		[EnumTextValue("Warranty")]
		[ColumnEnum("warranty", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Warranty = 18,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("status", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Status = 19
	}//End enum

	#endregion GoodsColumn Enum

} // end namespace
