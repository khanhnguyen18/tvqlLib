
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Reports.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblReports' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ReportsBase : EntityBase, IReports, IEntityId<ReportsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ReportsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ReportsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ReportsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Reports> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ReportsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ReportsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ReportsBase"/> instance.
		///</summary>
		public ReportsBase()
		{
			this.entityData = new ReportsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ReportsBase"/> instance.
		///</summary>
		///<param name="_idx"></param>
		///<param name="_depId"></param>
		///<param name="_repName"></param>
		///<param name="_description"></param>
		///<param name="_procedure"></param>
		///<param name="_depCode"></param>
		///<param name="_status"></param>
		///<param name="_safeNameChecked"></param>
		public ReportsBase(System.Int32 _idx, System.Int32? _depId, System.String _repName, 
			System.String _description, System.String _procedure, System.String _depCode, System.Boolean? _status, 
			System.Boolean _safeNameChecked)
		{
			this.entityData = new ReportsEntityData();
			this.backupData = null;

			this.Idx = _idx;
			this.DepId = _depId;
			this.RepName = _repName;
			this.Description = _description;
			this.Procedure = _procedure;
			this.DepCode = _depCode;
			this.Status = _status;
			this.SafeNameChecked = _safeNameChecked;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Reports"/> instance.
		///</summary>
		///<param name="_idx"></param>
		///<param name="_depId"></param>
		///<param name="_repName"></param>
		///<param name="_description"></param>
		///<param name="_procedure"></param>
		///<param name="_depCode"></param>
		///<param name="_status"></param>
		///<param name="_safeNameChecked"></param>
		public static Reports CreateReports(System.Int32 _idx, System.Int32? _depId, System.String _repName, 
			System.String _description, System.String _procedure, System.String _depCode, System.Boolean? _status, 
			System.Boolean _safeNameChecked)
		{
			Reports newReports = new Reports();
			newReports.Idx = _idx;
			newReports.DepId = _depId;
			newReports.RepName = _repName;
			newReports.Description = _description;
			newReports.Procedure = _procedure;
			newReports.DepCode = _depCode;
			newReports.Status = _status;
			newReports.SafeNameChecked = _safeNameChecked;
			return newReports;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Idx property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 Idx
		{
			get
			{
				return this.entityData.Idx; 
			}
			
			set
			{
				if (this.entityData.Idx == value)
					return;
				
                OnPropertyChanging("Idx");                    
				OnColumnChanging(ReportsColumn.Idx, this.entityData.Idx);
				this.entityData.Idx = value;
				this.EntityId.Idx = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReportsColumn.Idx, this.entityData.Idx);
				OnPropertyChanged("Idx");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the idx property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the idx property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalIdx
		{
			get { return this.entityData.OriginalIdx; }
			set { this.entityData.OriginalIdx = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the DepId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DepId
		{
			get
			{
				return this.entityData.DepId; 
			}
			
			set
			{
				if (this.entityData.DepId == value)
					return;
				
                OnPropertyChanging("DepId");                    
				OnColumnChanging(ReportsColumn.DepId, this.entityData.DepId);
				this.entityData.DepId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReportsColumn.DepId, this.entityData.DepId);
				OnPropertyChanged("DepId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RepName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String RepName
		{
			get
			{
				return this.entityData.RepName; 
			}
			
			set
			{
				if (this.entityData.RepName == value)
					return;
				
                OnPropertyChanging("RepName");                    
				OnColumnChanging(ReportsColumn.RepName, this.entityData.RepName);
				this.entityData.RepName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReportsColumn.RepName, this.entityData.RepName);
				OnPropertyChanged("RepName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
				
                OnPropertyChanging("Description");                    
				OnColumnChanging(ReportsColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReportsColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Procedure property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String Procedure
		{
			get
			{
				return this.entityData.Procedure; 
			}
			
			set
			{
				if (this.entityData.Procedure == value)
					return;
				
                OnPropertyChanging("Procedure");                    
				OnColumnChanging(ReportsColumn.Procedure, this.entityData.Procedure);
				this.entityData.Procedure = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReportsColumn.Procedure, this.entityData.Procedure);
				OnPropertyChanged("Procedure");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DepCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String DepCode
		{
			get
			{
				return this.entityData.DepCode; 
			}
			
			set
			{
				if (this.entityData.DepCode == value)
					return;
				
                OnPropertyChanging("DepCode");                    
				OnColumnChanging(ReportsColumn.DepCode, this.entityData.DepCode);
				this.entityData.DepCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReportsColumn.DepCode, this.entityData.DepCode);
				OnPropertyChanged("DepCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(ReportsColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReportsColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeNameChecked property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean SafeNameChecked
		{
			get
			{
				return this.entityData.SafeNameChecked; 
			}
			
			set
			{
				if (this.entityData.SafeNameChecked == value)
					return;
				
                OnPropertyChanging("SafeNameChecked");                    
				OnColumnChanging(ReportsColumn.SafeNameChecked, this.entityData.SafeNameChecked);
				this.entityData.SafeNameChecked = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ReportsColumn.SafeNameChecked, this.entityData.SafeNameChecked);
				OnPropertyChanged("SafeNameChecked");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RepName", "Rep Name", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Description", "Description", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Procedure", "Procedure", 40));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DepCode", "Dep Code", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblReports"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"idx", "dep_id", "rep_name", "description", "procedure", "dep_code", "status", "checked"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ReportsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Reports) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Reports>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Reports);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Reports Entity 
		///</summary>
		protected virtual Reports Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Reports copy = new Reports();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Idx = this.Idx;
					copy.OriginalIdx = this.OriginalIdx;
				copy.DepId = this.DepId;
				copy.RepName = this.RepName;
				copy.Description = this.Description;
				copy.Procedure = this.Procedure;
				copy.DepCode = this.DepCode;
				copy.Status = this.Status;
				copy.SafeNameChecked = this.SafeNameChecked;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Reports Entity 
		///</summary>
		public virtual Reports Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Reports Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Reports DeepCopy()
		{
			return EntityHelper.Clone<Reports>(this as Reports);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ReportsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ReportsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ReportsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ReportsColumn column)
		{
			switch(column)
			{
					case ReportsColumn.Idx:
					return entityData.Idx != _originalData.Idx;
					case ReportsColumn.DepId:
					return entityData.DepId != _originalData.DepId;
					case ReportsColumn.RepName:
					return entityData.RepName != _originalData.RepName;
					case ReportsColumn.Description:
					return entityData.Description != _originalData.Description;
					case ReportsColumn.Procedure:
					return entityData.Procedure != _originalData.Procedure;
					case ReportsColumn.DepCode:
					return entityData.DepCode != _originalData.DepCode;
					case ReportsColumn.Status:
					return entityData.Status != _originalData.Status;
					case ReportsColumn.SafeNameChecked:
					return entityData.SafeNameChecked != _originalData.SafeNameChecked;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ReportsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Idx != _originalData.Idx;
			result = result || entityData.DepId != _originalData.DepId;
			result = result || entityData.RepName != _originalData.RepName;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.Procedure != _originalData.Procedure;
			result = result || entityData.DepCode != _originalData.DepCode;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.SafeNameChecked != _originalData.SafeNameChecked;
			return result;
		}	
		
		///<summary>
		///  Returns a Reports Entity with the original data.
		///</summary>
		public Reports GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateReports(
				_originalData.Idx,
				_originalData.DepId,
				_originalData.RepName,
				_originalData.Description,
				_originalData.Procedure,
				_originalData.DepCode,
				_originalData.Status,
				_originalData.SafeNameChecked
				);
				
			return (Reports)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ReportsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ReportsBase)
				return ValueEquals(this, (ReportsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ReportsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Idx.GetHashCode() ^ 
					((this.DepId == null) ? string.Empty : this.DepId.ToString()).GetHashCode() ^ 
					((this.RepName == null) ? string.Empty : this.RepName.ToString()).GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.Procedure == null) ? string.Empty : this.Procedure.ToString()).GetHashCode() ^ 
					((this.DepCode == null) ? string.Empty : this.DepCode.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					this.SafeNameChecked.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ReportsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ReportsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ReportsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ReportsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ReportsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ReportsBase Object1, ReportsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Idx != Object2.Idx)
				equal = false;
			if ( Object1.DepId != null && Object2.DepId != null )
			{
				if (Object1.DepId != Object2.DepId)
					equal = false;
			}
			else if (Object1.DepId == null ^ Object2.DepId == null )
			{
				equal = false;
			}
			if ( Object1.RepName != null && Object2.RepName != null )
			{
				if (Object1.RepName != Object2.RepName)
					equal = false;
			}
			else if (Object1.RepName == null ^ Object2.RepName == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.Procedure != null && Object2.Procedure != null )
			{
				if (Object1.Procedure != Object2.Procedure)
					equal = false;
			}
			else if (Object1.Procedure == null ^ Object2.Procedure == null )
			{
				equal = false;
			}
			if ( Object1.DepCode != null && Object2.DepCode != null )
			{
				if (Object1.DepCode != Object2.DepCode)
					equal = false;
			}
			else if (Object1.DepCode == null ^ Object2.DepCode == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if (Object1.SafeNameChecked != Object2.SafeNameChecked)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ReportsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ReportsComparer GetComparer()
        {
            return new ReportsComparer();
        }
        */

        // Comparer delegates back to Reports
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Reports rhs, ReportsColumn which)
        {
            switch (which)
            {
            	
            	
            	case ReportsColumn.Idx:
            		return this.Idx.CompareTo(rhs.Idx);
            		
            		                 
            	
            	
            	case ReportsColumn.DepId:
            		return this.DepId.Value.CompareTo(rhs.DepId.Value);
            		
            		                 
            	
            	
            	case ReportsColumn.RepName:
            		return this.RepName.CompareTo(rhs.RepName);
            		
            		                 
            	
            	
            	case ReportsColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ReportsColumn.Procedure:
            		return this.Procedure.CompareTo(rhs.Procedure);
            		
            		                 
            	
            	
            	case ReportsColumn.DepCode:
            		return this.DepCode.CompareTo(rhs.DepCode);
            		
            		                 
            	
            	
            	case ReportsColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case ReportsColumn.SafeNameChecked:
            		return this.SafeNameChecked.CompareTo(rhs.SafeNameChecked);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ReportsKey> Members
		
		// member variable for the EntityId property
		private ReportsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ReportsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ReportsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Reports")
					.Append("|").Append( this.Idx.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- Idx: {0}{8}- DepId: {1}{8}- RepName: {2}{8}- Description: {3}{8}- Procedure: {4}{8}- DepCode: {5}{8}- Status: {6}{8}- SafeNameChecked: {7}{8}{10}", 
				this.Idx,
				(this.DepId == null) ? string.Empty : this.DepId.ToString(),
				(this.RepName == null) ? string.Empty : this.RepName.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.Procedure == null) ? string.Empty : this.Procedure.ToString(),
				(this.DepCode == null) ? string.Empty : this.DepCode.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				this.SafeNameChecked,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblReports' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ReportsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// idx : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblReports"</remarks>
		public System.Int32 Idx;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.Int32 OriginalIdx;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// dep_id : 
		/// </summary>
		public System.Int32? DepId = null;
		
		/// <summary>
		/// rep_name : 
		/// </summary>
		public System.String RepName = null;
		
		/// <summary>
		/// description : 
		/// </summary>
		public System.String Description = null;
		
		/// <summary>
		/// procedure : 
		/// </summary>
		public System.String Procedure = null;
		
		/// <summary>
		/// dep_code : 
		/// </summary>
		public System.String DepCode = null;
		
		/// <summary>
		/// status : 
		/// </summary>
		public System.Boolean? Status = null;
		
		/// <summary>
		/// checked : 
		/// </summary>
		public System.Boolean SafeNameChecked = false;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ReportsEntityData _tmp = new ReportsEntityData();
						
			_tmp.Idx = this.Idx;
			_tmp.OriginalIdx = this.OriginalIdx;
			
			_tmp.DepId = this.DepId;
			_tmp.RepName = this.RepName;
			_tmp.Description = this.Description;
			_tmp.Procedure = this.Procedure;
			_tmp.DepCode = this.DepCode;
			_tmp.Status = this.Status;
			_tmp.SafeNameChecked = this.SafeNameChecked;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ReportsEntityData _tmp = new ReportsEntityData();
						
			_tmp.Idx = this.Idx;
			_tmp.OriginalIdx = this.OriginalIdx;
			
			_tmp.DepId = this.DepId;
			_tmp.RepName = this.RepName;
			_tmp.Description = this.Description;
			_tmp.Procedure = this.Procedure;
			_tmp.DepCode = this.DepCode;
			_tmp.Status = this.Status;
			_tmp.SafeNameChecked = this.SafeNameChecked;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ReportsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ReportsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ReportsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ReportsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ReportsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ReportsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ReportsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ReportsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ReportsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ReportsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ReportsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ReportsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ReportsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Reports"/> object.
	/// </remarks>
	public class ReportsEventArgs : System.EventArgs
	{
		private ReportsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ReportsEventArgs class.
		///</summary>
		public ReportsEventArgs(ReportsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ReportsEventArgs class.
		///</summary>
		public ReportsEventArgs(ReportsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ReportsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ReportsColumn" />
		public ReportsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Reports related events.
	///</summary>
	public delegate void ReportsEventHandler(object sender, ReportsEventArgs e);
	
	#region ReportsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ReportsComparer : System.Collections.Generic.IComparer<Reports>
	{
		ReportsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ReportsComparer"/> class.
        /// </summary>
		public ReportsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ReportsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ReportsComparer(ReportsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Reports"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Reports"/> to compare.</param>
        /// <param name="b">The second <c>Reports</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Reports a, Reports b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Reports entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Reports a, Reports b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ReportsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ReportsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Reports"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ReportsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ReportsKey class.
		/// </summary>
		public ReportsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ReportsKey class.
		/// </summary>
		public ReportsKey(ReportsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Idx = entity.Idx;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ReportsKey class.
		/// </summary>
		public ReportsKey(System.Int32 _idx)
		{
			#region Init Properties

			this.Idx = _idx;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ReportsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ReportsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Idx property
		private System.Int32 _idx;
		
		/// <summary>
		/// Gets or sets the Idx property.
		/// </summary>
		public System.Int32 Idx
		{
			get { return _idx; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Idx = value;
				
				_idx = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Idx = ( values["Idx"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Idx"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Idx", Idx);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Idx: {0}{1}",
								Idx,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ReportsColumn Enum
	
	/// <summary>
	/// Enumerate the Reports columns.
	/// </summary>
	[Serializable]
	public enum ReportsColumn : int
	{
		/// <summary>
		/// Idx : 
		/// </summary>
		[EnumTextValue("Idx")]
		[ColumnEnum("idx", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		Idx = 1,
		/// <summary>
		/// DepId : 
		/// </summary>
		[EnumTextValue("Dep Id")]
		[ColumnEnum("dep_id", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DepId = 2,
		/// <summary>
		/// RepName : 
		/// </summary>
		[EnumTextValue("Rep Name")]
		[ColumnEnum("rep_name", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		RepName = 3,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("description", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Description = 4,
		/// <summary>
		/// Procedure : 
		/// </summary>
		[EnumTextValue("Procedure")]
		[ColumnEnum("procedure", typeof(System.String), System.Data.DbType.String, false, false, true, 40)]
		Procedure = 5,
		/// <summary>
		/// DepCode : 
		/// </summary>
		[EnumTextValue("Dep Code")]
		[ColumnEnum("dep_code", typeof(System.String), System.Data.DbType.String, false, false, true, 1)]
		DepCode = 6,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("status", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Status = 7,
		/// <summary>
		/// SafeNameChecked : 
		/// </summary>
		[EnumTextValue("Checked")]
		[ColumnEnum("checked", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		SafeNameChecked = 8
	}//End enum

	#endregion ReportsColumn Enum

} // end namespace
