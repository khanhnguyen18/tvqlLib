
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Menus.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblMenus' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MenusBase : EntityBase, IMenus, IEntityId<MenusKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MenusEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MenusEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MenusEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Menus> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MenusEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MenusEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MenusBase"/> instance.
		///</summary>
		public MenusBase()
		{
			this.entityData = new MenusEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MenusBase"/> instance.
		///</summary>
		///<param name="_subitem"></param>
		///<param name="_parent"></param>
		///<param name="_menukey"></param>
		///<param name="_prompt"></param>
		///<param name="_type"></param>
		///<param name="_procerdue"></param>
		///<param name="_imageidx"></param>
		///<param name="_password"></param>
		///<param name="_basicright"></param>
		///<param name="_depcode"></param>
		///<param name="_skip"></param>
		public MenusBase(System.Int32? _subitem, System.Int32? _parent, System.String _menukey, 
			System.String _prompt, System.String _type, System.String _procerdue, System.Int32? _imageidx, 
			System.Boolean? _password, System.Int32? _basicright, System.String _depcode, System.Boolean? _skip)
		{
			this.entityData = new MenusEntityData();
			this.backupData = null;

			this.Subitem = _subitem;
			this.Parent = _parent;
			this.Menukey = _menukey;
			this.Prompt = _prompt;
			this.Type = _type;
			this.Procerdue = _procerdue;
			this.Imageidx = _imageidx;
			this.Password = _password;
			this.Basicright = _basicright;
			this.Depcode = _depcode;
			this.Skip = _skip;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Menus"/> instance.
		///</summary>
		///<param name="_subitem"></param>
		///<param name="_parent"></param>
		///<param name="_menukey"></param>
		///<param name="_prompt"></param>
		///<param name="_type"></param>
		///<param name="_procerdue"></param>
		///<param name="_imageidx"></param>
		///<param name="_password"></param>
		///<param name="_basicright"></param>
		///<param name="_depcode"></param>
		///<param name="_skip"></param>
		public static Menus CreateMenus(System.Int32? _subitem, System.Int32? _parent, System.String _menukey, 
			System.String _prompt, System.String _type, System.String _procerdue, System.Int32? _imageidx, 
			System.Boolean? _password, System.Int32? _basicright, System.String _depcode, System.Boolean? _skip)
		{
			Menus newMenus = new Menus();
			newMenus.Subitem = _subitem;
			newMenus.Parent = _parent;
			newMenus.Menukey = _menukey;
			newMenus.Prompt = _prompt;
			newMenus.Type = _type;
			newMenus.Procerdue = _procerdue;
			newMenus.Imageidx = _imageidx;
			newMenus.Password = _password;
			newMenus.Basicright = _basicright;
			newMenus.Depcode = _depcode;
			newMenus.Skip = _skip;
			return newMenus;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(MenusColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Subitem property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Subitem
		{
			get
			{
				return this.entityData.Subitem; 
			}
			
			set
			{
				if (this.entityData.Subitem == value)
					return;
				
                OnPropertyChanging("Subitem");                    
				OnColumnChanging(MenusColumn.Subitem, this.entityData.Subitem);
				this.entityData.Subitem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Subitem, this.entityData.Subitem);
				OnPropertyChanged("Subitem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Parent property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Parent
		{
			get
			{
				return this.entityData.Parent; 
			}
			
			set
			{
				if (this.entityData.Parent == value)
					return;
				
                OnPropertyChanging("Parent");                    
				OnColumnChanging(MenusColumn.Parent, this.entityData.Parent);
				this.entityData.Parent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Parent, this.entityData.Parent);
				OnPropertyChanged("Parent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Menukey property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String Menukey
		{
			get
			{
				return this.entityData.Menukey; 
			}
			
			set
			{
				if (this.entityData.Menukey == value)
					return;
				
                OnPropertyChanging("Menukey");                    
				OnColumnChanging(MenusColumn.Menukey, this.entityData.Menukey);
				this.entityData.Menukey = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Menukey, this.entityData.Menukey);
				OnPropertyChanged("Menukey");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Prompt property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Prompt
		{
			get
			{
				return this.entityData.Prompt; 
			}
			
			set
			{
				if (this.entityData.Prompt == value)
					return;
				
                OnPropertyChanging("Prompt");                    
				OnColumnChanging(MenusColumn.Prompt, this.entityData.Prompt);
				this.entityData.Prompt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Prompt, this.entityData.Prompt);
				OnPropertyChanged("Prompt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Type
		{
			get
			{
				return this.entityData.Type; 
			}
			
			set
			{
				if (this.entityData.Type == value)
					return;
				
                OnPropertyChanging("Type");                    
				OnColumnChanging(MenusColumn.Type, this.entityData.Type);
				this.entityData.Type = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Type, this.entityData.Type);
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Procerdue property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String Procerdue
		{
			get
			{
				return this.entityData.Procerdue; 
			}
			
			set
			{
				if (this.entityData.Procerdue == value)
					return;
				
                OnPropertyChanging("Procerdue");                    
				OnColumnChanging(MenusColumn.Procerdue, this.entityData.Procerdue);
				this.entityData.Procerdue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Procerdue, this.entityData.Procerdue);
				OnPropertyChanged("Procerdue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Imageidx property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Imageidx
		{
			get
			{
				return this.entityData.Imageidx; 
			}
			
			set
			{
				if (this.entityData.Imageidx == value)
					return;
				
                OnPropertyChanging("Imageidx");                    
				OnColumnChanging(MenusColumn.Imageidx, this.entityData.Imageidx);
				this.entityData.Imageidx = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Imageidx, this.entityData.Imageidx);
				OnPropertyChanged("Imageidx");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
				
                OnPropertyChanging("Password");                    
				OnColumnChanging(MenusColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Basicright property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Basicright
		{
			get
			{
				return this.entityData.Basicright; 
			}
			
			set
			{
				if (this.entityData.Basicright == value)
					return;
				
                OnPropertyChanging("Basicright");                    
				OnColumnChanging(MenusColumn.Basicright, this.entityData.Basicright);
				this.entityData.Basicright = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Basicright, this.entityData.Basicright);
				OnPropertyChanged("Basicright");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Depcode property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Depcode
		{
			get
			{
				return this.entityData.Depcode; 
			}
			
			set
			{
				if (this.entityData.Depcode == value)
					return;
				
                OnPropertyChanging("Depcode");                    
				OnColumnChanging(MenusColumn.Depcode, this.entityData.Depcode);
				this.entityData.Depcode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Depcode, this.entityData.Depcode);
				OnPropertyChanged("Depcode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Skip property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Skip
		{
			get
			{
				return this.entityData.Skip; 
			}
			
			set
			{
				if (this.entityData.Skip == value)
					return;
				
                OnPropertyChanging("Skip");                    
				OnColumnChanging(MenusColumn.Skip, this.entityData.Skip);
				this.entityData.Skip = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MenusColumn.Skip, this.entityData.Skip);
				OnPropertyChanged("Skip");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Menukey", "Menukey", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Prompt", "Prompt", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Type", "Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Procerdue", "Procerdue", 40));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Depcode", "Depcode", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblMenus"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "subitem", "parent", "menukey", "prompt", "type", "procerdue", "imageidx", "password", "basicright", "depcode", "skip"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MenusEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Menus) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Menus>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Menus);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Menus Entity 
		///</summary>
		protected virtual Menus Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Menus copy = new Menus();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.Subitem = this.Subitem;
				copy.Parent = this.Parent;
				copy.Menukey = this.Menukey;
				copy.Prompt = this.Prompt;
				copy.Type = this.Type;
				copy.Procerdue = this.Procerdue;
				copy.Imageidx = this.Imageidx;
				copy.Password = this.Password;
				copy.Basicright = this.Basicright;
				copy.Depcode = this.Depcode;
				copy.Skip = this.Skip;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Menus Entity 
		///</summary>
		public virtual Menus Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Menus Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Menus DeepCopy()
		{
			return EntityHelper.Clone<Menus>(this as Menus);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MenusEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MenusEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MenusEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MenusColumn column)
		{
			switch(column)
			{
					case MenusColumn.Id:
					return entityData.Id != _originalData.Id;
					case MenusColumn.Subitem:
					return entityData.Subitem != _originalData.Subitem;
					case MenusColumn.Parent:
					return entityData.Parent != _originalData.Parent;
					case MenusColumn.Menukey:
					return entityData.Menukey != _originalData.Menukey;
					case MenusColumn.Prompt:
					return entityData.Prompt != _originalData.Prompt;
					case MenusColumn.Type:
					return entityData.Type != _originalData.Type;
					case MenusColumn.Procerdue:
					return entityData.Procerdue != _originalData.Procerdue;
					case MenusColumn.Imageidx:
					return entityData.Imageidx != _originalData.Imageidx;
					case MenusColumn.Password:
					return entityData.Password != _originalData.Password;
					case MenusColumn.Basicright:
					return entityData.Basicright != _originalData.Basicright;
					case MenusColumn.Depcode:
					return entityData.Depcode != _originalData.Depcode;
					case MenusColumn.Skip:
					return entityData.Skip != _originalData.Skip;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MenusColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Subitem != _originalData.Subitem;
			result = result || entityData.Parent != _originalData.Parent;
			result = result || entityData.Menukey != _originalData.Menukey;
			result = result || entityData.Prompt != _originalData.Prompt;
			result = result || entityData.Type != _originalData.Type;
			result = result || entityData.Procerdue != _originalData.Procerdue;
			result = result || entityData.Imageidx != _originalData.Imageidx;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.Basicright != _originalData.Basicright;
			result = result || entityData.Depcode != _originalData.Depcode;
			result = result || entityData.Skip != _originalData.Skip;
			return result;
		}	
		
		///<summary>
		///  Returns a Menus Entity with the original data.
		///</summary>
		public Menus GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMenus(
				_originalData.Subitem,
				_originalData.Parent,
				_originalData.Menukey,
				_originalData.Prompt,
				_originalData.Type,
				_originalData.Procerdue,
				_originalData.Imageidx,
				_originalData.Password,
				_originalData.Basicright,
				_originalData.Depcode,
				_originalData.Skip
				);
				
			return (Menus)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MenusBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MenusBase)
				return ValueEquals(this, (MenusBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MenusBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.Subitem == null) ? string.Empty : this.Subitem.ToString()).GetHashCode() ^ 
					((this.Parent == null) ? string.Empty : this.Parent.ToString()).GetHashCode() ^ 
					((this.Menukey == null) ? string.Empty : this.Menukey.ToString()).GetHashCode() ^ 
					((this.Prompt == null) ? string.Empty : this.Prompt.ToString()).GetHashCode() ^ 
					((this.Type == null) ? string.Empty : this.Type.ToString()).GetHashCode() ^ 
					((this.Procerdue == null) ? string.Empty : this.Procerdue.ToString()).GetHashCode() ^ 
					((this.Imageidx == null) ? string.Empty : this.Imageidx.ToString()).GetHashCode() ^ 
					((this.Password == null) ? string.Empty : this.Password.ToString()).GetHashCode() ^ 
					((this.Basicright == null) ? string.Empty : this.Basicright.ToString()).GetHashCode() ^ 
					((this.Depcode == null) ? string.Empty : this.Depcode.ToString()).GetHashCode() ^ 
					((this.Skip == null) ? string.Empty : this.Skip.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MenusBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MenusBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MenusBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MenusBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MenusBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MenusBase Object1, MenusBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.Subitem != null && Object2.Subitem != null )
			{
				if (Object1.Subitem != Object2.Subitem)
					equal = false;
			}
			else if (Object1.Subitem == null ^ Object2.Subitem == null )
			{
				equal = false;
			}
			if ( Object1.Parent != null && Object2.Parent != null )
			{
				if (Object1.Parent != Object2.Parent)
					equal = false;
			}
			else if (Object1.Parent == null ^ Object2.Parent == null )
			{
				equal = false;
			}
			if ( Object1.Menukey != null && Object2.Menukey != null )
			{
				if (Object1.Menukey != Object2.Menukey)
					equal = false;
			}
			else if (Object1.Menukey == null ^ Object2.Menukey == null )
			{
				equal = false;
			}
			if ( Object1.Prompt != null && Object2.Prompt != null )
			{
				if (Object1.Prompt != Object2.Prompt)
					equal = false;
			}
			else if (Object1.Prompt == null ^ Object2.Prompt == null )
			{
				equal = false;
			}
			if ( Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object2.Type == null )
			{
				equal = false;
			}
			if ( Object1.Procerdue != null && Object2.Procerdue != null )
			{
				if (Object1.Procerdue != Object2.Procerdue)
					equal = false;
			}
			else if (Object1.Procerdue == null ^ Object2.Procerdue == null )
			{
				equal = false;
			}
			if ( Object1.Imageidx != null && Object2.Imageidx != null )
			{
				if (Object1.Imageidx != Object2.Imageidx)
					equal = false;
			}
			else if (Object1.Imageidx == null ^ Object2.Imageidx == null )
			{
				equal = false;
			}
			if ( Object1.Password != null && Object2.Password != null )
			{
				if (Object1.Password != Object2.Password)
					equal = false;
			}
			else if (Object1.Password == null ^ Object2.Password == null )
			{
				equal = false;
			}
			if ( Object1.Basicright != null && Object2.Basicright != null )
			{
				if (Object1.Basicright != Object2.Basicright)
					equal = false;
			}
			else if (Object1.Basicright == null ^ Object2.Basicright == null )
			{
				equal = false;
			}
			if ( Object1.Depcode != null && Object2.Depcode != null )
			{
				if (Object1.Depcode != Object2.Depcode)
					equal = false;
			}
			else if (Object1.Depcode == null ^ Object2.Depcode == null )
			{
				equal = false;
			}
			if ( Object1.Skip != null && Object2.Skip != null )
			{
				if (Object1.Skip != Object2.Skip)
					equal = false;
			}
			else if (Object1.Skip == null ^ Object2.Skip == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MenusBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MenusComparer GetComparer()
        {
            return new MenusComparer();
        }
        */

        // Comparer delegates back to Menus
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Menus rhs, MenusColumn which)
        {
            switch (which)
            {
            	
            	
            	case MenusColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case MenusColumn.Subitem:
            		return this.Subitem.Value.CompareTo(rhs.Subitem.Value);
            		
            		                 
            	
            	
            	case MenusColumn.Parent:
            		return this.Parent.Value.CompareTo(rhs.Parent.Value);
            		
            		                 
            	
            	
            	case MenusColumn.Menukey:
            		return this.Menukey.CompareTo(rhs.Menukey);
            		
            		                 
            	
            	
            	case MenusColumn.Prompt:
            		return this.Prompt.CompareTo(rhs.Prompt);
            		
            		                 
            	
            	
            	case MenusColumn.Type:
            		return this.Type.CompareTo(rhs.Type);
            		
            		                 
            	
            	
            	case MenusColumn.Procerdue:
            		return this.Procerdue.CompareTo(rhs.Procerdue);
            		
            		                 
            	
            	
            	case MenusColumn.Imageidx:
            		return this.Imageidx.Value.CompareTo(rhs.Imageidx.Value);
            		
            		                 
            	
            	
            	case MenusColumn.Password:
            		return this.Password.Value.CompareTo(rhs.Password.Value);
            		
            		                 
            	
            	
            	case MenusColumn.Basicright:
            		return this.Basicright.Value.CompareTo(rhs.Basicright.Value);
            		
            		                 
            	
            	
            	case MenusColumn.Depcode:
            		return this.Depcode.CompareTo(rhs.Depcode);
            		
            		                 
            	
            	
            	case MenusColumn.Skip:
            		return this.Skip.Value.CompareTo(rhs.Skip.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MenusKey> Members
		
		// member variable for the EntityId property
		private MenusKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MenusKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MenusKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Menus")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- Id: {0}{12}- Subitem: {1}{12}- Parent: {2}{12}- Menukey: {3}{12}- Prompt: {4}{12}- Type: {5}{12}- Procerdue: {6}{12}- Imageidx: {7}{12}- Password: {8}{12}- Basicright: {9}{12}- Depcode: {10}{12}- Skip: {11}{12}{14}", 
				this.Id,
				(this.Subitem == null) ? string.Empty : this.Subitem.ToString(),
				(this.Parent == null) ? string.Empty : this.Parent.ToString(),
				(this.Menukey == null) ? string.Empty : this.Menukey.ToString(),
				(this.Prompt == null) ? string.Empty : this.Prompt.ToString(),
				(this.Type == null) ? string.Empty : this.Type.ToString(),
				(this.Procerdue == null) ? string.Empty : this.Procerdue.ToString(),
				(this.Imageidx == null) ? string.Empty : this.Imageidx.ToString(),
				(this.Password == null) ? string.Empty : this.Password.ToString(),
				(this.Basicright == null) ? string.Empty : this.Basicright.ToString(),
				(this.Depcode == null) ? string.Empty : this.Depcode.ToString(),
				(this.Skip == null) ? string.Empty : this.Skip.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblMenus' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MenusEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblMenus"</remarks>
		public System.Int32 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// subitem : 
		/// </summary>
		public System.Int32? Subitem = null;
		
		/// <summary>
		/// parent : 
		/// </summary>
		public System.Int32? Parent = null;
		
		/// <summary>
		/// menukey : 
		/// </summary>
		public System.String Menukey = null;
		
		/// <summary>
		/// prompt : 
		/// </summary>
		public System.String Prompt = null;
		
		/// <summary>
		/// type : 
		/// </summary>
		public System.String Type = null;
		
		/// <summary>
		/// procerdue : 
		/// </summary>
		public System.String Procerdue = null;
		
		/// <summary>
		/// imageidx : 
		/// </summary>
		public System.Int32? Imageidx = (int)-1;
		
		/// <summary>
		/// password : 
		/// </summary>
		public System.Boolean? Password = null;
		
		/// <summary>
		/// basicright : 
		/// </summary>
		public System.Int32? Basicright = null;
		
		/// <summary>
		/// depcode : 
		/// </summary>
		public System.String Depcode = null;
		
		/// <summary>
		/// skip : 
		/// </summary>
		public System.Boolean? Skip = true;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MenusEntityData _tmp = new MenusEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Subitem = this.Subitem;
			_tmp.Parent = this.Parent;
			_tmp.Menukey = this.Menukey;
			_tmp.Prompt = this.Prompt;
			_tmp.Type = this.Type;
			_tmp.Procerdue = this.Procerdue;
			_tmp.Imageidx = this.Imageidx;
			_tmp.Password = this.Password;
			_tmp.Basicright = this.Basicright;
			_tmp.Depcode = this.Depcode;
			_tmp.Skip = this.Skip;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MenusEntityData _tmp = new MenusEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Subitem = this.Subitem;
			_tmp.Parent = this.Parent;
			_tmp.Menukey = this.Menukey;
			_tmp.Prompt = this.Prompt;
			_tmp.Type = this.Type;
			_tmp.Procerdue = this.Procerdue;
			_tmp.Imageidx = this.Imageidx;
			_tmp.Password = this.Password;
			_tmp.Basicright = this.Basicright;
			_tmp.Depcode = this.Depcode;
			_tmp.Skip = this.Skip;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MenusColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MenusColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MenusColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MenusColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MenusColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MenusColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				MenusEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MenusEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MenusColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MenusColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MenusEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MenusEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MenusEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Menus"/> object.
	/// </remarks>
	public class MenusEventArgs : System.EventArgs
	{
		private MenusColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MenusEventArgs class.
		///</summary>
		public MenusEventArgs(MenusColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MenusEventArgs class.
		///</summary>
		public MenusEventArgs(MenusColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MenusColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MenusColumn" />
		public MenusColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Menus related events.
	///</summary>
	public delegate void MenusEventHandler(object sender, MenusEventArgs e);
	
	#region MenusComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MenusComparer : System.Collections.Generic.IComparer<Menus>
	{
		MenusColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MenusComparer"/> class.
        /// </summary>
		public MenusComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MenusComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MenusComparer(MenusColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Menus"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Menus"/> to compare.</param>
        /// <param name="b">The second <c>Menus</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Menus a, Menus b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Menus entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Menus a, Menus b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MenusColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MenusKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Menus"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MenusKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MenusKey class.
		/// </summary>
		public MenusKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MenusKey class.
		/// </summary>
		public MenusKey(MenusBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MenusKey class.
		/// </summary>
		public MenusKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MenusBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MenusBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MenusColumn Enum
	
	/// <summary>
	/// Enumerate the Menus columns.
	/// </summary>
	[Serializable]
	public enum MenusColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// Subitem : 
		/// </summary>
		[EnumTextValue("Subitem")]
		[ColumnEnum("subitem", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Subitem = 2,
		/// <summary>
		/// Parent : 
		/// </summary>
		[EnumTextValue("Parent")]
		[ColumnEnum("parent", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Parent = 3,
		/// <summary>
		/// Menukey : 
		/// </summary>
		[EnumTextValue("Menukey")]
		[ColumnEnum("menukey", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 30)]
		Menukey = 4,
		/// <summary>
		/// Prompt : 
		/// </summary>
		[EnumTextValue("Prompt")]
		[ColumnEnum("prompt", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Prompt = 5,
		/// <summary>
		/// Type : 
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("type", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 1)]
		Type = 6,
		/// <summary>
		/// Procerdue : 
		/// </summary>
		[EnumTextValue("Procerdue")]
		[ColumnEnum("procerdue", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 40)]
		Procerdue = 7,
		/// <summary>
		/// Imageidx : 
		/// </summary>
		[EnumTextValue("Imageidx")]
		[ColumnEnum("imageidx", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Imageidx = 8,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("password", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Password = 9,
		/// <summary>
		/// Basicright : 
		/// </summary>
		[EnumTextValue("Basicright")]
		[ColumnEnum("basicright", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Basicright = 10,
		/// <summary>
		/// Depcode : 
		/// </summary>
		[EnumTextValue("Depcode")]
		[ColumnEnum("depcode", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 1)]
		Depcode = 11,
		/// <summary>
		/// Skip : 
		/// </summary>
		[EnumTextValue("Skip")]
		[ColumnEnum("skip", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Skip = 12
	}//End enum

	#endregion MenusColumn Enum

} // end namespace
