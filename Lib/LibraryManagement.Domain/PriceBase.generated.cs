
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file Price.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblPrice' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class PriceBase : EntityBase, IPrice, IEntityId<PriceKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private PriceEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private PriceEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private PriceEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Price> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PriceEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event PriceEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="PriceBase"/> instance.
		///</summary>
		public PriceBase()
		{
			this.entityData = new PriceEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="PriceBase"/> instance.
		///</summary>
		///<param name="_goodsId"></param>
		///<param name="_rtprice"></param>
		///<param name="_averimppr"></param>
		///<param name="_lastimppr"></param>
		///<param name="_wsprice"></param>
		///<param name="_prefprice"></param>
		///<param name="_discpercent"></param>
		///<param name="_discFrdate"></param>
		///<param name="_discTodate"></param>
		public PriceBase(System.String _goodsId, System.Decimal? _rtprice, System.Decimal? _averimppr, 
			System.Decimal? _lastimppr, System.Decimal? _wsprice, System.Decimal? _prefprice, System.Decimal? _discpercent, 
			System.DateTime? _discFrdate, System.DateTime? _discTodate)
		{
			this.entityData = new PriceEntityData();
			this.backupData = null;

			this.GoodsId = _goodsId;
			this.Rtprice = _rtprice;
			this.Averimppr = _averimppr;
			this.Lastimppr = _lastimppr;
			this.Wsprice = _wsprice;
			this.Prefprice = _prefprice;
			this.Discpercent = _discpercent;
			this.DiscFrdate = _discFrdate;
			this.DiscTodate = _discTodate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Price"/> instance.
		///</summary>
		///<param name="_goodsId"></param>
		///<param name="_rtprice"></param>
		///<param name="_averimppr"></param>
		///<param name="_lastimppr"></param>
		///<param name="_wsprice"></param>
		///<param name="_prefprice"></param>
		///<param name="_discpercent"></param>
		///<param name="_discFrdate"></param>
		///<param name="_discTodate"></param>
		public static Price CreatePrice(System.String _goodsId, System.Decimal? _rtprice, System.Decimal? _averimppr, 
			System.Decimal? _lastimppr, System.Decimal? _wsprice, System.Decimal? _prefprice, System.Decimal? _discpercent, 
			System.DateTime? _discFrdate, System.DateTime? _discTodate)
		{
			Price newPrice = new Price();
			newPrice.GoodsId = _goodsId;
			newPrice.Rtprice = _rtprice;
			newPrice.Averimppr = _averimppr;
			newPrice.Lastimppr = _lastimppr;
			newPrice.Wsprice = _wsprice;
			newPrice.Prefprice = _prefprice;
			newPrice.Discpercent = _discpercent;
			newPrice.DiscFrdate = _discFrdate;
			newPrice.DiscTodate = _discTodate;
			return newPrice;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the GoodsId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 6)]
		public virtual System.String GoodsId
		{
			get
			{
				return this.entityData.GoodsId; 
			}
			
			set
			{
				if (this.entityData.GoodsId == value)
					return;
				
                OnPropertyChanging("GoodsId");                    
				OnColumnChanging(PriceColumn.GoodsId, this.entityData.GoodsId);
				this.entityData.GoodsId = value;
				this.EntityId.GoodsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.GoodsId, this.entityData.GoodsId);
				OnPropertyChanged("GoodsId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the goods_id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the goods_id property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalGoodsId
		{
			get { return this.entityData.OriginalGoodsId; }
			set { this.entityData.OriginalGoodsId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Rtprice property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Rtprice
		{
			get
			{
				return this.entityData.Rtprice; 
			}
			
			set
			{
				if (this.entityData.Rtprice == value)
					return;
				
                OnPropertyChanging("Rtprice");                    
				OnColumnChanging(PriceColumn.Rtprice, this.entityData.Rtprice);
				this.entityData.Rtprice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.Rtprice, this.entityData.Rtprice);
				OnPropertyChanged("Rtprice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Averimppr property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Averimppr
		{
			get
			{
				return this.entityData.Averimppr; 
			}
			
			set
			{
				if (this.entityData.Averimppr == value)
					return;
				
                OnPropertyChanging("Averimppr");                    
				OnColumnChanging(PriceColumn.Averimppr, this.entityData.Averimppr);
				this.entityData.Averimppr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.Averimppr, this.entityData.Averimppr);
				OnPropertyChanged("Averimppr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Lastimppr property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Lastimppr
		{
			get
			{
				return this.entityData.Lastimppr; 
			}
			
			set
			{
				if (this.entityData.Lastimppr == value)
					return;
				
                OnPropertyChanging("Lastimppr");                    
				OnColumnChanging(PriceColumn.Lastimppr, this.entityData.Lastimppr);
				this.entityData.Lastimppr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.Lastimppr, this.entityData.Lastimppr);
				OnPropertyChanged("Lastimppr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Wsprice property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Wsprice
		{
			get
			{
				return this.entityData.Wsprice; 
			}
			
			set
			{
				if (this.entityData.Wsprice == value)
					return;
				
                OnPropertyChanging("Wsprice");                    
				OnColumnChanging(PriceColumn.Wsprice, this.entityData.Wsprice);
				this.entityData.Wsprice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.Wsprice, this.entityData.Wsprice);
				OnPropertyChanged("Wsprice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Prefprice property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Prefprice
		{
			get
			{
				return this.entityData.Prefprice; 
			}
			
			set
			{
				if (this.entityData.Prefprice == value)
					return;
				
                OnPropertyChanging("Prefprice");                    
				OnColumnChanging(PriceColumn.Prefprice, this.entityData.Prefprice);
				this.entityData.Prefprice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.Prefprice, this.entityData.Prefprice);
				OnPropertyChanged("Prefprice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Discpercent property. 
		///		
		/// </summary>
		/// <value>This type is numeric.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Discpercent
		{
			get
			{
				return this.entityData.Discpercent; 
			}
			
			set
			{
				if (this.entityData.Discpercent == value)
					return;
				
                OnPropertyChanging("Discpercent");                    
				OnColumnChanging(PriceColumn.Discpercent, this.entityData.Discpercent);
				this.entityData.Discpercent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.Discpercent, this.entityData.Discpercent);
				OnPropertyChanged("Discpercent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscFrdate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DiscFrdate
		{
			get
			{
				return this.entityData.DiscFrdate; 
			}
			
			set
			{
				if (this.entityData.DiscFrdate == value)
					return;
				
                OnPropertyChanging("DiscFrdate");                    
				OnColumnChanging(PriceColumn.DiscFrdate, this.entityData.DiscFrdate);
				this.entityData.DiscFrdate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.DiscFrdate, this.entityData.DiscFrdate);
				OnPropertyChanged("DiscFrdate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiscTodate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? DiscTodate
		{
			get
			{
				return this.entityData.DiscTodate; 
			}
			
			set
			{
				if (this.entityData.DiscTodate == value)
					return;
				
                OnPropertyChanging("DiscTodate");                    
				OnColumnChanging(PriceColumn.DiscTodate, this.entityData.DiscTodate);
				this.entityData.DiscTodate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(PriceColumn.DiscTodate, this.entityData.DiscTodate);
				OnPropertyChanged("DiscTodate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GoodsId", "Goods Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoodsId", "Goods Id", 6));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblPrice"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"goods_id", "rtprice", "averimppr", "lastimppr", "wsprice", "prefprice", "discpercent", "disc_frdate", "disc_todate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as PriceEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Price) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Price>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Price);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Price Entity 
		///</summary>
		protected virtual Price Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Price copy = new Price();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.GoodsId = this.GoodsId;
					copy.OriginalGoodsId = this.OriginalGoodsId;
				copy.Rtprice = this.Rtprice;
				copy.Averimppr = this.Averimppr;
				copy.Lastimppr = this.Lastimppr;
				copy.Wsprice = this.Wsprice;
				copy.Prefprice = this.Prefprice;
				copy.Discpercent = this.Discpercent;
				copy.DiscFrdate = this.DiscFrdate;
				copy.DiscTodate = this.DiscTodate;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Price Entity 
		///</summary>
		public virtual Price Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Price Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Price DeepCopy()
		{
			return EntityHelper.Clone<Price>(this as Price);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as PriceEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new PriceEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as PriceEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(PriceColumn column)
		{
			switch(column)
			{
					case PriceColumn.GoodsId:
					return entityData.GoodsId != _originalData.GoodsId;
					case PriceColumn.Rtprice:
					return entityData.Rtprice != _originalData.Rtprice;
					case PriceColumn.Averimppr:
					return entityData.Averimppr != _originalData.Averimppr;
					case PriceColumn.Lastimppr:
					return entityData.Lastimppr != _originalData.Lastimppr;
					case PriceColumn.Wsprice:
					return entityData.Wsprice != _originalData.Wsprice;
					case PriceColumn.Prefprice:
					return entityData.Prefprice != _originalData.Prefprice;
					case PriceColumn.Discpercent:
					return entityData.Discpercent != _originalData.Discpercent;
					case PriceColumn.DiscFrdate:
					return entityData.DiscFrdate != _originalData.DiscFrdate;
					case PriceColumn.DiscTodate:
					return entityData.DiscTodate != _originalData.DiscTodate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< PriceColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.GoodsId != _originalData.GoodsId;
			result = result || entityData.Rtprice != _originalData.Rtprice;
			result = result || entityData.Averimppr != _originalData.Averimppr;
			result = result || entityData.Lastimppr != _originalData.Lastimppr;
			result = result || entityData.Wsprice != _originalData.Wsprice;
			result = result || entityData.Prefprice != _originalData.Prefprice;
			result = result || entityData.Discpercent != _originalData.Discpercent;
			result = result || entityData.DiscFrdate != _originalData.DiscFrdate;
			result = result || entityData.DiscTodate != _originalData.DiscTodate;
			return result;
		}	
		
		///<summary>
		///  Returns a Price Entity with the original data.
		///</summary>
		public Price GetOriginalEntity()
		{
			if (_originalData != null)
				return CreatePrice(
				_originalData.GoodsId,
				_originalData.Rtprice,
				_originalData.Averimppr,
				_originalData.Lastimppr,
				_originalData.Wsprice,
				_originalData.Prefprice,
				_originalData.Discpercent,
				_originalData.DiscFrdate,
				_originalData.DiscTodate
				);
				
			return (Price)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="PriceBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is PriceBase)
				return ValueEquals(this, (PriceBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="PriceBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.GoodsId.GetHashCode() ^ 
					((this.Rtprice == null) ? string.Empty : this.Rtprice.ToString()).GetHashCode() ^ 
					((this.Averimppr == null) ? string.Empty : this.Averimppr.ToString()).GetHashCode() ^ 
					((this.Lastimppr == null) ? string.Empty : this.Lastimppr.ToString()).GetHashCode() ^ 
					((this.Wsprice == null) ? string.Empty : this.Wsprice.ToString()).GetHashCode() ^ 
					((this.Prefprice == null) ? string.Empty : this.Prefprice.ToString()).GetHashCode() ^ 
					((this.Discpercent == null) ? string.Empty : this.Discpercent.ToString()).GetHashCode() ^ 
					((this.DiscFrdate == null) ? string.Empty : this.DiscFrdate.ToString()).GetHashCode() ^ 
					((this.DiscTodate == null) ? string.Empty : this.DiscTodate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="PriceBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(PriceBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="PriceBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="PriceBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="PriceBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(PriceBase Object1, PriceBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.GoodsId != Object2.GoodsId)
				equal = false;
			if ( Object1.Rtprice != null && Object2.Rtprice != null )
			{
				if (Object1.Rtprice != Object2.Rtprice)
					equal = false;
			}
			else if (Object1.Rtprice == null ^ Object2.Rtprice == null )
			{
				equal = false;
			}
			if ( Object1.Averimppr != null && Object2.Averimppr != null )
			{
				if (Object1.Averimppr != Object2.Averimppr)
					equal = false;
			}
			else if (Object1.Averimppr == null ^ Object2.Averimppr == null )
			{
				equal = false;
			}
			if ( Object1.Lastimppr != null && Object2.Lastimppr != null )
			{
				if (Object1.Lastimppr != Object2.Lastimppr)
					equal = false;
			}
			else if (Object1.Lastimppr == null ^ Object2.Lastimppr == null )
			{
				equal = false;
			}
			if ( Object1.Wsprice != null && Object2.Wsprice != null )
			{
				if (Object1.Wsprice != Object2.Wsprice)
					equal = false;
			}
			else if (Object1.Wsprice == null ^ Object2.Wsprice == null )
			{
				equal = false;
			}
			if ( Object1.Prefprice != null && Object2.Prefprice != null )
			{
				if (Object1.Prefprice != Object2.Prefprice)
					equal = false;
			}
			else if (Object1.Prefprice == null ^ Object2.Prefprice == null )
			{
				equal = false;
			}
			if ( Object1.Discpercent != null && Object2.Discpercent != null )
			{
				if (Object1.Discpercent != Object2.Discpercent)
					equal = false;
			}
			else if (Object1.Discpercent == null ^ Object2.Discpercent == null )
			{
				equal = false;
			}
			if ( Object1.DiscFrdate != null && Object2.DiscFrdate != null )
			{
				if (Object1.DiscFrdate != Object2.DiscFrdate)
					equal = false;
			}
			else if (Object1.DiscFrdate == null ^ Object2.DiscFrdate == null )
			{
				equal = false;
			}
			if ( Object1.DiscTodate != null && Object2.DiscTodate != null )
			{
				if (Object1.DiscTodate != Object2.DiscTodate)
					equal = false;
			}
			else if (Object1.DiscTodate == null ^ Object2.DiscTodate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((PriceBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static PriceComparer GetComparer()
        {
            return new PriceComparer();
        }
        */

        // Comparer delegates back to Price
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Price rhs, PriceColumn which)
        {
            switch (which)
            {
            	
            	
            	case PriceColumn.GoodsId:
            		return this.GoodsId.CompareTo(rhs.GoodsId);
            		
            		                 
            	
            	
            	case PriceColumn.Rtprice:
            		return this.Rtprice.Value.CompareTo(rhs.Rtprice.Value);
            		
            		                 
            	
            	
            	case PriceColumn.Averimppr:
            		return this.Averimppr.Value.CompareTo(rhs.Averimppr.Value);
            		
            		                 
            	
            	
            	case PriceColumn.Lastimppr:
            		return this.Lastimppr.Value.CompareTo(rhs.Lastimppr.Value);
            		
            		                 
            	
            	
            	case PriceColumn.Wsprice:
            		return this.Wsprice.Value.CompareTo(rhs.Wsprice.Value);
            		
            		                 
            	
            	
            	case PriceColumn.Prefprice:
            		return this.Prefprice.Value.CompareTo(rhs.Prefprice.Value);
            		
            		                 
            	
            	
            	case PriceColumn.Discpercent:
            		return this.Discpercent.Value.CompareTo(rhs.Discpercent.Value);
            		
            		                 
            	
            	
            	case PriceColumn.DiscFrdate:
            		return this.DiscFrdate.Value.CompareTo(rhs.DiscFrdate.Value);
            		
            		                 
            	
            	
            	case PriceColumn.DiscTodate:
            		return this.DiscTodate.Value.CompareTo(rhs.DiscTodate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<PriceKey> Members
		
		// member variable for the EntityId property
		private PriceKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual PriceKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new PriceKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Price")
					.Append("|").Append( this.GoodsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- GoodsId: {0}{9}- Rtprice: {1}{9}- Averimppr: {2}{9}- Lastimppr: {3}{9}- Wsprice: {4}{9}- Prefprice: {5}{9}- Discpercent: {6}{9}- DiscFrdate: {7}{9}- DiscTodate: {8}{9}{11}", 
				this.GoodsId,
				(this.Rtprice == null) ? string.Empty : this.Rtprice.ToString(),
				(this.Averimppr == null) ? string.Empty : this.Averimppr.ToString(),
				(this.Lastimppr == null) ? string.Empty : this.Lastimppr.ToString(),
				(this.Wsprice == null) ? string.Empty : this.Wsprice.ToString(),
				(this.Prefprice == null) ? string.Empty : this.Prefprice.ToString(),
				(this.Discpercent == null) ? string.Empty : this.Discpercent.ToString(),
				(this.DiscFrdate == null) ? string.Empty : this.DiscFrdate.ToString(),
				(this.DiscTodate == null) ? string.Empty : this.DiscTodate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblPrice' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class PriceEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// goods_id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblPrice"</remarks>
		public System.String GoodsId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalGoodsId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// rtprice : 
		/// </summary>
		public System.Decimal? Rtprice = 0m;
		
		/// <summary>
		/// averimppr : 
		/// </summary>
		public System.Decimal? Averimppr = 0m;
		
		/// <summary>
		/// lastimppr : 
		/// </summary>
		public System.Decimal? Lastimppr = 0m;
		
		/// <summary>
		/// wsprice : 
		/// </summary>
		public System.Decimal? Wsprice = 0m;
		
		/// <summary>
		/// prefprice : 
		/// </summary>
		public System.Decimal? Prefprice = 0m;
		
		/// <summary>
		/// discpercent : 
		/// </summary>
		public System.Decimal? Discpercent = 0m;
		
		/// <summary>
		/// disc_frdate : 
		/// </summary>
		public System.DateTime? DiscFrdate = null;
		
		/// <summary>
		/// disc_todate : 
		/// </summary>
		public System.DateTime? DiscTodate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			PriceEntityData _tmp = new PriceEntityData();
						
			_tmp.GoodsId = this.GoodsId;
			_tmp.OriginalGoodsId = this.OriginalGoodsId;
			
			_tmp.Rtprice = this.Rtprice;
			_tmp.Averimppr = this.Averimppr;
			_tmp.Lastimppr = this.Lastimppr;
			_tmp.Wsprice = this.Wsprice;
			_tmp.Prefprice = this.Prefprice;
			_tmp.Discpercent = this.Discpercent;
			_tmp.DiscFrdate = this.DiscFrdate;
			_tmp.DiscTodate = this.DiscTodate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			PriceEntityData _tmp = new PriceEntityData();
						
			_tmp.GoodsId = this.GoodsId;
			_tmp.OriginalGoodsId = this.OriginalGoodsId;
			
			_tmp.Rtprice = this.Rtprice;
			_tmp.Averimppr = this.Averimppr;
			_tmp.Lastimppr = this.Lastimppr;
			_tmp.Wsprice = this.Wsprice;
			_tmp.Prefprice = this.Prefprice;
			_tmp.Discpercent = this.Discpercent;
			_tmp.DiscFrdate = this.DiscFrdate;
			_tmp.DiscTodate = this.DiscTodate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PriceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(PriceColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PriceColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(PriceColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PriceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(PriceColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				PriceEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new PriceEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="PriceColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(PriceColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				PriceEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new PriceEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region PriceEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Price"/> object.
	/// </remarks>
	public class PriceEventArgs : System.EventArgs
	{
		private PriceColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the PriceEventArgs class.
		///</summary>
		public PriceEventArgs(PriceColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the PriceEventArgs class.
		///</summary>
		public PriceEventArgs(PriceColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The PriceColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="PriceColumn" />
		public PriceColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Price related events.
	///</summary>
	public delegate void PriceEventHandler(object sender, PriceEventArgs e);
	
	#region PriceComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class PriceComparer : System.Collections.Generic.IComparer<Price>
	{
		PriceColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:PriceComparer"/> class.
        /// </summary>
		public PriceComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:PriceComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public PriceComparer(PriceColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Price"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Price"/> to compare.</param>
        /// <param name="b">The second <c>Price</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Price a, Price b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Price entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Price a, Price b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public PriceColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region PriceKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Price"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class PriceKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the PriceKey class.
		/// </summary>
		public PriceKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the PriceKey class.
		/// </summary>
		public PriceKey(PriceBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.GoodsId = entity.GoodsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the PriceKey class.
		/// </summary>
		public PriceKey(System.String _goodsId)
		{
			#region Init Properties

			this.GoodsId = _goodsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private PriceBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public PriceBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the GoodsId property
		private System.String _goodsId;
		
		/// <summary>
		/// Gets or sets the GoodsId property.
		/// </summary>
		public System.String GoodsId
		{
			get { return _goodsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GoodsId = value;
				
				_goodsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				GoodsId = ( values["GoodsId"] != null ) ? (System.String) EntityUtil.ChangeType(values["GoodsId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("GoodsId", GoodsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("GoodsId: {0}{1}",
								GoodsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region PriceColumn Enum
	
	/// <summary>
	/// Enumerate the Price columns.
	/// </summary>
	[Serializable]
	public enum PriceColumn : int
	{
		/// <summary>
		/// GoodsId : 
		/// </summary>
		[EnumTextValue("Goods Id")]
		[ColumnEnum("goods_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 6)]
		GoodsId = 1,
		/// <summary>
		/// Rtprice : 
		/// </summary>
		[EnumTextValue("Rtprice")]
		[ColumnEnum("rtprice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Rtprice = 2,
		/// <summary>
		/// Averimppr : 
		/// </summary>
		[EnumTextValue("Averimppr")]
		[ColumnEnum("averimppr", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Averimppr = 3,
		/// <summary>
		/// Lastimppr : 
		/// </summary>
		[EnumTextValue("Lastimppr")]
		[ColumnEnum("lastimppr", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Lastimppr = 4,
		/// <summary>
		/// Wsprice : 
		/// </summary>
		[EnumTextValue("Wsprice")]
		[ColumnEnum("wsprice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Wsprice = 5,
		/// <summary>
		/// Prefprice : 
		/// </summary>
		[EnumTextValue("Prefprice")]
		[ColumnEnum("prefprice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Prefprice = 6,
		/// <summary>
		/// Discpercent : 
		/// </summary>
		[EnumTextValue("Discpercent")]
		[ColumnEnum("discpercent", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Discpercent = 7,
		/// <summary>
		/// DiscFrdate : 
		/// </summary>
		[EnumTextValue("Disc Frdate")]
		[ColumnEnum("disc_frdate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DiscFrdate = 8,
		/// <summary>
		/// DiscTodate : 
		/// </summary>
		[EnumTextValue("Disc Todate")]
		[ColumnEnum("disc_todate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		DiscTodate = 9
	}//End enum

	#endregion PriceColumn Enum

} // end namespace
