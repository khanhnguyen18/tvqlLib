
/*
	File generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file StockInfo.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using LibraryManagement.Domain.Validation;
#endregion

namespace LibraryManagement.Domain
{
	///<summary>
	/// An object representation of the 'tblStockInfo' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class StockInfoBase : EntityBase, IStockInfo, IEntityId<StockInfoKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private StockInfoEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private StockInfoEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private StockInfoEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<StockInfo> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StockInfoEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StockInfoEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="StockInfoBase"/> instance.
		///</summary>
		public StockInfoBase()
		{
			this.entityData = new StockInfoEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="StockInfoBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_goodsId"></param>
		///<param name="_openDate"></param>
		///<param name="_lastDate"></param>
		///<param name="_minusDate"></param>
		///<param name="_stktakeDt"></param>
		///<param name="_stktakeTm"></param>
		///<param name="_beginQty"></param>
		///<param name="_expQty"></param>
		///<param name="_impQty"></param>
		///<param name="_beginAmt"></param>
		///<param name="_expAmt"></param>
		///<param name="_impAmt"></param>
		///<param name="_averimppr"></param>
		public StockInfoBase(System.String _id, System.String _goodsId, System.DateTime? _openDate, 
			System.DateTime? _lastDate, System.DateTime? _minusDate, System.DateTime? _stktakeDt, 
			System.String _stktakeTm, System.Decimal? _beginQty, System.Decimal? _expQty, System.Decimal? _impQty, 
			System.Decimal? _beginAmt, System.Decimal? _expAmt, System.Decimal? _impAmt, System.Decimal? _averimppr)
		{
			this.entityData = new StockInfoEntityData();
			this.backupData = null;

			this.Id = _id;
			this.GoodsId = _goodsId;
			this.OpenDate = _openDate;
			this.LastDate = _lastDate;
			this.MinusDate = _minusDate;
			this.StktakeDt = _stktakeDt;
			this.StktakeTm = _stktakeTm;
			this.BeginQty = _beginQty;
			this.ExpQty = _expQty;
			this.ImpQty = _impQty;
			this.BeginAmt = _beginAmt;
			this.ExpAmt = _expAmt;
			this.ImpAmt = _impAmt;
			this.Averimppr = _averimppr;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="StockInfo"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_goodsId"></param>
		///<param name="_openDate"></param>
		///<param name="_lastDate"></param>
		///<param name="_minusDate"></param>
		///<param name="_stktakeDt"></param>
		///<param name="_stktakeTm"></param>
		///<param name="_beginQty"></param>
		///<param name="_expQty"></param>
		///<param name="_impQty"></param>
		///<param name="_beginAmt"></param>
		///<param name="_expAmt"></param>
		///<param name="_impAmt"></param>
		///<param name="_averimppr"></param>
		public static StockInfo CreateStockInfo(System.String _id, System.String _goodsId, System.DateTime? _openDate, 
			System.DateTime? _lastDate, System.DateTime? _minusDate, System.DateTime? _stktakeDt, 
			System.String _stktakeTm, System.Decimal? _beginQty, System.Decimal? _expQty, System.Decimal? _impQty, 
			System.Decimal? _beginAmt, System.Decimal? _expAmt, System.Decimal? _impAmt, System.Decimal? _averimppr)
		{
			StockInfo newStockInfo = new StockInfo();
			newStockInfo.Id = _id;
			newStockInfo.GoodsId = _goodsId;
			newStockInfo.OpenDate = _openDate;
			newStockInfo.LastDate = _lastDate;
			newStockInfo.MinusDate = _minusDate;
			newStockInfo.StktakeDt = _stktakeDt;
			newStockInfo.StktakeTm = _stktakeTm;
			newStockInfo.BeginQty = _beginQty;
			newStockInfo.ExpQty = _expQty;
			newStockInfo.ImpQty = _impQty;
			newStockInfo.BeginAmt = _beginAmt;
			newStockInfo.ExpAmt = _expAmt;
			newStockInfo.ImpAmt = _impAmt;
			newStockInfo.Averimppr = _averimppr;
			return newStockInfo;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 5)]
		public virtual System.String Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
				
                OnPropertyChanging("Id");                    
				OnColumnChanging(StockInfoColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the id property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the GoodsId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 6)]
		public virtual System.String GoodsId
		{
			get
			{
				return this.entityData.GoodsId; 
			}
			
			set
			{
				if (this.entityData.GoodsId == value)
					return;
				
                OnPropertyChanging("GoodsId");                    
				OnColumnChanging(StockInfoColumn.GoodsId, this.entityData.GoodsId);
				this.entityData.GoodsId = value;
				this.EntityId.GoodsId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.GoodsId, this.entityData.GoodsId);
				OnPropertyChanged("GoodsId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the goods_id property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the goods_id property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalGoodsId
		{
			get { return this.entityData.OriginalGoodsId; }
			set { this.entityData.OriginalGoodsId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the OpenDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? OpenDate
		{
			get
			{
				return this.entityData.OpenDate; 
			}
			
			set
			{
				if (this.entityData.OpenDate == value)
					return;
				
                OnPropertyChanging("OpenDate");                    
				OnColumnChanging(StockInfoColumn.OpenDate, this.entityData.OpenDate);
				this.entityData.OpenDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.OpenDate, this.entityData.OpenDate);
				OnPropertyChanged("OpenDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastDate
		{
			get
			{
				return this.entityData.LastDate; 
			}
			
			set
			{
				if (this.entityData.LastDate == value)
					return;
				
                OnPropertyChanging("LastDate");                    
				OnColumnChanging(StockInfoColumn.LastDate, this.entityData.LastDate);
				this.entityData.LastDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.LastDate, this.entityData.LastDate);
				OnPropertyChanged("LastDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinusDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MinusDate
		{
			get
			{
				return this.entityData.MinusDate; 
			}
			
			set
			{
				if (this.entityData.MinusDate == value)
					return;
				
                OnPropertyChanging("MinusDate");                    
				OnColumnChanging(StockInfoColumn.MinusDate, this.entityData.MinusDate);
				this.entityData.MinusDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.MinusDate, this.entityData.MinusDate);
				OnPropertyChanged("MinusDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StktakeDt property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StktakeDt
		{
			get
			{
				return this.entityData.StktakeDt; 
			}
			
			set
			{
				if (this.entityData.StktakeDt == value)
					return;
				
                OnPropertyChanging("StktakeDt");                    
				OnColumnChanging(StockInfoColumn.StktakeDt, this.entityData.StktakeDt);
				this.entityData.StktakeDt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.StktakeDt, this.entityData.StktakeDt);
				OnPropertyChanged("StktakeDt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StktakeTm property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String StktakeTm
		{
			get
			{
				return this.entityData.StktakeTm; 
			}
			
			set
			{
				if (this.entityData.StktakeTm == value)
					return;
				
                OnPropertyChanging("StktakeTm");                    
				OnColumnChanging(StockInfoColumn.StktakeTm, this.entityData.StktakeTm);
				this.entityData.StktakeTm = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.StktakeTm, this.entityData.StktakeTm);
				OnPropertyChanged("StktakeTm");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BeginQty property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BeginQty
		{
			get
			{
				return this.entityData.BeginQty; 
			}
			
			set
			{
				if (this.entityData.BeginQty == value)
					return;
				
                OnPropertyChanging("BeginQty");                    
				OnColumnChanging(StockInfoColumn.BeginQty, this.entityData.BeginQty);
				this.entityData.BeginQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.BeginQty, this.entityData.BeginQty);
				OnPropertyChanged("BeginQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpQty property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExpQty
		{
			get
			{
				return this.entityData.ExpQty; 
			}
			
			set
			{
				if (this.entityData.ExpQty == value)
					return;
				
                OnPropertyChanging("ExpQty");                    
				OnColumnChanging(StockInfoColumn.ExpQty, this.entityData.ExpQty);
				this.entityData.ExpQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.ExpQty, this.entityData.ExpQty);
				OnPropertyChanged("ExpQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImpQty property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ImpQty
		{
			get
			{
				return this.entityData.ImpQty; 
			}
			
			set
			{
				if (this.entityData.ImpQty == value)
					return;
				
                OnPropertyChanging("ImpQty");                    
				OnColumnChanging(StockInfoColumn.ImpQty, this.entityData.ImpQty);
				this.entityData.ImpQty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.ImpQty, this.entityData.ImpQty);
				OnPropertyChanged("ImpQty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BeginAmt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BeginAmt
		{
			get
			{
				return this.entityData.BeginAmt; 
			}
			
			set
			{
				if (this.entityData.BeginAmt == value)
					return;
				
                OnPropertyChanging("BeginAmt");                    
				OnColumnChanging(StockInfoColumn.BeginAmt, this.entityData.BeginAmt);
				this.entityData.BeginAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.BeginAmt, this.entityData.BeginAmt);
				OnPropertyChanged("BeginAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpAmt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExpAmt
		{
			get
			{
				return this.entityData.ExpAmt; 
			}
			
			set
			{
				if (this.entityData.ExpAmt == value)
					return;
				
                OnPropertyChanging("ExpAmt");                    
				OnColumnChanging(StockInfoColumn.ExpAmt, this.entityData.ExpAmt);
				this.entityData.ExpAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.ExpAmt, this.entityData.ExpAmt);
				OnPropertyChanged("ExpAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImpAmt property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ImpAmt
		{
			get
			{
				return this.entityData.ImpAmt; 
			}
			
			set
			{
				if (this.entityData.ImpAmt == value)
					return;
				
                OnPropertyChanging("ImpAmt");                    
				OnColumnChanging(StockInfoColumn.ImpAmt, this.entityData.ImpAmt);
				this.entityData.ImpAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.ImpAmt, this.entityData.ImpAmt);
				OnPropertyChanged("ImpAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Averimppr property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Averimppr
		{
			get
			{
				return this.entityData.Averimppr; 
			}
			
			set
			{
				if (this.entityData.Averimppr == value)
					return;
				
                OnPropertyChanging("Averimppr");                    
				OnColumnChanging(StockInfoColumn.Averimppr, this.entityData.Averimppr);
				this.entityData.Averimppr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockInfoColumn.Averimppr, this.entityData.Averimppr);
				OnPropertyChanged("Averimppr");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Id", "Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Id", "Id", 5));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("GoodsId", "Goods Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("GoodsId", "Goods Id", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StktakeTm", "Stktake Tm", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tblStockInfo"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "goods_id", "open_date", "last_date", "minus_date", "stktake_dt", "stktake_tm", "begin_qty", "exp_qty", "imp_qty", "begin_amt", "exp_amt", "imp_amt", "averimppr"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as StockInfoEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (StockInfo) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<StockInfo>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as StockInfo);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed StockInfo Entity 
		///</summary>
		protected virtual StockInfo Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			StockInfo copy = new StockInfo();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
					copy.OriginalId = this.OriginalId;
				copy.GoodsId = this.GoodsId;
					copy.OriginalGoodsId = this.OriginalGoodsId;
				copy.OpenDate = this.OpenDate;
				copy.LastDate = this.LastDate;
				copy.MinusDate = this.MinusDate;
				copy.StktakeDt = this.StktakeDt;
				copy.StktakeTm = this.StktakeTm;
				copy.BeginQty = this.BeginQty;
				copy.ExpQty = this.ExpQty;
				copy.ImpQty = this.ImpQty;
				copy.BeginAmt = this.BeginAmt;
				copy.ExpAmt = this.ExpAmt;
				copy.ImpAmt = this.ImpAmt;
				copy.Averimppr = this.Averimppr;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed StockInfo Entity 
		///</summary>
		public virtual StockInfo Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed StockInfo Entity which is a deep copy of the current entity.
		///</summary>
		public virtual StockInfo DeepCopy()
		{
			return EntityHelper.Clone<StockInfo>(this as StockInfo);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as StockInfoEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new StockInfoEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as StockInfoEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(StockInfoColumn column)
		{
			switch(column)
			{
					case StockInfoColumn.Id:
					return entityData.Id != _originalData.Id;
					case StockInfoColumn.GoodsId:
					return entityData.GoodsId != _originalData.GoodsId;
					case StockInfoColumn.OpenDate:
					return entityData.OpenDate != _originalData.OpenDate;
					case StockInfoColumn.LastDate:
					return entityData.LastDate != _originalData.LastDate;
					case StockInfoColumn.MinusDate:
					return entityData.MinusDate != _originalData.MinusDate;
					case StockInfoColumn.StktakeDt:
					return entityData.StktakeDt != _originalData.StktakeDt;
					case StockInfoColumn.StktakeTm:
					return entityData.StktakeTm != _originalData.StktakeTm;
					case StockInfoColumn.BeginQty:
					return entityData.BeginQty != _originalData.BeginQty;
					case StockInfoColumn.ExpQty:
					return entityData.ExpQty != _originalData.ExpQty;
					case StockInfoColumn.ImpQty:
					return entityData.ImpQty != _originalData.ImpQty;
					case StockInfoColumn.BeginAmt:
					return entityData.BeginAmt != _originalData.BeginAmt;
					case StockInfoColumn.ExpAmt:
					return entityData.ExpAmt != _originalData.ExpAmt;
					case StockInfoColumn.ImpAmt:
					return entityData.ImpAmt != _originalData.ImpAmt;
					case StockInfoColumn.Averimppr:
					return entityData.Averimppr != _originalData.Averimppr;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< StockInfoColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.GoodsId != _originalData.GoodsId;
			result = result || entityData.OpenDate != _originalData.OpenDate;
			result = result || entityData.LastDate != _originalData.LastDate;
			result = result || entityData.MinusDate != _originalData.MinusDate;
			result = result || entityData.StktakeDt != _originalData.StktakeDt;
			result = result || entityData.StktakeTm != _originalData.StktakeTm;
			result = result || entityData.BeginQty != _originalData.BeginQty;
			result = result || entityData.ExpQty != _originalData.ExpQty;
			result = result || entityData.ImpQty != _originalData.ImpQty;
			result = result || entityData.BeginAmt != _originalData.BeginAmt;
			result = result || entityData.ExpAmt != _originalData.ExpAmt;
			result = result || entityData.ImpAmt != _originalData.ImpAmt;
			result = result || entityData.Averimppr != _originalData.Averimppr;
			return result;
		}	
		
		///<summary>
		///  Returns a StockInfo Entity with the original data.
		///</summary>
		public StockInfo GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateStockInfo(
				_originalData.Id,
				_originalData.GoodsId,
				_originalData.OpenDate,
				_originalData.LastDate,
				_originalData.MinusDate,
				_originalData.StktakeDt,
				_originalData.StktakeTm,
				_originalData.BeginQty,
				_originalData.ExpQty,
				_originalData.ImpQty,
				_originalData.BeginAmt,
				_originalData.ExpAmt,
				_originalData.ImpAmt,
				_originalData.Averimppr
				);
				
			return (StockInfo)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="StockInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is StockInfoBase)
				return ValueEquals(this, (StockInfoBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="StockInfoBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.GoodsId.GetHashCode() ^ 
					((this.OpenDate == null) ? string.Empty : this.OpenDate.ToString()).GetHashCode() ^ 
					((this.LastDate == null) ? string.Empty : this.LastDate.ToString()).GetHashCode() ^ 
					((this.MinusDate == null) ? string.Empty : this.MinusDate.ToString()).GetHashCode() ^ 
					((this.StktakeDt == null) ? string.Empty : this.StktakeDt.ToString()).GetHashCode() ^ 
					((this.StktakeTm == null) ? string.Empty : this.StktakeTm.ToString()).GetHashCode() ^ 
					((this.BeginQty == null) ? string.Empty : this.BeginQty.ToString()).GetHashCode() ^ 
					((this.ExpQty == null) ? string.Empty : this.ExpQty.ToString()).GetHashCode() ^ 
					((this.ImpQty == null) ? string.Empty : this.ImpQty.ToString()).GetHashCode() ^ 
					((this.BeginAmt == null) ? string.Empty : this.BeginAmt.ToString()).GetHashCode() ^ 
					((this.ExpAmt == null) ? string.Empty : this.ExpAmt.ToString()).GetHashCode() ^ 
					((this.ImpAmt == null) ? string.Empty : this.ImpAmt.ToString()).GetHashCode() ^ 
					((this.Averimppr == null) ? string.Empty : this.Averimppr.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="StockInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(StockInfoBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="StockInfoBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="StockInfoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="StockInfoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(StockInfoBase Object1, StockInfoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.GoodsId != Object2.GoodsId)
				equal = false;
			if ( Object1.OpenDate != null && Object2.OpenDate != null )
			{
				if (Object1.OpenDate != Object2.OpenDate)
					equal = false;
			}
			else if (Object1.OpenDate == null ^ Object2.OpenDate == null )
			{
				equal = false;
			}
			if ( Object1.LastDate != null && Object2.LastDate != null )
			{
				if (Object1.LastDate != Object2.LastDate)
					equal = false;
			}
			else if (Object1.LastDate == null ^ Object2.LastDate == null )
			{
				equal = false;
			}
			if ( Object1.MinusDate != null && Object2.MinusDate != null )
			{
				if (Object1.MinusDate != Object2.MinusDate)
					equal = false;
			}
			else if (Object1.MinusDate == null ^ Object2.MinusDate == null )
			{
				equal = false;
			}
			if ( Object1.StktakeDt != null && Object2.StktakeDt != null )
			{
				if (Object1.StktakeDt != Object2.StktakeDt)
					equal = false;
			}
			else if (Object1.StktakeDt == null ^ Object2.StktakeDt == null )
			{
				equal = false;
			}
			if ( Object1.StktakeTm != null && Object2.StktakeTm != null )
			{
				if (Object1.StktakeTm != Object2.StktakeTm)
					equal = false;
			}
			else if (Object1.StktakeTm == null ^ Object2.StktakeTm == null )
			{
				equal = false;
			}
			if ( Object1.BeginQty != null && Object2.BeginQty != null )
			{
				if (Object1.BeginQty != Object2.BeginQty)
					equal = false;
			}
			else if (Object1.BeginQty == null ^ Object2.BeginQty == null )
			{
				equal = false;
			}
			if ( Object1.ExpQty != null && Object2.ExpQty != null )
			{
				if (Object1.ExpQty != Object2.ExpQty)
					equal = false;
			}
			else if (Object1.ExpQty == null ^ Object2.ExpQty == null )
			{
				equal = false;
			}
			if ( Object1.ImpQty != null && Object2.ImpQty != null )
			{
				if (Object1.ImpQty != Object2.ImpQty)
					equal = false;
			}
			else if (Object1.ImpQty == null ^ Object2.ImpQty == null )
			{
				equal = false;
			}
			if ( Object1.BeginAmt != null && Object2.BeginAmt != null )
			{
				if (Object1.BeginAmt != Object2.BeginAmt)
					equal = false;
			}
			else if (Object1.BeginAmt == null ^ Object2.BeginAmt == null )
			{
				equal = false;
			}
			if ( Object1.ExpAmt != null && Object2.ExpAmt != null )
			{
				if (Object1.ExpAmt != Object2.ExpAmt)
					equal = false;
			}
			else if (Object1.ExpAmt == null ^ Object2.ExpAmt == null )
			{
				equal = false;
			}
			if ( Object1.ImpAmt != null && Object2.ImpAmt != null )
			{
				if (Object1.ImpAmt != Object2.ImpAmt)
					equal = false;
			}
			else if (Object1.ImpAmt == null ^ Object2.ImpAmt == null )
			{
				equal = false;
			}
			if ( Object1.Averimppr != null && Object2.Averimppr != null )
			{
				if (Object1.Averimppr != Object2.Averimppr)
					equal = false;
			}
			else if (Object1.Averimppr == null ^ Object2.Averimppr == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((StockInfoBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static StockInfoComparer GetComparer()
        {
            return new StockInfoComparer();
        }
        */

        // Comparer delegates back to StockInfo
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(StockInfo rhs, StockInfoColumn which)
        {
            switch (which)
            {
            	
            	
            	case StockInfoColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case StockInfoColumn.GoodsId:
            		return this.GoodsId.CompareTo(rhs.GoodsId);
            		
            		                 
            	
            	
            	case StockInfoColumn.OpenDate:
            		return this.OpenDate.Value.CompareTo(rhs.OpenDate.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.LastDate:
            		return this.LastDate.Value.CompareTo(rhs.LastDate.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.MinusDate:
            		return this.MinusDate.Value.CompareTo(rhs.MinusDate.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.StktakeDt:
            		return this.StktakeDt.Value.CompareTo(rhs.StktakeDt.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.StktakeTm:
            		return this.StktakeTm.CompareTo(rhs.StktakeTm);
            		
            		                 
            	
            	
            	case StockInfoColumn.BeginQty:
            		return this.BeginQty.Value.CompareTo(rhs.BeginQty.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.ExpQty:
            		return this.ExpQty.Value.CompareTo(rhs.ExpQty.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.ImpQty:
            		return this.ImpQty.Value.CompareTo(rhs.ImpQty.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.BeginAmt:
            		return this.BeginAmt.Value.CompareTo(rhs.BeginAmt.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.ExpAmt:
            		return this.ExpAmt.Value.CompareTo(rhs.ExpAmt.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.ImpAmt:
            		return this.ImpAmt.Value.CompareTo(rhs.ImpAmt.Value);
            		
            		                 
            	
            	
            	case StockInfoColumn.Averimppr:
            		return this.Averimppr.Value.CompareTo(rhs.Averimppr.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<StockInfoKey> Members
		
		// member variable for the EntityId property
		private StockInfoKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual StockInfoKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new StockInfoKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("StockInfo")
					.Append("|").Append( this.Id.ToString())
					.Append("|").Append( this.GoodsId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- Id: {0}{14}- GoodsId: {1}{14}- OpenDate: {2}{14}- LastDate: {3}{14}- MinusDate: {4}{14}- StktakeDt: {5}{14}- StktakeTm: {6}{14}- BeginQty: {7}{14}- ExpQty: {8}{14}- ImpQty: {9}{14}- BeginAmt: {10}{14}- ExpAmt: {11}{14}- ImpAmt: {12}{14}- Averimppr: {13}{14}{16}", 
				this.Id,
				this.GoodsId,
				(this.OpenDate == null) ? string.Empty : this.OpenDate.ToString(),
				(this.LastDate == null) ? string.Empty : this.LastDate.ToString(),
				(this.MinusDate == null) ? string.Empty : this.MinusDate.ToString(),
				(this.StktakeDt == null) ? string.Empty : this.StktakeDt.ToString(),
				(this.StktakeTm == null) ? string.Empty : this.StktakeTm.ToString(),
				(this.BeginQty == null) ? string.Empty : this.BeginQty.ToString(),
				(this.ExpQty == null) ? string.Empty : this.ExpQty.ToString(),
				(this.ImpQty == null) ? string.Empty : this.ImpQty.ToString(),
				(this.BeginAmt == null) ? string.Empty : this.BeginAmt.ToString(),
				(this.ExpAmt == null) ? string.Empty : this.ExpAmt.ToString(),
				(this.ImpAmt == null) ? string.Empty : this.ImpAmt.ToString(),
				(this.Averimppr == null) ? string.Empty : this.Averimppr.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tblStockInfo' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class StockInfoEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblStockInfo"</remarks>
		public System.String Id;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalId;
		
		/// <summary>			
		/// goods_id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "tblStockInfo"</remarks>
		public System.String GoodsId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalGoodsId;
		
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// open_date : 
		/// </summary>
		public System.DateTime? OpenDate = null;
		
		/// <summary>
		/// last_date : 
		/// </summary>
		public System.DateTime? LastDate = null;
		
		/// <summary>
		/// minus_date : 
		/// </summary>
		public System.DateTime? MinusDate = null;
		
		/// <summary>
		/// stktake_dt : 
		/// </summary>
		public System.DateTime? StktakeDt = null;
		
		/// <summary>
		/// stktake_tm : 
		/// </summary>
		public System.String StktakeTm = null;
		
		/// <summary>
		/// begin_qty : 
		/// </summary>
		public System.Decimal? BeginQty = 0m;
		
		/// <summary>
		/// exp_qty : 
		/// </summary>
		public System.Decimal? ExpQty = 0m;
		
		/// <summary>
		/// imp_qty : 
		/// </summary>
		public System.Decimal? ImpQty = 0m;
		
		/// <summary>
		/// begin_amt : 
		/// </summary>
		public System.Decimal? BeginAmt = 0m;
		
		/// <summary>
		/// exp_amt : 
		/// </summary>
		public System.Decimal? ExpAmt = 0m;
		
		/// <summary>
		/// imp_amt : 
		/// </summary>
		public System.Decimal? ImpAmt = 0m;
		
		/// <summary>
		/// averimppr : 
		/// </summary>
		public System.Decimal? Averimppr = 0m;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			StockInfoEntityData _tmp = new StockInfoEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			_tmp.GoodsId = this.GoodsId;
			_tmp.OriginalGoodsId = this.OriginalGoodsId;
			
			_tmp.OpenDate = this.OpenDate;
			_tmp.LastDate = this.LastDate;
			_tmp.MinusDate = this.MinusDate;
			_tmp.StktakeDt = this.StktakeDt;
			_tmp.StktakeTm = this.StktakeTm;
			_tmp.BeginQty = this.BeginQty;
			_tmp.ExpQty = this.ExpQty;
			_tmp.ImpQty = this.ImpQty;
			_tmp.BeginAmt = this.BeginAmt;
			_tmp.ExpAmt = this.ExpAmt;
			_tmp.ImpAmt = this.ImpAmt;
			_tmp.Averimppr = this.Averimppr;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			StockInfoEntityData _tmp = new StockInfoEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			_tmp.GoodsId = this.GoodsId;
			_tmp.OriginalGoodsId = this.OriginalGoodsId;
			
			_tmp.OpenDate = this.OpenDate;
			_tmp.LastDate = this.LastDate;
			_tmp.MinusDate = this.MinusDate;
			_tmp.StktakeDt = this.StktakeDt;
			_tmp.StktakeTm = this.StktakeTm;
			_tmp.BeginQty = this.BeginQty;
			_tmp.ExpQty = this.ExpQty;
			_tmp.ImpQty = this.ImpQty;
			_tmp.BeginAmt = this.BeginAmt;
			_tmp.ExpAmt = this.ExpAmt;
			_tmp.ImpAmt = this.ImpAmt;
			_tmp.Averimppr = this.Averimppr;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StockInfoColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(StockInfoColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StockInfoColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(StockInfoColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StockInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(StockInfoColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				StockInfoEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new StockInfoEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StockInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(StockInfoColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				StockInfoEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new StockInfoEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region StockInfoEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="StockInfo"/> object.
	/// </remarks>
	public class StockInfoEventArgs : System.EventArgs
	{
		private StockInfoColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the StockInfoEventArgs class.
		///</summary>
		public StockInfoEventArgs(StockInfoColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the StockInfoEventArgs class.
		///</summary>
		public StockInfoEventArgs(StockInfoColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The StockInfoColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="StockInfoColumn" />
		public StockInfoColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all StockInfo related events.
	///</summary>
	public delegate void StockInfoEventHandler(object sender, StockInfoEventArgs e);
	
	#region StockInfoComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class StockInfoComparer : System.Collections.Generic.IComparer<StockInfo>
	{
		StockInfoColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:StockInfoComparer"/> class.
        /// </summary>
		public StockInfoComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:StockInfoComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public StockInfoComparer(StockInfoColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="StockInfo"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="StockInfo"/> to compare.</param>
        /// <param name="b">The second <c>StockInfo</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(StockInfo a, StockInfo b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(StockInfo entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(StockInfo a, StockInfo b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public StockInfoColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region StockInfoKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="StockInfo"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class StockInfoKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the StockInfoKey class.
		/// </summary>
		public StockInfoKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the StockInfoKey class.
		/// </summary>
		public StockInfoKey(StockInfoBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
				this.GoodsId = entity.GoodsId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the StockInfoKey class.
		/// </summary>
		public StockInfoKey(System.String _id, System.String _goodsId)
		{
			#region Init Properties

			this.Id = _id;
			this.GoodsId = _goodsId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private StockInfoBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public StockInfoBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.String _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.String Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		// member variable for the GoodsId property
		private System.String _goodsId;
		
		/// <summary>
		/// Gets or sets the GoodsId property.
		/// </summary>
		public System.String GoodsId
		{
			get { return _goodsId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.GoodsId = value;
				
				_goodsId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.String) EntityUtil.ChangeType(values["Id"], typeof(System.String)) : string.Empty;
				GoodsId = ( values["GoodsId"] != null ) ? (System.String) EntityUtil.ChangeType(values["GoodsId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);
			values.Add("GoodsId", GoodsId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{2}GoodsId: {1}{2}",
								Id,
								GoodsId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region StockInfoColumn Enum
	
	/// <summary>
	/// Enumerate the StockInfo columns.
	/// </summary>
	[Serializable]
	public enum StockInfoColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 5)]
		Id = 1,
		/// <summary>
		/// GoodsId : 
		/// </summary>
		[EnumTextValue("Goods Id")]
		[ColumnEnum("goods_id", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 6)]
		GoodsId = 2,
		/// <summary>
		/// OpenDate : 
		/// </summary>
		[EnumTextValue("Open Date")]
		[ColumnEnum("open_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		OpenDate = 3,
		/// <summary>
		/// LastDate : 
		/// </summary>
		[EnumTextValue("Last Date")]
		[ColumnEnum("last_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastDate = 4,
		/// <summary>
		/// MinusDate : 
		/// </summary>
		[EnumTextValue("Minus Date")]
		[ColumnEnum("minus_date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MinusDate = 5,
		/// <summary>
		/// StktakeDt : 
		/// </summary>
		[EnumTextValue("Stktake Dt")]
		[ColumnEnum("stktake_dt", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StktakeDt = 6,
		/// <summary>
		/// StktakeTm : 
		/// </summary>
		[EnumTextValue("Stktake Tm")]
		[ColumnEnum("stktake_tm", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 10)]
		StktakeTm = 7,
		/// <summary>
		/// BeginQty : 
		/// </summary>
		[EnumTextValue("Begin Qty")]
		[ColumnEnum("begin_qty", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BeginQty = 8,
		/// <summary>
		/// ExpQty : 
		/// </summary>
		[EnumTextValue("Exp Qty")]
		[ColumnEnum("exp_qty", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExpQty = 9,
		/// <summary>
		/// ImpQty : 
		/// </summary>
		[EnumTextValue("Imp Qty")]
		[ColumnEnum("imp_qty", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ImpQty = 10,
		/// <summary>
		/// BeginAmt : 
		/// </summary>
		[EnumTextValue("Begin Amt")]
		[ColumnEnum("begin_amt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BeginAmt = 11,
		/// <summary>
		/// ExpAmt : 
		/// </summary>
		[EnumTextValue("Exp Amt")]
		[ColumnEnum("exp_amt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExpAmt = 12,
		/// <summary>
		/// ImpAmt : 
		/// </summary>
		[EnumTextValue("Imp Amt")]
		[ColumnEnum("imp_amt", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ImpAmt = 13,
		/// <summary>
		/// Averimppr : 
		/// </summary>
		[EnumTextValue("Averimppr")]
		[ColumnEnum("averimppr", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Averimppr = 14
	}//End enum

	#endregion StockInfoColumn Enum

} // end namespace
