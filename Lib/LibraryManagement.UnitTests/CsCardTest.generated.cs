
/*
	File Generated by NetTiers templates [www.nettiers.net]
	Important: Do not modify this file. Edit the file CsCardTest.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using LibraryManagement.Domain;
using LibraryManagement.Dao;
using LibraryManagement.Dao.Bases;

#endregion

namespace LibraryManagement.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="CsCard"/> objects (entity, collection and repository).
    /// </summary>
   public partial class CsCardTest
    {
    	// the CsCard instance used to test the repository.
		protected CsCard mock;
		
		// the TList<CsCard> instance used to test the repository.
		protected TList<CsCard> mockCollection;
		
		protected static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadCommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the CsCard Entity with the {0} --", LibraryManagement.Dao.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		/// <summary>
		/// Inserts a mock CsCard entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.CsCardProvider.Insert(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.CsCardProvider.Insert(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Selects all CsCard objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				mockCollection = DataRepository.CsCardProvider.Find(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.CsCardProvider.Find():");			
				System.Console.WriteLine(mockCollection);
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.CsCardProvider.GetPaged(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		
		
		
		
		/// <summary>
		/// Deep load all CsCard children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.CsCardProvider.GetPaged(tm, 0, 10, out count);
			
				DataRepository.CsCardProvider.DeepLoading += new EntityProviderBaseCore<CsCard, CsCardKey>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.CsCardProvider.DeepLoad(tm, mockCollection[0]);
					System.Console.WriteLine("CsCard instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					// DataRepository.CsCardProvider.DeepSave(tm, mockCollection);
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		/// <summary>
		/// Updates a mock CsCard entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				CsCard mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.CsCardProvider.Insert(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.CsCardProvider.Update(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.CsCardProvider.Update(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Delete the mock CsCard entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (CsCard)CreateMockInstance(tm);
				DataRepository.CsCardProvider.Insert(tm, mock);
			
				Assert.IsTrue(DataRepository.CsCardProvider.Delete(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.CsCardProvider.Delete(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock CsCard entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_CsCard.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock CsCard entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_CsCard.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<CsCard>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a CsCard collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_CsCardCollection.xml");
				
				mock = CreateMockInstance(tm);
				TList<CsCard> mockCollection = new TList<CsCard>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("TList<CsCard> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a CsCard collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_CsCardCollection.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(TList<CsCard>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				TList<CsCard> mockCollection = (TList<CsCard>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("TList<CsCard> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				CsCard entity = CreateMockInstance(tm);
				bool result = DataRepository.CsCardProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
			}
		}
		
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				CsCard entity = CreateMockInstance(tm);
				bool result = DataRepository.CsCardProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				CsCard t0 = DataRepository.CsCardProvider.GetByCardId(tm, entity.CardId);
			}
		}
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				CsCard entity = mock.Copy() as CsCard;
				entity = (CsCard)mock.Clone();
				Assert.IsTrue(CsCard.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				CsCard mock = CreateMockInstance(tm);
				bool result = DataRepository.CsCardProvider.Insert(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				CsCardQuery query = new CsCardQuery();
			
				query.AppendEquals(CsCardColumn.CardId, mock.CardId.ToString());
				if(mock.IsVip != null)
					query.AppendEquals(CsCardColumn.IsVip, mock.IsVip.ToString());
				if(mock.CsSex != null)
					query.AppendEquals(CsCardColumn.CsSex, mock.CsSex.ToString());
				if(mock.PersonId != null)
					query.AppendEquals(CsCardColumn.PersonId, mock.PersonId.ToString());
				if(mock.Birthday != null)
					query.AppendEquals(CsCardColumn.Birthday, mock.Birthday.ToString());
				if(mock.PsIssuedate != null)
					query.AppendEquals(CsCardColumn.PsIssuedate, mock.PsIssuedate.ToString());
				if(mock.PsPlaceissuse != null)
					query.AppendEquals(CsCardColumn.PsPlaceissuse, mock.PsPlaceissuse.ToString());
				query.AppendEquals(CsCardColumn.Fullname, mock.Fullname.ToString());
				query.AppendEquals(CsCardColumn.Address, mock.Address.ToString());
				if(mock.Phone != null)
					query.AppendEquals(CsCardColumn.Phone, mock.Phone.ToString());
				if(mock.Email != null)
					query.AppendEquals(CsCardColumn.Email, mock.Email.ToString());
				if(mock.DiscPc != null)
					query.AppendEquals(CsCardColumn.DiscPc, mock.DiscPc.ToString());
				if(mock.IssDate != null)
					query.AppendEquals(CsCardColumn.IssDate, mock.IssDate.ToString());
				if(mock.DueDate != null)
					query.AppendEquals(CsCardColumn.DueDate, mock.DueDate.ToString());
				if(mock.Remark != null)
					query.AppendEquals(CsCardColumn.Remark, mock.Remark.ToString());
				if(mock.Begmark != null)
					query.AppendEquals(CsCardColumn.Begmark, mock.Begmark.ToString());
				if(mock.Endmark != null)
					query.AppendEquals(CsCardColumn.Endmark, mock.Endmark.ToString());
				query.AppendEquals(CsCardColumn.Status, mock.Status.ToString());
				
				TList<CsCard> results = DataRepository.CsCardProvider.Find(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed CsCard Entity with mock values.
		///</summary>
		static public CsCard CreateMockInstance_Generated(TransactionManager tm)
		{		
			CsCard mock = new CsCard();
						
			mock.CardId = TestUtility.Instance.RandomString(8, false);;
			mock.IsVip = TestUtility.Instance.RandomBoolean();
			mock.CsSex = TestUtility.Instance.RandomBoolean();
			mock.PersonId = TestUtility.Instance.RandomString(9, false);;
			mock.Birthday = TestUtility.Instance.RandomDateTime();
			mock.PsIssuedate = TestUtility.Instance.RandomDateTime();
			mock.PsPlaceissuse = TestUtility.Instance.RandomString(49, false);;
			mock.Fullname = TestUtility.Instance.RandomString(49, false);;
			mock.Address = TestUtility.Instance.RandomString(149, false);;
			mock.Phone = TestUtility.Instance.RandomString(24, false);;
			mock.Email = TestUtility.Instance.RandomString(99, false);;
			mock.DiscPc = (decimal)TestUtility.Instance.RandomShort();
			mock.IssDate = TestUtility.Instance.RandomDateTime();
			mock.DueDate = TestUtility.Instance.RandomDateTime();
			mock.Image = new byte[] { TestUtility.Instance.RandomByte() };
			mock.Remark = TestUtility.Instance.RandomString(149, false);;
			mock.Begmark = (decimal)TestUtility.Instance.RandomShort();
			mock.Endmark = (decimal)TestUtility.Instance.RandomShort();
			mock.Status = TestUtility.Instance.RandomBoolean();
			
		
			// create a temporary collection and add the item to it
			TList<CsCard> tempMockCollection = new TList<CsCard>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (CsCard)mock;
		}
		
		
		///<summary>
		///  Update the Typed CsCard Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, CsCard mock)
		{
			mock.IsVip = TestUtility.Instance.RandomBoolean();
			mock.CsSex = TestUtility.Instance.RandomBoolean();
			mock.PersonId = TestUtility.Instance.RandomString(9, false);;
			mock.Birthday = TestUtility.Instance.RandomDateTime();
			mock.PsIssuedate = TestUtility.Instance.RandomDateTime();
			mock.PsPlaceissuse = TestUtility.Instance.RandomString(49, false);;
			mock.Fullname = TestUtility.Instance.RandomString(49, false);;
			mock.Address = TestUtility.Instance.RandomString(149, false);;
			mock.Phone = TestUtility.Instance.RandomString(24, false);;
			mock.Email = TestUtility.Instance.RandomString(99, false);;
			mock.DiscPc = (decimal)TestUtility.Instance.RandomShort();
			mock.IssDate = TestUtility.Instance.RandomDateTime();
			mock.DueDate = TestUtility.Instance.RandomDateTime();
			mock.Image = new byte[] { TestUtility.Instance.RandomByte() };
			mock.Remark = TestUtility.Instance.RandomString(149, false);;
			mock.Begmark = (decimal)TestUtility.Instance.RandomShort();
			mock.Endmark = (decimal)TestUtility.Instance.RandomShort();
			mock.Status = TestUtility.Instance.RandomBoolean();
			
		}
		#endregion
    }
}
