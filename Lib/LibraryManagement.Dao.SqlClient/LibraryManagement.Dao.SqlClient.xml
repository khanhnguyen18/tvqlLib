<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryManagement.Dao.SqlClient</name>
    </assembly>
    <members>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.GoodsGrp objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.GoodsGrp objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.GoodsGrp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.GoodsGrp objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoodsGrp index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.GoodsGrp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.GoodsGrp)">
            <summary>
            	Inserts a LibraryManagement.Domain.GoodsGrp object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.GoodsGrp object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.GoodsGrp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.GoodsGrp)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.GoodsGrp object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.GoodsGrp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlMercLocationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.MercLocation"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.MercLocation"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_idx">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.MercLocation objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.MercLocation objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.MercLocation objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.MercLocation objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMercLocation index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.MercLocation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MercLocation)">
            <summary>
            	Inserts a LibraryManagement.Domain.MercLocation object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.MercLocation object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.MercLocation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MercLocation)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.MercLocation object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.MercLocation object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMercLocationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMercLocationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMercLocationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.User"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlUserProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.User"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUserProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.User objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.User objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.User objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.User objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUser index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.User})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.User)">
            <summary>
            	Inserts a LibraryManagement.Domain.User object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.User object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.User)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.User object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.User object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlGoodsGrpProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlUtilsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Utils"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Utils"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Byte)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Utils objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Utils objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Utils objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Utils objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUtils index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Utils object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Utils)">
            <summary>
            	Inserts a LibraryManagement.Domain.Utils object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Utils object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Utils object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Utils)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Utils object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Utils object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUtilsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUtilsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUtilsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlAtrCodeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.AtrCode"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.AtrCode"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transCode">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.AtrCode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.AtrCode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.AtrCode objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.AtrCode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.GetByTransCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtrCode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.AtrCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AtrCode)">
            <summary>
            	Inserts a LibraryManagement.Domain.AtrCode object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.AtrCode object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.AtrCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AtrCode)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.AtrCode object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.AtrCode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAtrCodeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAtrCodeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAtrCodeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlMenusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Menus"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Menus"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Menus objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Menus objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Menus objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Menus objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMenus_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Menus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Menus)">
            <summary>
            	Inserts a LibraryManagement.Domain.Menus object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Menus object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Menus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Menus)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Menus object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Menus object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMenusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMenusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMenusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlLocationProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Location"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Location"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_stkId">. Primary Key.</param>	
            <param name="_locId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Location objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Location objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Location objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Location objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.GetByStkIdLocId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLocation index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Location})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Location object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Location)">
            <summary>
            	Inserts a LibraryManagement.Domain.Location object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Location object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Location object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Location)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Location object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Location object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLocationProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLocationProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLocationProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.TransValue"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transNum">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.TransValue objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.TransValue objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.TransValue objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.TransValue objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.GetByTransNum(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransValue index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.TransValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransValue)">
            <summary>
            	Inserts a LibraryManagement.Domain.TransValue object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.TransValue object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.TransValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransValue)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.TransValue object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.TransValue object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransValueProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Unit"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Unit objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Unit objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Unit objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Unit objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUnit index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Unit)">
            <summary>
            	Inserts a LibraryManagement.Domain.Unit object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Unit object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Unit)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Unit object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Unit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUnitProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transNum">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.PaymentOrder objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.PaymentOrder objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.PaymentOrder objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.PaymentOrder objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.GetByTransNum(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtransInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.PaymentOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.PaymentOrder)">
            <summary>
            	Inserts a LibraryManagement.Domain.PaymentOrder object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.PaymentOrder object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.PaymentOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.PaymentOrder)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.PaymentOrder object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.PaymentOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlPaymentOrderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlMofSysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.MofSys"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.MofSys"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.MofSys objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.MofSys objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.MofSys objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.MofSys objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMof_sys index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.MofSys object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MofSys)">
            <summary>
            	Inserts a LibraryManagement.Domain.MofSys object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.MofSys object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.MofSys object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MofSys)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.MofSys object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.MofSys object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlMofSysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlMofSysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlMofSysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Price"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Price objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Price objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Price objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Price objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblPrice index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Price})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Price object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Price)">
            <summary>
            	Inserts a LibraryManagement.Domain.Price object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Price object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Price object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Price)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Price object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Price object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlPriceProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlDateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Date"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlDateProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Date"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlDateProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlDateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Date objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Date objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Date objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Date objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDate index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Date})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Date object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Date)">
            <summary>
            	Inserts a LibraryManagement.Domain.Date object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Date object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Date object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Date)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Date object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Date object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlDateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlDateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlDateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Transnum"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transType">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Transnum objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Transnum objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Transnum objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Transnum objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.GetByTransType(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransnum index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transType"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Transnum object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Transnum)">
            <summary>
            	Inserts a LibraryManagement.Domain.Transnum object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Transnum object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Transnum object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Transnum)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Transnum object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Transnum object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransnumProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.ModePayment"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_pmtMode">. Primary Key.</param>	
            <param name="_forex">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.ModePayment objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.ModePayment objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.ModePayment objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.ModePayment objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.GetByPmtModeForex(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblModePayment index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.ModePayment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.ModePayment)">
            <summary>
            	Inserts a LibraryManagement.Domain.ModePayment object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.ModePayment object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.ModePayment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.ModePayment)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.ModePayment object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.ModePayment object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlModePaymentProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlCustomerProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Customer"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Customer"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Customer objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Customer objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Customer objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Customer objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustomer index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Customer)">
            <summary>
            	Inserts a LibraryManagement.Domain.Customer object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Customer object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Customer)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Customer object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Customer object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCustomerProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustomerProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCustomerProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlTransValueProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.TransValue"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransValueProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransValueProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlFrmTypeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.FrmType"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.FrmType"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.FrmType objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.FrmType objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.FrmType objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.FrmType objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFrmType index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.FrmType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.FrmType)">
            <summary>
            	Inserts a LibraryManagement.Domain.FrmType object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.FrmType object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.FrmType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.FrmType)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.FrmType object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.FrmType object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlFrmTypeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFrmTypeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlFrmTypeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlLanguageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Language"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Language"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Language objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Language objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Language objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Language objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLanguage index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Language})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Language)">
            <summary>
            	Inserts a LibraryManagement.Domain.Language object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Language object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Language)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Language object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLanguageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLanguageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLanguageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Barcode"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_barcode">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Barcode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Barcode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Barcode objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Barcode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.GetByBarcode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBarcode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_barcode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Barcode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Barcode)">
            <summary>
            	Inserts a LibraryManagement.Domain.Barcode object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Barcode object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Barcode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Barcode)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Barcode object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Barcode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlBarcodeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.CustInfo"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_custId">. Primary Key.</param>	
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.CustInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.CustInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.CustInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.CustInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.GetByCustIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCust_info index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.CustInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CustInfo)">
            <summary>
            	Inserts a LibraryManagement.Domain.CustInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.CustInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.CustInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CustInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.CustInfo object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.CustInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCustInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Store"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Store objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Store objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Store objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Store objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStore index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Store})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Store)">
            <summary>
            	Inserts a LibraryManagement.Domain.Store object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Store object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Store)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Store object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Store object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStoreProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.KitInfo"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_kitId">. Primary Key.</param>	
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.KitInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.KitInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.KitInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.KitInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.GetByKitIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit_info index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.KitInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.KitInfo)">
            <summary>
            	Inserts a LibraryManagement.Domain.KitInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.KitInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.KitInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.KitInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.KitInfo object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.KitInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlKitInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlKitInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.KitInfo"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlKitInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Transaction"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_idx">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Transaction objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Transaction objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Transaction objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Transaction objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransaction_new index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Transaction object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Transaction)">
            <summary>
            	Inserts a LibraryManagement.Domain.Transaction object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Transaction object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Transaction object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Transaction)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Transaction object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Transaction object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTransactionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlKitProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Kit"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlKitProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlKitProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Kit objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Kit objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Kit objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Kit objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Kit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Kit)">
            <summary>
            	Inserts a LibraryManagement.Domain.Kit object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Kit object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Kit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Kit)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Kit object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Kit object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlKitProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.UserGrp"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.UserGrp objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.UserGrp objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.UserGrp objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.UserGrp objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUserGrp index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.UserGrp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UserGrp)">
            <summary>
            	Inserts a LibraryManagement.Domain.UserGrp object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.UserGrp object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.UserGrp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UserGrp)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.UserGrp object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.UserGrp object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlUserGrpProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Stations"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Stations objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Stations objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Stations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Stations objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStations index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Stations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Stations)">
            <summary>
            	Inserts a LibraryManagement.Domain.Stations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Stations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Stations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Stations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Stations object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Stations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,LibraryManagement.Dao.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:LibraryManagement.Dao.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:LibraryManagement.Dao.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:LibraryManagement.Dao.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:LibraryManagement.Dao.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:LibraryManagement.Dao.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlBarcodeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Barcode"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBarcodeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlBarcodeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlCsCardProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.CsCard"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.CsCard"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_cardId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.CsCard objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.CsCard objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.CsCard objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.CsCard objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.GetByCardId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustCard index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_cardId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.CsCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CsCard)">
            <summary>
            	Inserts a LibraryManagement.Domain.CsCard object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.CsCard object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.CsCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CsCard)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.CsCard object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.CsCard object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCsCardProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCsCardProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCsCardProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlTransnumProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Transnum"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransnumProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransnumProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Staff"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Staff objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Staff objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Staff objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Staff objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStaff index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Staff)">
            <summary>
            	Inserts a LibraryManagement.Domain.Staff object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Staff object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Staff)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Staff object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Staff object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStaffProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Reports"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_idx">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Reports objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Reports objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Reports objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Reports objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblReports1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Reports object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Reports)">
            <summary>
            	Inserts a LibraryManagement.Domain.Reports object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Reports object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Reports object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Reports)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Reports object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Reports object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlReportsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlLoanTranProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.LoanTran"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.LoanTran"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transNum">. Primary Key.</param>	
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.LoanTran objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.LoanTran objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.LoanTran objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.LoanTran objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.GetByTransNumGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLoanTran index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.LoanTran object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LoanTran)">
            <summary>
            	Inserts a LibraryManagement.Domain.LoanTran object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.LoanTran object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.LoanTran object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LoanTran)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.LoanTran object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.LoanTran object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlLoanTranProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlLoanTranProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlLoanTranProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlCurrencyProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Currency"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Currency"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Currency objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Currency objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Currency objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Currency objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCurrency index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Currency)">
            <summary>
            	Inserts a LibraryManagement.Domain.Currency object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Currency object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Currency)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Currency object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Currency object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlCurrencyProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCurrencyProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCurrencyProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlStaffProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Staff"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStaffProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStaffProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Goods"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Goods objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Goods objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Goods objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Goods objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoods index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Goods object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Goods)">
            <summary>
            	Inserts a LibraryManagement.Domain.Goods object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Goods object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Goods object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Goods)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Goods object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Goods object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.GetListBook(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the 'usp_tblGoods_GetListBook' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlGoodsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlAccTransProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.AccTrans"/> entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.AccTrans"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.AccTrans objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.AccTrans objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.AccTrans objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.AccTrans objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccTrans index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.AccTrans object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AccTrans)">
            <summary>
            	Inserts a LibraryManagement.Domain.AccTrans object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.AccTrans object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.AccTrans object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AccTrans)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.AccTrans object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.AccTrans object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAccTransProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccTransProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAccTransProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.NonPlu"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_npluCode">. Primary Key.</param>	
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.NonPlu objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.NonPlu objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.NonPlu objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.NonPlu objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.GetByNpluCodeGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblNon_Plu index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.NonPlu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.NonPlu)">
            <summary>
            	Inserts a LibraryManagement.Domain.NonPlu object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.NonPlu object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.NonPlu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.NonPlu)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.NonPlu object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.NonPlu object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNonPluProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Files"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Files objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Files objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Files objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Files objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFiles index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Files})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Files object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Files)">
            <summary>
            	Inserts a LibraryManagement.Domain.Files object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Files object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Files object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Files)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Files object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Files object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlFilesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlUnitProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Unit"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUnitProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUnitProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Account"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_branch">. Primary Key.</param>	
            <param name="_accountId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Account objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Account objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Account objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Account objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.GetByBranchAccountId(LibraryManagement.Dao.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccount_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Account})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Account)">
            <summary>
            	Inserts a LibraryManagement.Domain.Account object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Account object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Account)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Account object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Account object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlKitProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Kit"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlKitProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlKitProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.BookAttr"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.BookAttr objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.BookAttr objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.BookAttr objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.BookAttr objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBookAttr index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.BookAttr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.BookAttr)">
            <summary>
            	Inserts a LibraryManagement.Domain.BookAttr object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.BookAttr object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.BookAttr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.BookAttr)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.BookAttr object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.BookAttr object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlBookAttrProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Sysvar"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_mCode">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Sysvar objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Sysvar objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Sysvar objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Sysvar objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.GetByMCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblSysvar index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_mCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Sysvar object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Sysvar)">
            <summary>
            	Inserts a LibraryManagement.Domain.Sysvar object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Sysvar object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Sysvar object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Sysvar)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Sysvar object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Sysvar object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlSysvarProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlSysvarProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Sysvar"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlSysvarProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlSysvarProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.OnOrder"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transNum">. Primary Key.</param>	
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.OnOrder objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.OnOrder objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.OnOrder objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.OnOrder objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.GetByTransNumGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblOn_order index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.OnOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.OnOrder)">
            <summary>
            	Inserts a LibraryManagement.Domain.OnOrder object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.OnOrder object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.OnOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.OnOrder)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.OnOrder object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.OnOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlOnOrderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlUserGrpProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.UserGrp"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlUserGrpProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlUserGrpProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlOnOrderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.OnOrder"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlOnOrderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlOnOrderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlStationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Stations"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlCustInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.CustInfo"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlCustInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlCustInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlTransactionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Transaction"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTransactionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTransactionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Trcode"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_trCode">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Trcode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.Trcode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Trcode objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.Trcode objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.GetByTrCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTrcode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_trCode"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Trcode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Trcode)">
            <summary>
            	Inserts a LibraryManagement.Domain.Trcode object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Trcode object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.Trcode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Trcode)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.Trcode object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.Trcode object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlTrcodeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.StockInfo"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="_goodsId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.StockInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of LibraryManagement.Domain.StockInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.StockInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of LibraryManagement.Domain.StockInfo objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.GetByIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStockInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.StockInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StockInfo)">
            <summary>
            	Inserts a LibraryManagement.Domain.StockInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.StockInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the LibraryManagement.Domain.StockInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StockInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">LibraryManagement.Domain.StockInfo object to update.</param>
            <remarks>
            	After updating the datasource, the LibraryManagement.Domain.StockInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlStockInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlNonPluProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.NonPlu"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNonPluProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlNonPluProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlBookAttrProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.BookAttr"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlBookAttrProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlBookAttrProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlTrcodeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Trcode"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlTrcodeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlTrcodeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlStockInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.StockInfo"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStockInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStockInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Account"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:LibraryManagement.Dao.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ReportsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Reports"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlReportsProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlReportsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.AccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Account"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlAccountProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.StaffProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Staff"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlStaffProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlStaffProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.PriceProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Price"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlPriceProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlPriceProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.StationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Stations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlStationsProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlStationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.MofSysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.MofSys"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlMofSysProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlMofSysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.PaymentOrderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlPaymentOrderProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlPaymentOrderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.NonPluProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.NonPlu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlNonPluProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlNonPluProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.StockInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.StockInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlStockInfoProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlStockInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.OnOrderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.OnOrder"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlOnOrderProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlOnOrderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.UnitProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Unit"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlUnitProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlUnitProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.StoreProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Store"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlStoreProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlStoreProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.UserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlUserProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.TrcodeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Trcode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlTrcodeProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlTrcodeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.UserGrpProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.UserGrp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlUserGrpProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlUserGrpProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SysvarProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Sysvar"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlSysvarProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlSysvarProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.TransValueProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.TransValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlTransValueProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlTransValueProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.TransactionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Transaction"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlTransactionProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlTransactionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.ModePaymentProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.ModePayment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlModePaymentProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlModePaymentProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.TransnumProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Transnum"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlTransnumProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlTransnumProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.MercLocationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.MercLocation"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlMercLocationProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlMercLocationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.CurrencyProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Currency"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlCurrencyProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlCurrencyProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.MenusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Menus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlMenusProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlMenusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.CustInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.CustInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlCustInfoProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlCustInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.CsCardProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.CsCard"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlCsCardProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlCsCardProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.CustomerProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Customer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlCustomerProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlCustomerProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.AccTransProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.AccTrans"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlAccTransProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlAccTransProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.BookAttrProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.BookAttr"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlBookAttrProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlBookAttrProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.AtrCodeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.AtrCode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlAtrCodeProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlAtrCodeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.DateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Date"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlDateProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlDateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.BarcodeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Barcode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlBarcodeProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlBarcodeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.LanguageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Language"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlLanguageProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlLanguageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.FilesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Files"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlFilesProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlFilesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.LoanTranProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.LoanTran"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlLoanTranProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlLoanTranProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.KitInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.KitInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlKitInfoProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlKitInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.LocationProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Location"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlLocationProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlLocationProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.FrmTypeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.FrmType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlFrmTypeProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlFrmTypeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.KitProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Kit"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlKitProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlKitProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.GoodsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Goods"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlGoodsProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlGoodsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.UtilsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Utils"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlUtilsProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlUtilsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.GoodsGrpProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlGoodsGrpProvider">
            <summary>
            Gets the current <see cref="P:LibraryManagement.Dao.SqlClient.SqlNetTiersProvider.SqlGoodsGrpProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlGoodsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Goods"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlGoodsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlGoodsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlFilesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Files"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlFilesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlFilesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlModePaymentProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.ModePayment"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlModePaymentProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlModePaymentProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlStoreProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Store"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlStoreProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlStoreProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlPriceProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Price"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlPriceProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlPriceProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SqlClient.SqlReportsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:LibraryManagement.Domain.Reports"/> entity.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlClient.SqlReportsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.SqlClient.SqlReportsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
