<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryManagement.Dao</name>
    </assembly>
    <members>
        <member name="T:LibraryManagement.Dao.Bases.NetTiersProviderBase">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.INetTiersProvider">
            <summary>
            Interface for NetTiersProvider
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.CreateTransaction">
            <summary>
            Creates the transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.INetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="config">The config.</param>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.INetTiersProvider.CurrentLoadPolicy">
            <summary>
            Gets or sets the current load policy.
            </summary>
            <value>The current load policy.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.INetTiersProvider.DefaultCommandTimeout">
            <summary>
            Gets or sets the default command timeout.
            </summary>
            <value>The default command timeout.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.INetTiersProvider.EnableEntityTracking">
            <summary>
            Gets or sets a value indicating whether [enable entity tracking].
            </summary>
            <value>
            	<c>true</c> if [enable entity tracking]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.INetTiersProvider.EnableListTracking">
            <summary>
            Gets or sets a value indicating whether [enable list tracking].
            </summary>
            <value><c>true</c> if [enable list tracking]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.INetTiersProvider.EnableMethodAuthorization">
            <summary>
            Gets or sets a value indicating whether [enable method authorization].
            </summary>
            <value>
            	<c>true</c> if [enable method authorization]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.INetTiersProvider.EntityCreationalFactoryType">
            <summary>
            Gets or sets the type of the entity creational factory.
            </summary>
            <value>The type of the entity creational factory.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.INetTiersProvider.IsTransactionSupported">
            <summary>
            Gets a value indicating whether this instance is transaction supported.
            </summary>
            <value>
            	<c>true</c> if this instance is transaction supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.INetTiersProvider.UseEntityFactory">
            <summary>
            Gets or sets a value indicating whether [use entity factory].
            </summary>
            <value><c>true</c> if [use entity factory]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.CreateTransaction">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderBase.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderBase.EntityCreationalFactoryType">
            <summary>
            Gets or sets the Creational Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderBase.EnableEntityTracking">
            <summary>
            Gets or sets the ability to track entities.
            </summary>
            <value>true/false.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderBase.EnableListTracking">
            <summary>
            Gets or sets the Entity Factory Type.
            </summary>
            <value>The entity factory type.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderBase.UseEntityFactory">
            <summary>
            Gets or sets the use entity factory property to enable the usage of the EntityFactory and it's type cache.
            </summary>
            <value>bool value</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderBase.EnableMethodAuthorization">
            <summary>
            Gets or sets the use Enable Method Authorization to enable the usage of the Microsoft Patterns and Practices 
            IAuthorizationRuleProvider for code level authorization.
            </summary>
            <value>A bool value.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderBase.DefaultCommandTimeout">
            <summary>
            Gets or sets the default timeout for every command
            </summary>
            <value>integer value in seconds.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderBase.CurrentLoadPolicy">
            <summary>
            Get or set the current LoadPolicy in effect
            </summary>
            <value>A <see cref="T:LibraryManagement.Dao.Bases.LoadPolicy"/> enumeration member.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderBase.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:LibraryManagement.Dao.Bases.NetTiersProvider"/> implementation is supporting Transactions.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LoadPolicy">
            <summary>
            Possibel load policies that can be applied when a provider Load method is called. Determines 
            how entities with EntityState.Unchanged and EntityState.Changed are treated during a Load
            when entity tracking is enabled.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.Bases.LoadPolicy.PreserveChanges">
            <summary>
            Refresh entities with EntityState.Unchanged if entity tracking is enabled. Entities with 
            EntityState.Changed will not be refreshed with information from the database.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.Bases.LoadPolicy.DiscardChanges">
            <summary>
            Refresh entities with EntityState.Changed as well as EntityState.Unchanged i.e. discard any
            unsaved changes.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NetTiersProvider">
            <summary>
             The base class to implements to create a .NetTiers provider.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.ReportsProvider">
            <summary>
             Current ReportsProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.AccountProvider">
            <summary>
             Current AccountProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.StaffProvider">
            <summary>
             Current StaffProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.PriceProvider">
            <summary>
             Current PriceProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.StationsProvider">
            <summary>
             Current StationsProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.MofSysProvider">
            <summary>
             Current MofSysProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.PaymentOrderProvider">
            <summary>
             Current PaymentOrderProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.NonPluProvider">
            <summary>
             Current NonPluProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.StockInfoProvider">
            <summary>
             Current StockInfoProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.OnOrderProvider">
            <summary>
             Current OnOrderProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.UnitProvider">
            <summary>
             Current UnitProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.StoreProvider">
            <summary>
             Current StoreProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.UserProvider">
            <summary>
             Current UserProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.TrcodeProvider">
            <summary>
             Current TrcodeProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.UserGrpProvider">
            <summary>
             Current UserGrpProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.SysvarProvider">
            <summary>
             Current SysvarProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.TransValueProvider">
            <summary>
             Current TransValueProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.TransactionProvider">
            <summary>
             Current TransactionProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.ModePaymentProvider">
            <summary>
             Current ModePaymentProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.TransnumProvider">
            <summary>
             Current TransnumProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.MercLocationProvider">
            <summary>
             Current MercLocationProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.CurrencyProvider">
            <summary>
             Current CurrencyProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.MenusProvider">
            <summary>
             Current MenusProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.CustInfoProvider">
            <summary>
             Current CustInfoProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.CsCardProvider">
            <summary>
             Current CsCardProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.CustomerProvider">
            <summary>
             Current CustomerProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.AccTransProvider">
            <summary>
             Current AccTransProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.BookAttrProvider">
            <summary>
             Current BookAttrProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.AtrCodeProvider">
            <summary>
             Current AtrCodeProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.DateProvider">
            <summary>
             Current DateProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.BarcodeProvider">
            <summary>
             Current BarcodeProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.LanguageProvider">
            <summary>
             Current LanguageProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.FilesProvider">
            <summary>
             Current FilesProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.LoanTranProvider">
            <summary>
             Current LoanTranProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.KitInfoProvider">
            <summary>
             Current KitInfoProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.LocationProvider">
            <summary>
             Current LocationProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.FrmTypeProvider">
            <summary>
             Current FrmTypeProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.KitProvider">
            <summary>
             Current KitProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.GoodsProvider">
            <summary>
             Current GoodsProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.UtilsProvider">
            <summary>
             Current UtilsProviderBase instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProvider.GoodsGrpProvider">
            <summary>
             Current GoodsGrpProviderBase instance.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FilesProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.FilesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FilesProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.FilesProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.EntityProviderBase`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityProvider&lt;Entity, EntityKey&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="T:LibraryManagement.Dao.IEntityProvider`2">
            <summary>
            Defines the common data access methods that can be used by the
            ProviderDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <typeparam name="EntityKey">The class of the EntityId
            property of the specified business object class.</typeparam>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityProvider`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityProvider`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityProvider`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityProvider`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityProvider`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityProvider`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityProvider`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityProvider`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Get(LibraryManagement.Dao.TransactionManager,`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Get(`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Get(LibraryManagement.Dao.TransactionManager,`1,System.Int32,System.Int32)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetAll(LibraryManagement.Dao.TransactionManager)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetPaged(LibraryManagement.Dao.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetPaged(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetTotalItems(LibraryManagement.Dao.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter and sortColumn conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> or <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> objects</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter and sortColumn conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> or <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> objects</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter and sortColumn conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> or <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> objects</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> or <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Insert(LibraryManagement.Dao.TransactionManager,`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Insert(LibraryManagement.Domain.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Insert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0})">
            <summary>
            Inserts rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
            <returns>Returns the number of rows successfully inserted.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.BulkInsert(LibraryManagement.Domain.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.BulkInsert(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Update(LibraryManagement.Dao.TransactionManager,`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Update(LibraryManagement.Domain.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Update(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0})">
            <summary>
            Updates existing rows in the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to update.</param>
            <returns>Returns the number of rows successfully updated.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Save(LibraryManagement.Dao.TransactionManager,`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Save(LibraryManagement.Domain.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Save(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0})">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Delete(LibraryManagement.Dao.TransactionManager,`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Delete(`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Delete(LibraryManagement.Dao.TransactionManager,`1)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Delete(LibraryManagement.Domain.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0})">
            <summary>
            Deletes rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to delete.</param>
            <returns>Returns the number of rows successfully deleted.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Dao.TransactionManager,`0)">
            <summary>
            Deep Load the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Dao.TransactionManager,`0,System.Boolean)">
            <summary>
            Deep Load the Entity object with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(`0,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Dao.TransactionManager,`0,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Dao.TransactionManager,`0,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep load functionality.
            </remarks>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">The Entity List object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Domain.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0})">
            <summary>
            Deep Load the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Domain.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0},System.Boolean)">
            <summary>
            Deep Load the Entity objects with all of the child property collections N levels deep.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Domain.TList{`0},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0},System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[])">
            <summary>
            Deep Load the Entity objects with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(LibraryManagement.Dao.TransactionManager,`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(`0,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(LibraryManagement.Dao.TransactionManager,`0,LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(LibraryManagement.Dao.TransactionManager,`0,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A <c>DeepSession</c> of child types for easy access.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(LibraryManagement.Domain.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0})">
            <summary>
            Deep Save the Entity objects with all of the child property collections only 1 level deep.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(LibraryManagement.Domain.TList{`0},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0},LibraryManagement.Dao.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TList{`0},LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="mgr">The transaction manager.</param>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.CanDeepLoad(LibraryManagement.Domain.IEntity,System.String,LibraryManagement.Dao.DeepLoadType,LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
             Enforces the rules set in order to load this property for a given type.
            </summary>
             <param name="entity">The entity.</param>
             <param name="key">The key.</param>
             <param name="deepLoadType">Type of the deep load.</param>
             <param name="innerList">The inner list.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.CanDeepSave(System.Object,System.String,LibraryManagement.Dao.DeepSaveType,LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Enforces the rules set in order to save this property for a given type.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <param name="deepSaveType">Type of the deep save.</param>
            <param name="innerList">The inner list.</param>
            <returns>
            	<c>true</c> if this instance [can deep save] the specified entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.GetDeepSessionArgs(LibraryManagement.Dao.Bases.DeepSession,System.Enum,System.Object,System.String)">
            <summary>
            Gets the DeepSession Arguments for an event.
            </summary>
            <param name="deepSession">the current DeepSession.</param>
            <param name="deepTypeValue"> The Deep Type Value</param>
            <param name="obj">The current entity or list.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>DeepSessionEventArgs</c> if the item being run is a valid entity or list.
            </returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.OnDataRequesting(LibraryManagement.Dao.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just before accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.OnDataRequested(LibraryManagement.Dao.Bases.CommandEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.OnDeepLoading(LibraryManagement.Dao.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.OnDeepSaving(LibraryManagement.Dao.Bases.DeepSessionEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred just after accessing the 
                data provider.
            </summary>
        </member>
        <member name="E:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DataRequesting">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DataRequested">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoading">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="E:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSaving">
            <summary>
                An event which occurs just before a data 
                request is made in the data provider.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DataRequestingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DataRequestedEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepLoadingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.EntityProviderBaseCore`2.DeepSavingEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement 
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.FilesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.FilesKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.GetById(System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblFiles index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFiles index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFiles index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFiles index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFiles index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFiles index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Files"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Files},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Files&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Files)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Files"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Files"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Files)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Files"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Files"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Files,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Files"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Files Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Files,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Files object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Files instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Files Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccTransProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.AccTransProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccTransProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.AccTransProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AccTransKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AccTransKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.GetById(System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblAccTrans index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccTrans index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccTrans index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccTrans index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccTrans index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccTrans index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AccTrans"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.AccTrans},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;AccTrans&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.AccTrans)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.AccTrans"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.AccTrans"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.AccTrans)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.AccTrans"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.AccTrans"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AccTrans,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.AccTrans"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.AccTrans Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AccTrans,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.AccTrans object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.AccTrans instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.AccTrans Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UnitProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.UnitProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UnitKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UnitKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblUnit index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUnit index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUnit index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUnit index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUnit index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUnit index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Unit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Unit},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Unit&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Unit)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Unit"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Unit"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Unit)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Unit"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Unit"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Unit,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Unit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Unit Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Unit,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Unit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Unit instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Unit Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UnitChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Unit</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UnitFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Unit"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlFilterBuilder`1">
            <summary>
            Allows for building SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:LibraryManagement.Dao.SqlStringBuilder">
            <summary>
            Represents a SQL filter expression.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlStringBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.Append(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.Append(System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.Append(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotEquals(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendIn(System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendIn(System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendIn(System.String,System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotIn(System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotIn(System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotInQuery(System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotInQuery(System.String,System.String,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotRange(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendIsNull(System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendIsNull(System.String,System.String)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendIsNotNull(System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendIsNotNull(System.String,System.String)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendGreaterThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendLessThan(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendStartsWith(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendStartsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendEndsWith(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendEndsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendContains(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotContains(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendLike(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotLike(System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendNotLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendInternal(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="column">The column.</param>
            <param name="compare">The compare.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.AppendInternal(System.String,System.String)">
            <summary>
            Appends the SQL expression to the internal <see cref="T:System.Text.StringBuilder"/>.
            </summary>
            <param name="junction">The junction.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.Clear">
            <summary>
            Clears the internal string buffer.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.ToString">
            <summary>
            Converts the value of this instance to a System.String.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.ToString(System.String)">
            <summary>
            Converts the value of this instance to a System.String and
            prepends the specified junction if the expression is not empty.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values">Comma string with the in parameters already in one string</param>
            <param name="encode">tells whether or not to enclose the parameters with ' and to replace ' with '' within the parameters.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.GetInQueryValues(System.String[],System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values">String Array with the in parameters</param>
            <param name="encode">tells whether or not to enclose the parameters with ' and to replace ' with '' within the parameters.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.BeginGroup">
            <summary>
            Begins a new group of parameters by adding an open parenthesis "("
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.BeginGroup(System.String)">
            <summary>
            Begins a new groups of parameters using the specified junction operator
            </summary>
            <param name="junction">The junction operator to be used</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.EndGroup">
            <summary>
            Ends a group of parameters by add a closing parenthesis ")"
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlStringBuilder.EnsureGroups">
            <summary>
            Makes sure that all groups have been ended (each call to BeginGroup has a corresponding EndGroup)
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlStringBuilder.junction">
            <summary>
            The Junction member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlStringBuilder.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlStringBuilder.Junction">
            <summary>
            Gets or sets the Junction property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlStringBuilder.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlStringBuilder.Length">
            <summary>
            Gets or sets the length of the internal StringBuilder object.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.Append(`0,System.String)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.Append(`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotEquals(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendIn(`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendIn(`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotIn(`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotIn(`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[])">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotInQuery(`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendIsNull(`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendIsNull(System.String,`0)">
            <summary>
            Appends an IS NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendIsNotNull(`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendIsNotNull(System.String,`0)">
            <summary>
            Appends an IS NOT NULL expression to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotRange(`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendGreaterThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendGreaterThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendLessThan(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendLessThanOrEqual(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendStartsWith(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendStartsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendEndsWith(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendEndsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendContains(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotContains(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendLike(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotLike(`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.AppendNotLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UnitFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UnitFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UnitFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UnitParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Unit"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1">
            <summary>
            Allows for building parameterized SQL filter expressions using strongly-typed
            column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:LibraryManagement.Dao.IFilterParameterCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameterCollection"/> 
              objects to use dynamic and parameterized filters.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.IFilterParameterCollection.GetParameters">
            <summary>
            Gets a collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects
            </summary>
            <returns><see cref="T:LibraryManagement.Dao.SqlFilterParameterCollection"/> object</returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlFilterBuilder&lt;EntityColumn&gt; class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.Append(System.String,`0,System.String,System.Boolean)">
            <summary>
            Appends the specified column and search text to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotEquals(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter
            as a NOT EQUALS expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,`0,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter.
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotIn(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Appends the specified column and list of values to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotInQuery(System.String,`0,System.String)">
            <summary>
            Appends the specified sub-query to the current filter
            as a NOT IN expression.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotRange(System.String,`0,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotRange(System.String,System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value not in range to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendGreaterThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendGreaterThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendLessThan(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendLessThanOrEqual(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendStartsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendStartsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendEndsWith(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendEndsWith(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotContains(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendNotContains(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendLike(System.String,`0,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.AppendLike(System.String,System.String,System.String)">
            <summary>
            Appends the specified column and value to the current filter.
            </summary>
            <param name="junction"></param>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.Parse(System.String,System.String,System.Boolean)">
            <summary>
            Parses the specified searchText to create a SQL filter expression.
            </summary>
            <param name="column"></param>
            <param name="searchText"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.GetInQueryValues(System.String,System.Boolean)">
            <summary>
            Gets an encoded list of values for use with an IN clause.
            </summary>
            <param name="values"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.GetParameters">
            <summary>
            Gets the current collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.Clear">
            <summary>
            Clear the Parameters as well as the base
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.LibraryManagement#Dao#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UnitParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UnitParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UnitParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UnitSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Unit"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlSortBuilder`1">
            <summary>
            Allows for building SQL OrderBy expressions using strongly-typed column enumeration values.
            </summary>
            <typeparam name="EntityColumn">An enumeration of entity column names.</typeparam>
        </member>
        <member name="T:LibraryManagement.Dao.ISortColumnCollection">
            <summary>
              Represents a type which will contain a method to 
              retrieve the A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumnCollection"/> 
              objects to generate an OrderBy clause.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ISortColumnCollection.GetSortColumns">
            <summary>
            Gets a collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects
            </summary>
            <returns><see cref="T:LibraryManagement.Dao.SqlSortColumnCollection"/> object</returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the SqlFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.Append(System.Enum,LibraryManagement.Dao.SqlSortDirection)">
            <summary>
            Appends the specified column and sorts it by the specified SqlSortDirection 
            </summary>
            <param name="column">The column to sort</param>
            <param name="sortDirection">The specified column's sort direction</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.AppendASC(System.Enum)">
            <summary>
            Appends the specified column and sorts it Ascending
            </summary>
            <param name="column">The column to sort</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.AppendDESC(System.Enum)">
            <summary>
            Appends the specified column and sorts it Descending
            </summary>
            <param name="column">The column to sort</param>
            <returns></returns>
        </member>
        <member name="F:LibraryManagement.Dao.SqlSortBuilder`1.sortColumns">
            <summary>
            The Sort Columns member variable.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.AddColumn(System.Enum,LibraryManagement.Dao.SqlSortDirection)">
            <summary>
            Adds a column to the sort builder
            </summary>
            <param name="column">The entity's column to sort by</param>
            <param name="sortDirection">The sort direction</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.ToString">
            <summary>
            Provides the actual SQL sort string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.GetColumnName(`0)">
            <summary>
            Gets the column name from the specified column enumeration value.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.GetSortColumns">
            <summary>
            Gets the current collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects and
            also sets the collection's FilterExpression property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortBuilder`1.LibraryManagement#Dao#ISortColumnCollection#GetSortColumns">
            <summary>
            Gets a collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects 
            </summary>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.SqlSortBuilder`1.SortColumns">
            <summary>
            Gets or sets the SortColumns property.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UnitSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the UnitSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MofSysProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.MofSysProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MofSysKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MofSysKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.GetById(System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblMof_sys index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMof_sys index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMof_sys index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMof_sys index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMof_sys index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMof_sys index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MofSys"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.MofSys},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;MofSys&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.MofSys)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.MofSys"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.MofSys"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.MofSys)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.MofSys"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.MofSys"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MofSys,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.MofSys"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.MofSys Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MofSys,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.MofSys object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.MofSys instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.MofSys Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MofSysChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.MofSys</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MofSysFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MofSys"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the MofSysFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MofSysFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MofSysFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MofSysParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MofSys"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the MofSysParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MofSysParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MofSysParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MofSysSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MofSys"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MofSysSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the MofSysSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ReportsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.ReportsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.ReportsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_idx">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.ReportsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.GetByIdx(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblReports1 index.
            </summary>
            <param name="_idx"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.GetByIdx(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblReports1 index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblReports1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblReports1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.GetByIdx(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblReports1 index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblReports1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Reports"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Reports},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Reports&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Reports)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Reports"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Reports"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Reports)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Reports"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Reports"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Reports,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Reports"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Reports Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Reports,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Reports object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Reports instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Reports Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ReportsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Reports</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ReportsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Reports"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ReportsFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReportsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReportsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ReportsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Reports"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ReportsParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReportsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReportsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ReportsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Reports"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ReportsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the ReportsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.ExpressionParserBase">
            <summary>
            Provides the base functionality required to parse search terms.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.#ctor(System.String,LibraryManagement.Dao.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ExpressionParserBase class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.ParseCore(System.String)">
            <summary>
            Appends the specified search text to the current expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.ParseQuotes(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Parses quoted search terms.
            </summary>
            <param name="searchText"></param>
            <param name="quotedValues"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.IsKeyWord(System.String)">
            <summary>
            Determines whether the specified word is a reserved keyword.
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.AppendOr">
            <summary>
            Appends an OR expression.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.AppendAnd">
            <summary>
            Appends an AND expression.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.AppendSpace">
            <summary>
            Appends an expression separator.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.OpenGrouping">
            <summary>
            Appends a group opened expression.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.CloseGrouping">
            <summary>
            Appends a group closed expression.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ExpressionParserBase.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the expression.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="F:LibraryManagement.Dao.ExpressionParserBase.ignoreCase">
            <summary>
            The IgnoreCase member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.ExpressionParserBase.propertyName">
            <summary>
            The PropertyName member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.ExpressionParserBase.comparisonType">
            <summary>
            The ComparisonType member variable.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.ExpressionParserBase.IgnoreCase">
            <summary>
            Gets or sets the IgnoreCase property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.ExpressionParserBase.PropertyName">
            <summary>
            Gets or sets the PropertyName property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.ExpressionParserBase.ComparisonType">
            <summary>
            Gets or sets the ComparisonType property.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.DataRepository">
            <summary>
            This class represents the Data source repository and gives access to all the underlying providers.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.DataRepository.LoadProvider(LibraryManagement.Dao.Bases.NetTiersProvider)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
        </member>
        <member name="M:LibraryManagement.Dao.DataRepository.LoadProvider(LibraryManagement.Dao.Bases.NetTiersProvider,System.Boolean)">
            <summary>
            Enables the DataRepository to programatically create and 
            pass in a <c>NetTiersProvider</c> during runtime.
            </summary>
            <param name="provider">An instatiated NetTiersProvider.</param>
            <param name="setAsDefault">ability to set any valid provider as the default provider for the DataRepository.</param>
        </member>
        <member name="M:LibraryManagement.Dao.DataRepository.LoadProviders">
            <summary>
             Configuration based provider loading, will load the providers on first call.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.DataRepository.CreateTransaction">
            <summary>
            Creates a new <see cref="T:LibraryManagement.Dao.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.DataRepository.AddConnection(System.String,System.String)">
            <summary>
            Adds the specified connection string to the map of connection strings.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.Providers">
            <summary>
            Gets the provider collection.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.NetTiersSection">
            <summary>
            Gets a reference to the configured NetTiersServiceSection object.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.ConnectionStrings">
            <summary>
            Gets a reference to the ConnectionStringSettings collection.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.Connections">
            <summary>
            Gets the dictionary of connection providers.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.ReportsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Reports"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.AccountProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Account"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.StaffProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Staff"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.PriceProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Price"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.StationsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Stations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.MofSysProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.MofSys"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.PaymentOrderProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.NonPluProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.NonPlu"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.StockInfoProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.StockInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.OnOrderProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.OnOrder"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.UnitProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Unit"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.StoreProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Store"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.UserProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.User"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.TrcodeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Trcode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.UserGrpProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.UserGrp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.SysvarProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Sysvar"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.TransValueProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.TransValue"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.TransactionProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Transaction"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.ModePaymentProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.ModePayment"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.TransnumProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Transnum"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.MercLocationProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.MercLocation"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.CurrencyProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Currency"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.MenusProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Menus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.CustInfoProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.CustInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.CsCardProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.CsCard"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.CustomerProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Customer"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.AccTransProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.AccTrans"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.BookAttrProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.BookAttr"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.AtrCodeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.AtrCode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.DateProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Date"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.BarcodeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Barcode"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.LanguageProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Language"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.FilesProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Files"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.LoanTranProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.LoanTran"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.KitInfoProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.KitInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.LocationProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Location"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.FrmTypeProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.FrmType"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.KitProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Kit"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.GoodsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Goods"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.UtilsProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.Utils"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.GoodsGrpProvider">
            <summary>
             Gets the current instance of the Data Access Logic Component for the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.DataRepository.ConnectionProvider">
            <summary>
            Provides ability to switch connection string at runtime.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.DataRepository.ConnectionProvider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ConnectionProvider class.
            </summary>
            <param name="connectionStringName">The connection string name.</param>
            <param name="connectionString">The provider specific connection information.</param>
        </member>
        <member name="M:LibraryManagement.Dao.DataRepository.ConnectionProvider.LoadProviders">
            <summary>
            Instantiates the configured providers based on the supplied connection string.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.ConnectionProvider.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.DataRepository.ConnectionProvider.Providers">
            <summary>
            Gets the provider collection.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.ReportsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Reports"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ReportsFilters.#ctor">
            <summary>
            Initializes a new instance of the ReportsFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ReportsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReportsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ReportsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReportsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.ReportsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.ReportsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Reports"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ReportsQuery.#ctor">
            <summary>
            Initializes a new instance of the ReportsQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ReportsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReportsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ReportsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ReportsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.AccountFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Account"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccountFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Account"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AccountFilters.#ctor">
            <summary>
            Initializes a new instance of the AccountFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.AccountFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AccountFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.AccountQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.AccountParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Account"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccountParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Account"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AccountQuery.#ctor">
            <summary>
            Initializes a new instance of the AccountQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.AccountQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccountQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AccountQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccountQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.StaffFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Staff"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StaffFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Staff"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StaffFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StaffFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StaffFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StaffFilters.#ctor">
            <summary>
            Initializes a new instance of the StaffFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StaffFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StaffFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StaffFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StaffFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.StaffQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.StaffParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Staff"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StaffParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Staff"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StaffParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StaffParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StaffParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StaffQuery.#ctor">
            <summary>
            Initializes a new instance of the StaffQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StaffQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StaffQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StaffQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StaffQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.PriceFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Price"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PriceFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Price"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PriceFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PriceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PriceFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.PriceFilters.#ctor">
            <summary>
            Initializes a new instance of the PriceFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.PriceFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PriceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.PriceFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PriceFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.PriceQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.PriceParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Price"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PriceParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Price"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PriceParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PriceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PriceParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.PriceQuery.#ctor">
            <summary>
            Initializes a new instance of the PriceQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.PriceQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PriceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.PriceQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PriceQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.StationsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Stations"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StationsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Stations"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StationsFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StationsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StationsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StationsFilters.#ctor">
            <summary>
            Initializes a new instance of the StationsFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StationsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StationsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StationsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StationsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.StationsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.StationsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Stations"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StationsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Stations"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StationsParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StationsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StationsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StationsQuery.#ctor">
            <summary>
            Initializes a new instance of the StationsQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StationsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StationsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StationsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StationsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.MofSysFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MofSys"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.MofSysFilters.#ctor">
            <summary>
            Initializes a new instance of the MofSysFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.MofSysFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MofSysFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MofSysFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MofSysFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.MofSysQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.MofSysParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MofSys"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.MofSysQuery.#ctor">
            <summary>
            Initializes a new instance of the MofSysQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.MofSysQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MofSysQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MofSysQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MofSysQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.PaymentOrderFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PaymentOrderFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentOrderFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentOrderFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentOrderFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.PaymentOrderFilters.#ctor">
            <summary>
            Initializes a new instance of the PaymentOrderFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.PaymentOrderFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentOrderFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.PaymentOrderFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentOrderFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.PaymentOrderQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.PaymentOrderParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PaymentOrderParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentOrderParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentOrderParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentOrderParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.PaymentOrderQuery.#ctor">
            <summary>
            Initializes a new instance of the PaymentOrderQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.PaymentOrderQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentOrderQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.PaymentOrderQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PaymentOrderQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.NonPluFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.NonPlu"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NonPluFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.NonPlu"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the NonPluFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NonPluFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NonPluFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.NonPluFilters.#ctor">
            <summary>
            Initializes a new instance of the NonPluFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.NonPluFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NonPluFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.NonPluFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NonPluFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.NonPluQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.NonPluParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.NonPlu"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NonPluParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.NonPlu"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the NonPluParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NonPluParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NonPluParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.NonPluQuery.#ctor">
            <summary>
            Initializes a new instance of the NonPluQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.NonPluQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the NonPluQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.NonPluQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the NonPluQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.StockInfoFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.StockInfo"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StockInfoFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.StockInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StockInfoFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StockInfoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StockInfoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StockInfoFilters.#ctor">
            <summary>
            Initializes a new instance of the StockInfoFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StockInfoFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StockInfoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StockInfoFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StockInfoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.StockInfoQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.StockInfoParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.StockInfo"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StockInfoParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.StockInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StockInfoParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StockInfoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StockInfoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StockInfoQuery.#ctor">
            <summary>
            Initializes a new instance of the StockInfoQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StockInfoQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StockInfoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StockInfoQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StockInfoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.OnOrderFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.OnOrder"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.OnOrderFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.OnOrder"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OnOrderFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OnOrderFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OnOrderFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.OnOrderFilters.#ctor">
            <summary>
            Initializes a new instance of the OnOrderFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.OnOrderFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OnOrderFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.OnOrderFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OnOrderFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.OnOrderQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.OnOrderParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.OnOrder"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.OnOrderParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.OnOrder"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the OnOrderParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OnOrderParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OnOrderParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.OnOrderQuery.#ctor">
            <summary>
            Initializes a new instance of the OnOrderQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.OnOrderQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the OnOrderQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.OnOrderQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the OnOrderQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.UnitFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Unit"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UnitFilters.#ctor">
            <summary>
            Initializes a new instance of the UnitFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UnitFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UnitFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UnitFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UnitFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.UnitQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.UnitParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Unit"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UnitQuery.#ctor">
            <summary>
            Initializes a new instance of the UnitQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UnitQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UnitQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UnitQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UnitQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.StoreFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Store"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StoreFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Store"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StoreFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StoreFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StoreFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StoreFilters.#ctor">
            <summary>
            Initializes a new instance of the StoreFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StoreFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StoreFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StoreFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StoreFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.StoreQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.StoreParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Store"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StoreParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Store"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the StoreParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StoreParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StoreParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StoreQuery.#ctor">
            <summary>
            Initializes a new instance of the StoreQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StoreQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the StoreQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StoreQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the StoreQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.UserFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.User"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.User"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UserFilters.#ctor">
            <summary>
            Initializes a new instance of the UserFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UserFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UserFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.UserQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.UserParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.User"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.User"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UserQuery.#ctor">
            <summary>
            Initializes a new instance of the UserQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UserQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UserQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.TrcodeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Trcode"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TrcodeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Trcode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrcodeFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrcodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrcodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TrcodeFilters.#ctor">
            <summary>
            Initializes a new instance of the TrcodeFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TrcodeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrcodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TrcodeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrcodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.TrcodeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.TrcodeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Trcode"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TrcodeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Trcode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrcodeParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrcodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrcodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TrcodeQuery.#ctor">
            <summary>
            Initializes a new instance of the TrcodeQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TrcodeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TrcodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TrcodeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TrcodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.UserGrpFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.UserGrp"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserGrpFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.UserGrp"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserGrpFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserGrpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserGrpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UserGrpFilters.#ctor">
            <summary>
            Initializes a new instance of the UserGrpFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UserGrpFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserGrpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UserGrpFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserGrpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.UserGrpQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.UserGrpParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.UserGrp"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserGrpParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.UserGrp"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserGrpParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserGrpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserGrpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UserGrpQuery.#ctor">
            <summary>
            Initializes a new instance of the UserGrpQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UserGrpQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UserGrpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UserGrpQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UserGrpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SysvarFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Sysvar"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.SysvarFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Sysvar"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SysvarFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SysvarFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SysvarFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SysvarFilters.#ctor">
            <summary>
            Initializes a new instance of the SysvarFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SysvarFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SysvarFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SysvarFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SysvarFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.SysvarQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.SysvarParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Sysvar"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.SysvarParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Sysvar"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the SysvarParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SysvarParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SysvarParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SysvarQuery.#ctor">
            <summary>
            Initializes a new instance of the SysvarQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SysvarQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SysvarQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SysvarQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SysvarQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.TransValueFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.TransValue"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransValueFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.TransValue"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransValueFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransValueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransValueFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransValueFilters.#ctor">
            <summary>
            Initializes a new instance of the TransValueFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TransValueFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransValueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransValueFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransValueFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.TransValueQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.TransValueParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.TransValue"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransValueParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.TransValue"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransValueParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransValueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransValueParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransValueQuery.#ctor">
            <summary>
            Initializes a new instance of the TransValueQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TransValueQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransValueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransValueQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransValueQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.TransactionFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transaction"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransactionFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transaction"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransactionFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionFilters.#ctor">
            <summary>
            Initializes a new instance of the TransactionFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.TransactionQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.TransactionParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transaction"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransactionParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transaction"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransactionParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionQuery.#ctor">
            <summary>
            Initializes a new instance of the TransactionQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransactionQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.ModePaymentFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.ModePayment"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ModePaymentFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.ModePayment"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ModePaymentFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModePaymentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModePaymentFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ModePaymentFilters.#ctor">
            <summary>
            Initializes a new instance of the ModePaymentFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ModePaymentFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModePaymentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ModePaymentFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModePaymentFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.ModePaymentQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.ModePaymentParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.ModePayment"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ModePaymentParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.ModePayment"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the ModePaymentParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModePaymentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModePaymentParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ModePaymentQuery.#ctor">
            <summary>
            Initializes a new instance of the ModePaymentQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ModePaymentQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ModePaymentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ModePaymentQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ModePaymentQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.TransnumFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transnum"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransnumFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transnum"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransnumFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransnumFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransnumFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransnumFilters.#ctor">
            <summary>
            Initializes a new instance of the TransnumFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TransnumFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransnumFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransnumFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransnumFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.TransnumQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.TransnumParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transnum"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransnumParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transnum"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransnumParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransnumParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransnumParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransnumQuery.#ctor">
            <summary>
            Initializes a new instance of the TransnumQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TransnumQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the TransnumQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransnumQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TransnumQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.MercLocationFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MercLocation"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MercLocationFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MercLocation"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the MercLocationFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MercLocationFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MercLocationFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MercLocationFilters.#ctor">
            <summary>
            Initializes a new instance of the MercLocationFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.MercLocationFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MercLocationFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MercLocationFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MercLocationFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.MercLocationQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.MercLocationParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MercLocation"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MercLocationParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MercLocation"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the MercLocationParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MercLocationParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MercLocationParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MercLocationQuery.#ctor">
            <summary>
            Initializes a new instance of the MercLocationQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.MercLocationQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MercLocationQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MercLocationQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MercLocationQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.CurrencyFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Currency"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CurrencyFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Currency"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrencyFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CurrencyFilters.#ctor">
            <summary>
            Initializes a new instance of the CurrencyFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.CurrencyFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CurrencyFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.CurrencyQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.CurrencyParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Currency"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CurrencyParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Currency"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrencyParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CurrencyQuery.#ctor">
            <summary>
            Initializes a new instance of the CurrencyQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.CurrencyQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CurrencyQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CurrencyQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.MenusFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Menus"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MenusFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Menus"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the MenusFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MenusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MenusFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MenusFilters.#ctor">
            <summary>
            Initializes a new instance of the MenusFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.MenusFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MenusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MenusFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MenusFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.MenusQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.MenusParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Menus"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MenusParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Menus"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the MenusParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MenusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MenusParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MenusQuery.#ctor">
            <summary>
            Initializes a new instance of the MenusQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.MenusQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the MenusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.MenusQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MenusQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.CustInfoFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CustInfo"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustInfoFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CustInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustInfoFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustInfoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustInfoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CustInfoFilters.#ctor">
            <summary>
            Initializes a new instance of the CustInfoFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.CustInfoFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustInfoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CustInfoFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustInfoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.CustInfoQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.CustInfoParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CustInfo"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustInfoParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CustInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustInfoParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustInfoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustInfoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CustInfoQuery.#ctor">
            <summary>
            Initializes a new instance of the CustInfoQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.CustInfoQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustInfoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CustInfoQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustInfoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.CsCardFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CsCard"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CsCardFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CsCard"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CsCardFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CsCardFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CsCardFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CsCardFilters.#ctor">
            <summary>
            Initializes a new instance of the CsCardFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.CsCardFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CsCardFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CsCardFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CsCardFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.CsCardQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.CsCardParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CsCard"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CsCardParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CsCard"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CsCardParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CsCardParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CsCardParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CsCardQuery.#ctor">
            <summary>
            Initializes a new instance of the CsCardQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.CsCardQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CsCardQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CsCardQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CsCardQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.CustomerFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Customer"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustomerFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Customer"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CustomerFilters.#ctor">
            <summary>
            Initializes a new instance of the CustomerFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.CustomerFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CustomerFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.CustomerQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.CustomerParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Customer"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustomerParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Customer"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CustomerQuery.#ctor">
            <summary>
            Initializes a new instance of the CustomerQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.CustomerQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.CustomerQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CustomerQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.AccTransFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AccTrans"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccTransFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AccTrans"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccTransFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccTransFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccTransFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AccTransFilters.#ctor">
            <summary>
            Initializes a new instance of the AccTransFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.AccTransFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccTransFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AccTransFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccTransFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.AccTransQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.AccTransParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AccTrans"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccTransParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AccTrans"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccTransParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccTransParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccTransParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AccTransQuery.#ctor">
            <summary>
            Initializes a new instance of the AccTransQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.AccTransQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AccTransQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AccTransQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AccTransQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.BookAttrFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.BookAttr"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BookAttrFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.BookAttr"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BookAttrFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BookAttrFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BookAttrFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.BookAttrFilters.#ctor">
            <summary>
            Initializes a new instance of the BookAttrFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.BookAttrFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BookAttrFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.BookAttrFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BookAttrFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.BookAttrQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.BookAttrParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.BookAttr"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BookAttrParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.BookAttr"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BookAttrParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BookAttrParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BookAttrParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.BookAttrQuery.#ctor">
            <summary>
            Initializes a new instance of the BookAttrQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.BookAttrQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BookAttrQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.BookAttrQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BookAttrQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.AtrCodeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AtrCode"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AtrCodeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AtrCode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AtrCodeFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AtrCodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AtrCodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AtrCodeFilters.#ctor">
            <summary>
            Initializes a new instance of the AtrCodeFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.AtrCodeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AtrCodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AtrCodeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AtrCodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.AtrCodeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.AtrCodeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AtrCode"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AtrCodeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AtrCode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the AtrCodeParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AtrCodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AtrCodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AtrCodeQuery.#ctor">
            <summary>
            Initializes a new instance of the AtrCodeQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.AtrCodeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the AtrCodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.AtrCodeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the AtrCodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.DateFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Date"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DateFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Date"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DateFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DateFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.DateFilters.#ctor">
            <summary>
            Initializes a new instance of the DateFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.DateFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.DateFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DateFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.DateQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.DateParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Date"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DateParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Date"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the DateParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DateParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.DateQuery.#ctor">
            <summary>
            Initializes a new instance of the DateQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.DateQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the DateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.DateQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the DateQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.BarcodeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Barcode"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BarcodeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Barcode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BarcodeFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BarcodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BarcodeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.BarcodeFilters.#ctor">
            <summary>
            Initializes a new instance of the BarcodeFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.BarcodeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BarcodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.BarcodeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BarcodeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.BarcodeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.BarcodeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Barcode"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BarcodeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Barcode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the BarcodeParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BarcodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BarcodeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.BarcodeQuery.#ctor">
            <summary>
            Initializes a new instance of the BarcodeQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.BarcodeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the BarcodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.BarcodeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BarcodeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.LanguageFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Language"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LanguageFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Language"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LanguageFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LanguageFilters.#ctor">
            <summary>
            Initializes a new instance of the LanguageFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.LanguageFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LanguageFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.LanguageQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.LanguageParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Language"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LanguageParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Language"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LanguageParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LanguageQuery.#ctor">
            <summary>
            Initializes a new instance of the LanguageQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.LanguageQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LanguageQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LanguageQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.FilesFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Files"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FilesFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Files"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FilesFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FilesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FilesFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FilesFilters.#ctor">
            <summary>
            Initializes a new instance of the FilesFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.FilesFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FilesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FilesFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FilesFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.FilesQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.FilesParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Files"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FilesParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Files"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FilesParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FilesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FilesParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FilesQuery.#ctor">
            <summary>
            Initializes a new instance of the FilesQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.FilesQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FilesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FilesQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FilesQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.LoanTranFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.LoanTran"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LoanTranFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.LoanTran"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LoanTranFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LoanTranFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LoanTranFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LoanTranFilters.#ctor">
            <summary>
            Initializes a new instance of the LoanTranFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.LoanTranFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LoanTranFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LoanTranFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LoanTranFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.LoanTranQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.LoanTranParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.LoanTran"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LoanTranParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.LoanTran"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LoanTranParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LoanTranParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LoanTranParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LoanTranQuery.#ctor">
            <summary>
            Initializes a new instance of the LoanTranQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.LoanTranQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LoanTranQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LoanTranQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LoanTranQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.KitInfoFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.KitInfo"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitInfoFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.KitInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KitInfoFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KitInfoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KitInfoFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.KitInfoFilters.#ctor">
            <summary>
            Initializes a new instance of the KitInfoFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.KitInfoFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KitInfoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.KitInfoFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KitInfoFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.KitInfoQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.KitInfoParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.KitInfo"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitInfoParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.KitInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KitInfoParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KitInfoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KitInfoParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.KitInfoQuery.#ctor">
            <summary>
            Initializes a new instance of the KitInfoQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.KitInfoQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KitInfoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.KitInfoQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KitInfoQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.LocationFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Location"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LocationFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Location"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LocationFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LocationFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LocationFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LocationFilters.#ctor">
            <summary>
            Initializes a new instance of the LocationFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.LocationFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LocationFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LocationFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LocationFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.LocationQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.LocationParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Location"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LocationParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Location"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the LocationParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LocationParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LocationParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LocationQuery.#ctor">
            <summary>
            Initializes a new instance of the LocationQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.LocationQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the LocationQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.LocationQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the LocationQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.FrmTypeFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.FrmType"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FrmTypeFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.FrmType"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FrmTypeFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FrmTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FrmTypeFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FrmTypeFilters.#ctor">
            <summary>
            Initializes a new instance of the FrmTypeFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.FrmTypeFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FrmTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FrmTypeFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FrmTypeFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.FrmTypeQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.FrmTypeParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.FrmType"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FrmTypeParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.FrmType"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the FrmTypeParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FrmTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FrmTypeParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FrmTypeQuery.#ctor">
            <summary>
            Initializes a new instance of the FrmTypeQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.FrmTypeQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the FrmTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FrmTypeQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FrmTypeQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.KitFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Kit"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Kit"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KitFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KitFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KitFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.KitFilters.#ctor">
            <summary>
            Initializes a new instance of the KitFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.KitFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KitFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.KitFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KitFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.KitQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.KitParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Kit"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Kit"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the KitParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KitParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KitParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.KitQuery.#ctor">
            <summary>
            Initializes a new instance of the KitQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.KitQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the KitQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.KitQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the KitQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.GoodsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Goods"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Goods"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GoodsFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsFilters.#ctor">
            <summary>
            Initializes a new instance of the GoodsFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.GoodsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.GoodsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Goods"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Goods"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GoodsParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsQuery.#ctor">
            <summary>
            Initializes a new instance of the GoodsQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.UtilsFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Utils"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UtilsFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Utils"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UtilsFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UtilsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UtilsFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UtilsFilters.#ctor">
            <summary>
            Initializes a new instance of the UtilsFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UtilsFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UtilsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UtilsFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UtilsFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.UtilsQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.UtilsParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Utils"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UtilsParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Utils"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the UtilsParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UtilsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UtilsParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UtilsQuery.#ctor">
            <summary>
            Initializes a new instance of the UtilsQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.UtilsQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the UtilsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.UtilsQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the UtilsQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.GoodsGrpFilters">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsGrpFilterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpFilterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GoodsGrpFilterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpFilterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsGrpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpFilterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsGrpFilterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsGrpFilters.#ctor">
            <summary>
            Initializes a new instance of the GoodsGrpFilters class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsGrpFilters.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsGrpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsGrpFilters.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsGrpFilters class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.GoodsGrpQuery">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.Bases.GoodsGrpParameterBuilder"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsGrpParameterBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.ParameterizedSqlFilterBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpParameterBuilder.#ctor">
            <summary>
            Initializes a new instance of the GoodsGrpParameterBuilder class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpParameterBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsGrpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpParameterBuilder.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsGrpParameterBuilder class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsGrpQuery.#ctor">
            <summary>
            Initializes a new instance of the GoodsGrpQuery class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsGrpQuery.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsGrpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
        </member>
        <member name="M:LibraryManagement.Dao.GoodsGrpQuery.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the GoodsGrpQuery class.
            </summary>
            <param name="ignoreCase">Specifies whether to create case-insensitive statements.</param>
            <param name="useAnd">Specifies whether to combine statements using AND or OR.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.GoodsGrpProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.GoodsGrpKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.GoodsGrpKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblGoodsGrp index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoodsGrp index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoodsGrp index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoodsGrp index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoodsGrp index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoodsGrp index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.GoodsGrp},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;GoodsGrp&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.GoodsGrp)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.GoodsGrp)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.GoodsGrp,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.GoodsGrp Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.GoodsGrp,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.GoodsGrp object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.GoodsGrp instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.GoodsGrp Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsGrpChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.GoodsGrp</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsGrpSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.GoodsGrp"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsGrpSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the GoodsGrpSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LanguageProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.LanguageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LanguageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LanguageKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.GetById(System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblLanguage index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLanguage index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLanguage index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLanguage index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLanguage index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLanguage index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Language"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Language},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Language&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Language)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Language"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Language"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Language)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Language"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Language"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Language,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Language"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Language Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Language,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Language object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Language instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Language Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LanguageChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Language</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LanguageSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Language"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LanguageSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the LanguageSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccTransChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.AccTrans</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccTransSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AccTrans"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccTransSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccTransSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustomerProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.CustomerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustomerProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.CustomerProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CustomerKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CustomerKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblCustomer index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustomer index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustomer index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustomer index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustomer index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustomer index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Customer"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Customer},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Customer&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Customer)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Customer"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Customer"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Customer)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Customer"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Customer"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Customer,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Customer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Customer Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Customer,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Customer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Customer instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Customer Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UnitProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.UnitProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PaymentOrderProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.PaymentOrderProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.PaymentOrderProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.PaymentOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transNum">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.PaymentOrderKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.GetByTransNum(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblAtransInfo index.
            </summary>
            <param name="_transNum"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.GetByTransNum(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtransInfo index.
            </summary>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.GetByTransNum(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtransInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.GetByTransNum(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtransInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.GetByTransNum(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtransInfo index.
            </summary>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.GetByTransNum(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtransInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.PaymentOrder},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;PaymentOrder&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.PaymentOrder)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.PaymentOrder)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.PaymentOrder,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.PaymentOrder Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.PaymentOrder,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.PaymentOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.PaymentOrder instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.PaymentOrder Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="T:LibraryManagement.Dao.IEntityViewProvider`1">
            <summary>
            Defines the common data access methods that can be used by the
            ReadOnlyDataSource control to interact with the underlying data store.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityViewProvider`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityViewProvider`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityViewProvider`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.IEntityViewProvider`1.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetAll">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks>Uses connection string object was created with.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetAll(LibraryManagement.Dao.TransactionManager)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetAll(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(LibraryManagement.Dao.TransactionManager)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Get(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetPaged(LibraryManagement.Dao.TransactionManager,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetPaged(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetPaged(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.GetTotalItems(LibraryManagement.Dao.TransactionManager,System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            </summary>
            <param name="mgr">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.IFilterParameterCollection,LibraryManagement.Dao.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter and sort conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.EntityViewProviderBaseCore`1.Find(LibraryManagement.Dao.TransactionManager,LibraryManagement.Dao.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UtilsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.UtilsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UtilsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.Delete(System.Byte)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Byte)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UtilsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.GetById(System.Byte)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblUtils index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.GetById(System.Byte,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUtils index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Byte)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUtils index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Byte,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUtils index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.GetById(System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUtils index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Byte,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUtils index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Utils"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Utils},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Utils&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Utils)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Utils"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Utils"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Utils)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Utils"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Utils"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Utils,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Utils"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Utils Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Utils,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Utils object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Utils instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Utils Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UtilsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Utils</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UtilsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Utils"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UtilsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the UtilsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LocationProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.LocationProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LocationProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.LocationProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LocationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_stkId">. Primary Key.</param>
            <param name="_locId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_stkId">. Primary Key.</param>
            <param name="_locId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LocationKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.GetByStkIdLocId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblLocation index.
            </summary>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.GetByStkIdLocId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLocation index.
            </summary>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.GetByStkIdLocId(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLocation index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.GetByStkIdLocId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLocation index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.GetByStkIdLocId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLocation index.
            </summary>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.GetByStkIdLocId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLocation index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_stkId"></param>
            <param name="_locId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Location"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Location},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Location&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Location)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Location"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Location"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Location)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Location"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Location"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Location,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Location"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Location Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Location,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Location object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Location instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Location Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AtrCodeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.AtrCodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.AtrCodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AtrCodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transCode">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transCode">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AtrCodeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.GetByTransCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblAtrCode index.
            </summary>
            <param name="_transCode"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.GetByTransCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtrCode index.
            </summary>
            <param name="_transCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.GetByTransCode(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtrCode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.GetByTransCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtrCode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.GetByTransCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtrCode index.
            </summary>
            <param name="_transCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.GetByTransCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAtrCode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.AtrCode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.AtrCode},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;AtrCode&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.AtrCode)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.AtrCode"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.AtrCode"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.AtrCode)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.AtrCode"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.AtrCode"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AtrCode,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.AtrCode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.AtrCode Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AtrCode,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.AtrCode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.AtrCode instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.AtrCode Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserGrpProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.UserGrpProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.UserGrpProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UserGrpKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UserGrpKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblUserGrp index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUserGrp index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUserGrp index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUserGrp index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUserGrp index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUserGrp index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.UserGrp"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.UserGrp},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;UserGrp&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.UserGrp)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.UserGrp"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.UserGrp"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.UserGrp)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.UserGrp"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.UserGrp"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UserGrp,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.UserGrp"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.UserGrp Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UserGrp,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.UserGrp object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.UserGrp instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.UserGrp Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PriceProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.PriceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.PriceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.PriceKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.GetByGoodsId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblPrice index.
            </summary>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.GetByGoodsId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblPrice index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblPrice index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblPrice index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.GetByGoodsId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblPrice index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblPrice index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Price"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Price},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Price&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Price)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Price"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Price"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Price)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Price"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Price"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Price,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Price"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Price Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Price,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Price object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Price instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Price Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PriceChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Price</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PriceSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Price"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PriceSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the PriceSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PriceProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.PriceProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlUtil">
            <summary>
            Provides utility methods for generating SQL expressions.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.AND">
            <summary>
            SQL AND keyword.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.OR">
            <summary>
            SQL OR keyword.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.ASC">
            <summary>
            SQL ASC keyword.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.DESC">
            <summary>
            SQL DESC keyword.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.NULL">
            <summary>
            SQL NULL keyword.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.TOKEN">
            <summary>
            Used to represent quoted search terms.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.QUOTE">
            <summary>
            Delimiter for quoted search terms.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.STAR">
            <summary>
            Used as wildcard character within search text.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.WILD">
            <summary>
            SQL wildcard character.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.LEFT">
            <summary>
            SQL grouping open character.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.RIGHT">
            <summary>
            SQL grouping close character.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.COMMA">
            <summary>
            Delimiter for optional search terms.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlUtil.PAGE_INDEX">
            <summary>
            PageIndex Temp Table
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Equals(System.String,System.String)">
            <summary>
            Creates an <see cref="F:LibraryManagement.Dao.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates an <see cref="F:LibraryManagement.Dao.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Equals(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an <see cref="F:LibraryManagement.Dao.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Equals(System.String)">
            <summary>
            Encodes the value for a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Contains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Contains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Contains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.NotContains(System.String,System.String)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.NotContains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.NotContains(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.NotContains(System.String)">
            <summary>
            Encodes the value for a <see cref="F:LibraryManagement.Dao.SqlComparisonType.NotContains"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.StartsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.StartsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.StartsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:LibraryManagement.Dao.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.EndsWith(System.String,System.String)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.EndsWith(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.EndsWith(System.String)">
            <summary>
            Encodes the value for a <see cref="F:LibraryManagement.Dao.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Like(System.String,System.String)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Like(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Like(System.String)">
            <summary>
            Encodes the value for a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.NotLike(System.String,System.String)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.NotLike(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.NotLike(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.NotLike(System.String)">
            <summary>
            Encodes the value for a <see cref="F:LibraryManagement.Dao.SqlComparisonType.NotLike"/> expression.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.IsNull(System.String)">
            <summary>
            Creates an IS NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.IsNotNull(System.String)">
            <summary>
            Creates an IS NOT NULL expression.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Encode(System.String)">
            <summary>
            Encodes the specified value for use in SQL expressions.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Encode(System.String,System.Boolean)">
            <summary>
            Encodes the specified value for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="value"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Encode(System.String[])">
            <summary>
            Encodes the specified values for use in SQL expressions.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.Encode(System.String[],System.Boolean)">
            <summary>
            Encodes the specified values for use in SQL expressions and
            optionally surrounds the value with single-quotes.
            </summary>
            <param name="values"></param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.GetLikeFormat(System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.GetLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.GetNotLikeFormat(System.Boolean)">
            <summary>
            Gets the not like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.GetNotLikeFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the not like format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.GetEqualFormat(System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlUtil.GetEqualFormat(System.Boolean,System.Boolean)">
            <summary>
            Gets the equal format string.
            </summary>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <param name="surround"></param>
            <returns></returns>
        </member>
        <member name="T:LibraryManagement.Dao.SqlComparisonType">
            <summary>
            Enumeration of SQL expression comparison types.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlComparisonType.Equals">
            <summary>
            Represents = value.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlComparisonType.StartsWith">
            <summary>
            Represents LIKE value%.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlComparisonType.EndsWith">
            <summary>
            Represents LIKE %value.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlComparisonType.Contains">
            <summary>
            Represents LIKE %value%.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlComparisonType.NotContains">
            <summary>
            Represents NOT LIKE %value%.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlComparisonType.Like">
            <summary>
            Represents LIKE value.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlComparisonType.NotLike">
            <summary>
            Represents NOT LIKE value.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlFilterType">
            <summary>
            Enumeration of SQL Filter Types.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlFilterType.Word">
            <summary>
            Represents an Individual Word filter
            </summary>
            <example>(if using <see cref="F:LibraryManagement.Dao.SqlComparisonType.Contains"/>) CompanyName LIKE "%Acme" AND CompanyName LIKE "Company%"</example>
        </member>
        <member name="F:LibraryManagement.Dao.SqlFilterType.Phrase">
            <summary>
            Represents a Phrase filter
            </summary>
            <example>(if using <see cref="F:LibraryManagement.Dao.SqlComparisonType.Contains"/>) CompanyName LIKE "%Acme Company%"</example>
        </member>
        <member name="T:LibraryManagement.Dao.SqlSortDirection">
            <summary>
            Enumeration of SQL expression Sort Directions
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlSortDirection.ASC">
            <summary>
            Database Ascending
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlSortDirection.DESC">
            <summary>
            Database Descending
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.EntityViewProviderBase`1">
            <summary>
            Serves as the base class for objects that provide data access functionality.
            Provides a default implementation of the IEntityViewProvider&lt;Entity&gt; interface.
            </summary>
            <typeparam name="Entity">The class of the business object being accessed.</typeparam>
            <remarks>
            This file is generated once and will never be overwritten.
            </remarks>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.KitProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.KitProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.KitKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.KitKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblKit index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Kit"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Kit},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Kit&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Kit)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Kit"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Kit"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Kit)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Kit"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Kit"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Kit,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Kit"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Kit Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Kit,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Kit object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Kit instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Kit Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransnumProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.TransnumProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransnumKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transType">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transType">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransnumKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.GetByTransType(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblTransnum index.
            </summary>
            <param name="_transType"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.GetByTransType(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransnum index.
            </summary>
            <param name="_transType"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.GetByTransType(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransnum index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transType"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.GetByTransType(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransnum index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transType"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.GetByTransType(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransnum index.
            </summary>
            <param name="_transType"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.GetByTransType(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransnum index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transType"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transnum"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Transnum},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Transnum&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Transnum)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Transnum"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Transnum"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Transnum)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Transnum"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Transnum"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Transnum,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Transnum"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Transnum Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Transnum,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Transnum object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Transnum instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Transnum Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransnumChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Transnum</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransnumSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transnum"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransnumSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransnumSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.ModePaymentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.ModePaymentKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_pmtMode">. Primary Key.</param>
            <param name="_forex">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_pmtMode">. Primary Key.</param>
            <param name="_forex">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.ModePaymentKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.GetByPmtModeForex(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblModePayment index.
            </summary>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.GetByPmtModeForex(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblModePayment index.
            </summary>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.GetByPmtModeForex(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblModePayment index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.GetByPmtModeForex(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblModePayment index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.GetByPmtModeForex(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblModePayment index.
            </summary>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.GetByPmtModeForex(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblModePayment index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_pmtMode"></param>
            <param name="_forex"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.ModePayment"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.ModePayment},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;ModePayment&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.ModePayment)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.ModePayment"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.ModePayment"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.ModePayment)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.ModePayment"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.ModePayment"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.ModePayment,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.ModePayment"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.ModePayment Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.ModePayment,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.ModePayment object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.ModePayment instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.ModePayment Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ModePaymentChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.ModePayment</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ModePaymentSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.ModePayment"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ModePaymentSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the ModePaymentSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransValueProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.TransValueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransValueKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transNum">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransValueKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.GetByTransNum(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblTransValue index.
            </summary>
            <param name="_transNum"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.GetByTransNum(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransValue index.
            </summary>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.GetByTransNum(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransValue index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.GetByTransNum(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransValue index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.GetByTransNum(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransValue index.
            </summary>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.GetByTransNum(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransValue index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.TransValue"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.TransValue},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;TransValue&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.TransValue)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.TransValue"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.TransValue"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.TransValue)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.TransValue"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.TransValue"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransValue,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.TransValue"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.TransValue Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransValue,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.TransValue object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.TransValue instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.TransValue Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransValueChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.TransValue</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransValueSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.TransValue"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransValueSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransValueSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StoreProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.StoreProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StoreProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.StoreProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StoreKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StoreKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblStore index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStore index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStore index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStore index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStore index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStore index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Store"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Store},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Store&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Store)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Store"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Store"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Store)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Store"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Store"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Store,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Store"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Store Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Store,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Store object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Store instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Store Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PaymentOrderChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.PaymentOrder</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.PaymentOrderSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.PaymentOrder"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.PaymentOrderSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the PaymentOrderSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StockInfoProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.StockInfoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.StockInfoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StockInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StockInfoKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.GetByIdGoodsId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblStockInfo index.
            </summary>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.GetByIdGoodsId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStockInfo index.
            </summary>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.GetByIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStockInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.GetByIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStockInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.GetByIdGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStockInfo index.
            </summary>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.GetByIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStockInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.StockInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.StockInfo},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;StockInfo&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.StockInfo)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.StockInfo"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.StockInfo"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.StockInfo)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.StockInfo"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.StockInfo"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StockInfo,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.StockInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.StockInfo Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StockInfo,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.StockInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.StockInfo instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.StockInfo Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NonPluProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.NonPluProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NonPluProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.NonPluProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.NonPluKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_npluCode">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_npluCode">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.NonPluKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.GetByNpluCodeGoodsId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblNon_Plu index.
            </summary>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.GetByNpluCodeGoodsId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblNon_Plu index.
            </summary>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.GetByNpluCodeGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblNon_Plu index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.GetByNpluCodeGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblNon_Plu index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.GetByNpluCodeGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblNon_Plu index.
            </summary>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.GetByNpluCodeGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblNon_Plu index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_npluCode"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.NonPlu"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.NonPlu},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;NonPlu&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.NonPlu)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.NonPlu"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.NonPlu"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.NonPlu)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.NonPlu"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.NonPlu"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.NonPlu,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.NonPlu"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.NonPlu Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.NonPlu,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.NonPlu object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.NonPlu instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.NonPlu Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ReportsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.ReportsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.GoodsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.GoodsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.GoodsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.GoodsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetByGoodsId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblGoods index.
            </summary>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetByGoodsId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoods index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoods index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoods index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetByGoodsId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoods index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblGoods index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Goods"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetListBook">
            <summary>
            This method wrap the 'usp_tblGoods_GetListBook' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetListBook(System.Int32,System.Int32)">
            <summary>
            This method wrap the 'usp_tblGoods_GetListBook' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetListBook(LibraryManagement.Dao.TransactionManager)">
            <summary>
            This method wrap the 'usp_tblGoods_GetListBook' stored procedure. 
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.GetListBook(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wrap the 'usp_tblGoods_GetListBook' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Goods},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Goods&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Goods)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Goods"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Goods"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Goods)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Goods"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Goods"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Goods,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Goods"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Goods Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Goods,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Goods object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Goods instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Goods Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.FrmTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.FrmTypeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.FrmTypeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.GetById(System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblFrmType index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFrmType index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFrmType index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFrmType index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.GetById(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFrmType index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblFrmType index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.FrmType"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.FrmType},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;FrmType&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.FrmType)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.FrmType"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.FrmType"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.FrmType)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.FrmType"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.FrmType"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.FrmType,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.FrmType"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.FrmType Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.FrmType,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.FrmType object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.FrmType instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.FrmType Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FrmTypeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.FrmType</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FrmTypeSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.FrmType"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FrmTypeSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the FrmTypeSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DateProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.DateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DateProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.DateProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.DateKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.DateKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblDate index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDate index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDate index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDate index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDate index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblDate index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Date"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Date},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Date&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Date)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Date"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Date"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Date)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Date"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Date"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Date,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Date"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Date Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Date,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Date object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Date instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Date Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.SysvarProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.SysvarProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.SysvarKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_mCode">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_mCode">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.SysvarKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.GetByMCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblSysvar index.
            </summary>
            <param name="_mCode"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.GetByMCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblSysvar index.
            </summary>
            <param name="_mCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.GetByMCode(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblSysvar index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_mCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.GetByMCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblSysvar index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_mCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.GetByMCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblSysvar index.
            </summary>
            <param name="_mCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.GetByMCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblSysvar index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_mCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Sysvar"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Sysvar},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Sysvar&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Sysvar)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Sysvar"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Sysvar"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Sysvar)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Sysvar"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Sysvar"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Sysvar,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Sysvar"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Sysvar Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Sysvar,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Sysvar object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Sysvar instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Sysvar Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.SysvarChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Sysvar</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.SysvarSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Sysvar"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.SysvarSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the SysvarSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NonPluChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.NonPlu</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NonPluSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.NonPlu"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NonPluSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the NonPluSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccountProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.AccountProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.Delete(System.Decimal,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_branch">. Primary Key.</param>
            <param name="_accountId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_branch">. Primary Key.</param>
            <param name="_accountId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.AccountKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.GetByBranchAccountId(System.Decimal,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblAccount_1 index.
            </summary>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.GetByBranchAccountId(System.Decimal,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccount_1 index.
            </summary>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.GetByBranchAccountId(LibraryManagement.Dao.TransactionManager,System.Decimal,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccount_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.GetByBranchAccountId(LibraryManagement.Dao.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccount_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.GetByBranchAccountId(System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccount_1 index.
            </summary>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.GetByBranchAccountId(LibraryManagement.Dao.TransactionManager,System.Decimal,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblAccount_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_branch"></param>
            <param name="_accountId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Account"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Account},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Account&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Account)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Account"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Account"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Account)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Account"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Account"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Account,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Account"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Account Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Account,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Account object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Account instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Account Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccountChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Account</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccountSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Account"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AccountSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the AccountSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NetTiersProviderCollection">
            <summary>
            Reprensents the strongly typed collection of NetTiersProvider.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.NetTiersProviderCollection.Add(LibraryManagement.Dao.Bases.NetTiersProvider)">
            <summary>
            Adds the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersProviderCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NetTiersProvider"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DateChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Date</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DateSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Date"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DateSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the DateSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.SysvarProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.SysvarProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.UserProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UserKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.UserKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblUser index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUser index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUser index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUser index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUser index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblUser index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.User"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.User},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;User&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.User)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.User"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.User"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.User)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.User"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.User"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.User,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.User"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.User Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.User,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.User object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.User instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.User Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.User</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.User"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StationsProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.StationsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StationsKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblStations index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStations index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStations index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStations index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStations index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStations index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Stations"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Stations},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Stations&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Stations)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Stations"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Stations"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Stations)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Stations"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Stations"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Stations,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Stations"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Stations Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Stations,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Stations object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Stations instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Stations Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StationsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Stations</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StationsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Stations"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StationsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the StationsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AccountProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.AccountProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LoanTranProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.LoanTranProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.LoanTranProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LoanTranKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transNum">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LoanTranKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.GetByTransNumGoodsId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblLoanTran index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.GetByTransNumGoodsId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLoanTran index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.GetByTransNumGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLoanTran index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.GetByTransNumGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLoanTran index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.GetByTransNumGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLoanTran index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.GetByTransNumGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblLoanTran index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.LoanTran"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.LoanTran},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;LoanTran&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.LoanTran)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.LoanTran"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.LoanTran"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.LoanTran)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.LoanTran"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.LoanTran"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LoanTran,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.LoanTran"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.LoanTran Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.LoanTran,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.LoanTran object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.LoanTran instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.LoanTran Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.TrcodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TrcodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_trCode">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_trCode">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TrcodeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.GetByTrCode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblTrcode index.
            </summary>
            <param name="_trCode"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.GetByTrCode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTrcode index.
            </summary>
            <param name="_trCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.GetByTrCode(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTrcode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_trCode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.GetByTrCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTrcode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_trCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.GetByTrCode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTrcode index.
            </summary>
            <param name="_trCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.GetByTrCode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTrcode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_trCode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Trcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Trcode},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Trcode&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Trcode)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Trcode"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Trcode"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Trcode)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Trcode"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Trcode"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Trcode,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Trcode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Trcode Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Trcode,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Trcode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Trcode instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Trcode Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TrcodeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Trcode</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TrcodeSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Trcode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TrcodeSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the TrcodeSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StoreChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Store</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StoreSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Store"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StoreSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the StoreSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.TransactionManager">
            <summary>
            TransactionManager is utility class that decorates a <see cref="T:System.Data.IDbTransaction"/> instance.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.ITransactionManager">
            <summary>
            TransactionManager interface
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ITransactionManager.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ITransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
        </member>
        <member name="M:LibraryManagement.Dao.ITransactionManager.Commit">
            <summary>
            Commits this instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ITransactionManager.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ITransactionManager.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.ITransactionManager.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:LibraryManagement.Dao.ITransactionManager.Database">
            <summary>
            Gets the database.
            </summary>
            <value>The database.</value>
        </member>
        <member name="P:LibraryManagement.Dao.ITransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:LibraryManagement.Dao.ITransactionManager.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:LibraryManagement.Dao.ITransactionManager.TransactionObject">
            <summary>
            Gets the transaction object.
            </summary>
            <value>The transaction object.</value>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Dao.TransactionManager"/> class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Dao.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionManager.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Dao.TransactionManager"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="providerInvariantName">Name of the provider invariant.</param>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionManager.BeginTransaction">
            <summary>
            Begins a transaction.
            </summary>
            <remarks>The default <see cref="T:System.Data.IsolationLevel"/> mode is ReadCommitted</remarks>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a transaction.
            </summary>
            <param name="isolationLevel">The <see cref="T:System.Data.IsolationLevel"/> level of the transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already open.</exception>
            <exception cref="T:System.Data.DataException"></exception>
            <exception cref="T:System.Data.Common.DbException"></exception>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionManager.Commit">
            <summary>
            Commit the transaction to the datasource.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionManager.Rollback">
            <summary>
            Rollback the transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">If a transaction is not open.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.TransactionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.TransactionManager.ConnectionString">
            <summary>
            Gets or sets the configuration key for database service.
            </summary>
            <remark>Do not change during a transaction.</remark>
            <exception cref="T:System.InvalidOperationException">
            If an attempt to set when the connection is currently open.
            </exception>
        </member>
        <member name="P:LibraryManagement.Dao.TransactionManager.InvariantProviderName">
            <summary>
            Gets or sets the name of the invariant provider.
            </summary>
            <value>The name of the invariant provider.</value>
        </member>
        <member name="P:LibraryManagement.Dao.TransactionManager.Database">
            <summary>
            Gets the <see cref="P:LibraryManagement.Dao.TransactionManager.Database"/> instance.
            </summary>
            <value></value>
        </member>
        <member name="P:LibraryManagement.Dao.TransactionManager.TransactionObject">
            <summary>
            Gets the underlying <see cref="T:System.Data.Common.DbTransaction"/> object.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.TransactionManager.IsOpen">
            <summary>
            Gets a value that indicates if a transaction is currently open and operating. 
            </summary>
            <value>Return true if a transaction session is currently open and operating; otherwise false.</value>
        </member>
        <member name="T:LibraryManagement.Dao.StringTokenizer">
            <summary>
            Implements a StringTokenizer class for splitting a string
            into substrings using a set of delimiters.
            </summary>
            <remarks>
            C# version of the java.util.StringTokenizer class.
            Basicly it's a wrapper class around the <c>String.Split</c> method.<pare/>
            It implements all of it's Java equivalent methods apart from those only needed by the Enumeration interface.
            All implemented Java-compilant methods have their C# equivalents in properties. They however differ in names
            since Java uses the (Hungarian-like) notation <c>runMe()</c> while C# uses Camel-cased <c>RunMe()</c> and thus
            Java's <c>nextToken()</c> method is just an alias of the <c>NextToken</c> property.
            </remarks>
        </member>
        <member name="F:LibraryManagement.Dao.StringTokenizer.DefaultDelimiters">
            <summary>
            String conatining the default set of delimiters which are <c>" \t\n\r\f"</c>:
            the space character, the tab character, the newline character, the carriage-return character, and the form-feed character.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the <see cref="F:DefaultDelimiters">default delimiters</see>.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:LibraryManagement.Dao.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:LibraryManagement.Dao.StringTokenizer.#ctor(System.String,System.Char[])">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string.</param>
        </member>
        <member name="M:LibraryManagement.Dao.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters and optionally returning them as tokens.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:LibraryManagement.Dao.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <see cref="!:String.Empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:LibraryManagement.Dao.StringTokenizer.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a string tokenizer for the specified string using the given delimiters,
            optionally returning them as tokens. Also empty tokens may be returned using the <paramref name="empty"/> string.
            </summary>
            <param name="str">The string to be tokenized.</param>
            <param name="delims">The delimiters used to tokenize the string (each <see cref="!:char"/> will be used as a delimiter).</param>
            <param name="returnDelims">If set to <c>true</c> the encountered delimiters will also be returned as tokens.</param>
            <param name="returnEmpty">If set to <c>true</c> empty tokens will also be returned.</param>
            <param name="empty">The string to be returned as an empty token.</param>
            <exception cref="T:System.NullReferenceException">Thrown when the passed string is <c>null</c></exception>
        </member>
        <member name="M:LibraryManagement.Dao.StringTokenizer.Reset">
            <summary>
            Resets the current position index so that the tokens can be extracted again.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
        </member>
        <member name="M:LibraryManagement.Dao.StringTokenizer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:LibraryManagement.Dao.StringTokenizer.HasMoreTokens">
            <summary>
            Tests if there are more tokens available from this tokenizer's string.
            If this method returns <c>true</c>, then a subsequent
            use of the <see cref="P:NextToken"/> property will successfully return a token.
            </summary>
            <value>
            	<c>true</c> if more tokens are available; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:LibraryManagement.Dao.StringTokenizer.NextToken">
            <summary>
            Gets the next token.
            </summary>
            <value>The next token.</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist.
            Usually caused by not checking if the <see cref="P:HasMoreTokens"/> property returns <c>true</c> before trying to get the next token.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.StringTokenizer.CountTokens">
            <summary>
            Counts the <see cref="!:remaining"/> tokens - the number of times the
            <see cref="P:NextToken"/> property can be used before it throws an exception.
            </summary>
            <value>The number of remaining tokens.</value>
            <seealso cref="P:Count"/>
        </member>
        <member name="P:LibraryManagement.Dao.StringTokenizer.Count">
            <summary>
            Gets the total number of tokens extracted.
            </summary>
            <remarks>
            <see cref="!:Equivalent not available in Java!"/>
            This property returns the total number of extracted tokens,
            contrary to <see cref="P:CountTokens"/>.
            </remarks>
            <value>The number of tokens extracted.</value>
            <seealso cref="P:StringTokenizer.CountTokens"/>
        </member>
        <member name="P:LibraryManagement.Dao.StringTokenizer.Item(System.Int32)">
            <summary>
            Gets the token with the specified index from the tokenizer without moving the current position index.
            </summary>
            <remarks><see cref="!:Equivalent not available in Java!"/></remarks>
            <param name="index">The index of the token to get.</param>
            <value>The token with the given index</value>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when trying to get a token which doesn't exist, that is when <see cref="!:index"/> is equal or greater then <see cref="!:Count"/> or <see cref="!:index"/> is negative.</exception>
        </member>
        <member name="P:LibraryManagement.Dao.StringTokenizer.EmptyString">
            <summary>
            Gets the currently set string for empty tokens.
            </summary>
            <remarks>Default is <c>System.String.Empty</c></remarks>
            <value>The empty token string.</value>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Kit</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Kit"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the KitSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.KitInfoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.KitInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_kitId">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_kitId">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.KitInfoKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.GetByKitIdGoodsId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblKit_info index.
            </summary>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.GetByKitIdGoodsId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit_info index.
            </summary>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.GetByKitIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit_info index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.GetByKitIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit_info index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.GetByKitIdGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit_info index.
            </summary>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.GetByKitIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblKit_info index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_kitId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.KitInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.KitInfo},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;KitInfo&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.KitInfo)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.KitInfo"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.KitInfo"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.KitInfo)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.KitInfo"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.KitInfo"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.KitInfo,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.KitInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.KitInfo Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.KitInfo,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.KitInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.KitInfo instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.KitInfo Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitInfoChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.KitInfo</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitInfoSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.KitInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.KitInfoSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the KitInfoSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LoanTranChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.LoanTran</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LoanTranSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.LoanTran"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LoanTranSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the LoanTranSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustInfoProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.CustInfoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.CustInfoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CustInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_custId">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_custId">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CustInfoKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.GetByCustIdGoodsId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblCust_info index.
            </summary>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.GetByCustIdGoodsId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCust_info index.
            </summary>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.GetByCustIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCust_info index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.GetByCustIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCust_info index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.GetByCustIdGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCust_info index.
            </summary>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.GetByCustIdGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCust_info index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_custId"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CustInfo"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.CustInfo},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;CustInfo&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.CustInfo)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.CustInfo"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.CustInfo"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.CustInfo)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.CustInfo"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.CustInfo"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CustInfo,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.CustInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.CustInfo Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CustInfo,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.CustInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.CustInfo instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.CustInfo Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ModePaymentProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.ModePaymentProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransactionProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.TransactionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransactionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_idx">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.TransactionKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.GetByIdx(System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblTransaction_new index.
            </summary>
            <param name="_idx"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.GetByIdx(System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransaction_new index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransaction_new index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransaction_new index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.GetByIdx(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransaction_new index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblTransaction_new index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Transaction"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Transaction},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Transaction&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Transaction)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Transaction"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Transaction"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Transaction)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Transaction"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Transaction"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Transaction,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Transaction"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Transaction Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Transaction,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Transaction object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Transaction instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Transaction Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransactionChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Transaction</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransactionSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Transaction"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.TransactionSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the TransactionSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.OnOrderProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.OnOrderProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.OnOrderProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.OnOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.Delete(System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_transNum">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum">. Primary Key.</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.OnOrderKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.GetByTransNumGoodsId(System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblOn_order index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.GetByTransNumGoodsId(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblOn_order index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.GetByTransNumGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblOn_order index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.GetByTransNumGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblOn_order index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.GetByTransNumGoodsId(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblOn_order index.
            </summary>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.GetByTransNumGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblOn_order index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_transNum"></param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.OnOrder"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.OnOrder},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;OnOrder&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.OnOrder)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.OnOrder"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.OnOrder"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.OnOrder)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.OnOrder"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.OnOrder"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.OnOrder,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.OnOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.OnOrder Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.OnOrder,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.OnOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.OnOrder instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.OnOrder Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LocationChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Location</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LocationSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Location"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.LocationSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the LocationSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FilesChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Files</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FilesSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Files"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.FilesSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the FilesSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.BookAttrProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.BookAttrKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.BookAttrKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.GetByGoodsId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblBookAttr index.
            </summary>
            <param name="_goodsId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.GetByGoodsId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBookAttr index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBookAttr index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBookAttr index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.GetByGoodsId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBookAttr index.
            </summary>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.GetByGoodsId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBookAttr index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_goodsId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.BookAttr"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.BookAttr},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;BookAttr&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.BookAttr)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.BookAttr"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.BookAttr"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.BookAttr)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.BookAttr"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.BookAttr"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.BookAttr,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.BookAttr"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.BookAttr Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.BookAttr,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.BookAttr object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.BookAttr instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.BookAttr Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BookAttrChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.BookAttr</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BookAttrSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.BookAttr"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BookAttrSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the BookAttrSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustomerChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Customer</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustomerSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Customer"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustomerSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustomerSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CsCardProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.CsCardProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CsCardProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.CsCardProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CsCardKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_cardId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_cardId">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CsCardKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.GetByCardId(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblCustCard index.
            </summary>
            <param name="_cardId"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.GetByCardId(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustCard index.
            </summary>
            <param name="_cardId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.GetByCardId(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustCard index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_cardId"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.GetByCardId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustCard index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_cardId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.GetByCardId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustCard index.
            </summary>
            <param name="_cardId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.GetByCardId(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCustCard index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_cardId"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.CsCard"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.CsCard},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;CsCard&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.CsCard)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.CsCard"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.CsCard"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.CsCard)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.CsCard"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.CsCard"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CsCard,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.CsCard"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.CsCard Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CsCard,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.CsCard object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.CsCard instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.CsCard Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MenusProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.MenusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MenusKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MenusKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.GetById(System.Int32)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblMenus_1 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMenus_1 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMenus_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMenus_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMenus_1 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMenus_1 index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Menus"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Menus},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Menus&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Menus)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Menus"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Menus"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Menus)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Menus"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Menus"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Menus,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Menus"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Menus Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Menus,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Menus object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Menus instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Menus Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MenusChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Menus</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MenusSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Menus"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MenusSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the MenusSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserGrpChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.UserGrp</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserGrpSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.UserGrp"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.UserGrpSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the UserGrpSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StockInfoChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.StockInfo</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StockInfoSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.StockInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StockInfoSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the StockInfoSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.FileConfigurationSourceElement">
            <summary>
            Represents the configuration settings that describe a <see cref="T:LibraryManagement.Dao.FileConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSourceElement.CreateSource">
            <summary>
            Returns a new <see cref="T:LibraryManagement.Dao.FileConfigurationSource"/> configured with the receiver's settings.
            </summary>
            <returns>A new configuration source.</returns>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BarcodeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.BarcodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.BarcodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.BarcodeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_barcode">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_barcode">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.BarcodeKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.GetByBarcode(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblBarcode index.
            </summary>
            <param name="_barcode"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.GetByBarcode(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBarcode index.
            </summary>
            <param name="_barcode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.GetByBarcode(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBarcode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_barcode"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.GetByBarcode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBarcode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_barcode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.GetByBarcode(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBarcode index.
            </summary>
            <param name="_barcode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.GetByBarcode(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblBarcode index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_barcode"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Barcode"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Barcode},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Barcode&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Barcode)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Barcode"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Barcode"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Barcode)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Barcode"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Barcode"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Barcode,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Barcode"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Barcode Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Barcode,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Barcode object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Barcode instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Barcode Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.CurrencyProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CurrencyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.CurrencyKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblCurrency index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCurrency index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCurrency index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCurrency index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCurrency index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblCurrency index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Currency"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Currency},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Currency&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Currency)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Currency"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Currency"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Currency)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Currency"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Currency"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Currency,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Currency"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Currency Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencyProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Currency,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Currency object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Currency instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Currency Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CurrencyChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Currency</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CurrencySortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Currency"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CurrencySortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CurrencySqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransValueProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.TransValueProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StaffProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.StaffProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StaffKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.StaffKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.GetById(System.String)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblStaff index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.GetById(System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStaff index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStaff index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStaff index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.GetById(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStaff index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.GetById(LibraryManagement.Dao.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblStaff index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.Staff"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.Staff},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;Staff&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.Staff)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Staff"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Staff"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.Staff)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.Staff"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Staff"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Staff,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.Staff"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.Staff Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.Staff,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.Staff object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.Staff instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.Staff Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StaffChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Staff</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StaffSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Staff"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.StaffSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the StaffSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.DeepLoadType">
            <summary>
            DeepLoad options for deep loading entities
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.DeepLoadType.IncludeChildren">
            <summary>
            Will Include a child property collection 1 Level Deep
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.DeepLoadType.ExcludeChildren">
            <summary>
            Will Exclude a child property collection
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.DeepLoadType.Ignore">
            <summary>
            Will ignore the request and return the entity.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.DeepSaveType">
            <summary>
            DeepSave options for deep saving entities
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.DeepSaveType.IncludeChildren">
            <summary>Will Include a child property collection</summary>
        </member>
        <member name="F:LibraryManagement.Dao.DeepSaveType.ExcludeChildren">
            <summary>Will Exclude a child property collection</summary>
        </member>
        <member name="F:LibraryManagement.Dao.DeepSaveType.Ignore">
            <summary>Will ignore the request and return the entity.</summary>
        </member>
        <member name="T:LibraryManagement.Dao.Utility">
            <summary>
            Contains some helper function for SQL.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will 
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.DetectSqlInjection(System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.DetectSqlInjection(System.String,System.String)">
            <summary>
            A helper method to attempt to discover known SqlInjection attacks.  
            For use when using one of the flexible non-parameterized access methods, such as GetPaged()
            </summary>
            <param name="whereClause">string of the whereClause to check</param>
            <param name="orderBy">string of the orderBy clause to check</param>
            <returns>true if found, false if not found </returns>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ParseSortExpression(System.Type,System.String)">
            <summary>
            Parses the supplied sort expression parameter to verify that it
            matches the specifed column name enumeration.
            </summary>
            <param name="columnEnum"></param>
            <param name="sortExpression"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ExecuteReader(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ExecuteReader(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns an <see cref="T:System.Data.IDataReader"/> through which the result can be read. 
            It is the responsibility of the caller to close the connection and reader when finished. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>An <see cref="T:System.Data.IDataReader"/> object.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ExecuteNonQuery(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ExecuteNonQuery(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the number of rows affected. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ExecuteDataSet(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ExecuteDataSet(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the results in a new <see cref="T:System.Data.DataSet"/>. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ExecuteScalar(LibraryManagement.Dao.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returns the scalar object. 
            </summary>
            <param name="transactionManager">The transaction to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Utility.ExecuteScalar(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.Data.Common.DbCommand)">
            <summary>
            Executes the <paramref name="dbCommand"/> and returnsthe scalar object. 
            </summary>
            <param name="database">The database to execute the command within.</param>
            <param name="dbCommand">The command that contains the query to execute.</param>
            <returns>A <see cref="T:System.Data.DataSet"/> containing the results of the command.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="T:LibraryManagement.Dao.SqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a SQL WHERE clause.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.#ctor(System.String,LibraryManagement.Dao.SqlComparisonType)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.#ctor(System.String,LibraryManagement.Dao.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the SqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.AppendOr">
            <summary>
            Appends "OR" to the SQL statement.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.AppendAnd">
            <summary>
            Appends "AND" to the SQL statement.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.AppendSpace">
            <summary>
            Appends a space to the SQL statement.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.OpenGrouping">
            <summary>
            Appends a left parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.CloseGrouping">
            <summary>
            Appends a right parentheses to the SQL statement.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.AppendSearchText(System.String)">
            <summary>
            Appends the specified search text to the SQL statement.
            </summary>
            <param name="searchText">The search text to append.</param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.WrapWithSQL(System.String,System.String,System.Boolean)">
            <summary>
            Converts the search text into a valid search expression.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.SqlExpressionParser.Parse(System.String)">
            <summary>
            Parses the specified value into separate search terms.
            </summary>
            <param name="value">The search text.</param>
            <returns>Returns a parsed search phrase.</returns>
        </member>
        <member name="T:LibraryManagement.Dao.ParameterizedSqlExpressionParser">
            <summary>
            Parses search text into an expression that can
            be used in a parameterized SQL WHERE clause.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.#ctor(System.String,LibraryManagement.Dao.SqlComparisonType)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.#ctor(System.String,LibraryManagement.Dao.SqlComparisonType,System.Boolean)">
            <summary>
            Initializes a new instance of the ParameterizedSqlExpressionParser class.
            </summary>
            <param name="propertyName"></param>
            <param name="comparisonType"></param>
            <param name="ignoreCase"></param>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.Contains(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Contains"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.StartsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.StartsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.EndsWith(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.EndsWith"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.Like(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Like"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:LibraryManagement.Dao.ParameterizedSqlExpressionParser.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="F:LibraryManagement.Dao.SqlComparisonType.Equals"/> expression.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="F:LibraryManagement.Dao.ParameterizedSqlExpressionParser.parameters">
            <summary>
            The Parameters member variable.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.ParameterizedSqlExpressionParser.Parameters">
            <summary>
            Gets or sets the Parameters property.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UtilsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.UtilsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Goods</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Goods"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.GoodsSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the GoodsSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.FrmTypeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.FrmTypeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.LanguageProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.LanguageProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AtrCodeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.AtrCode</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.AtrCodeSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.AtrCode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.AtrCodeSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the AtrCodeSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CsCardChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.CsCard</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CsCardSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CsCard"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CsCardSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CsCardSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustInfoChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.CustInfo</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CustInfoSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.CustInfo"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CustInfoSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the CustInfoSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransnumProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.TransnumProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.OnOrderChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.OnOrder</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.OnOrderSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.OnOrder"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.OnOrderSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the OnOrderSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MofSysProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.MofSysProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StationsProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.StationsProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.StringBuilderExpression">
            <summary>
            Represents a SQL filter builder expression enumeration.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.Append">
            <summary>
            Append
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendEquals">
            <summary>
            AppendEquals
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendNotEquals">
            <summary>
            AppendNotEquals
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendIn">
            <summary>
            AppendIn
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendNotIn">
            <summary>
            AppendNotIn
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendInQuery">
            <summary>
            AppendInQuery
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendNotInQuery">
            <summary>
            AppendNotInQuery
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendRange">
            <summary>
            AppendRange
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendNotRange">
            <summary>
            AppendNotRange
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendIsNull">
            <summary>
            AppendIsNull
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendIsNotNull">
            <summary>
            AppendIsNotNull
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendGreaterThan">
            <summary>
            AppendGreaterThan
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendGreaterThanOrEqual">
            <summary>
            AppendGreaterThanOrEqual
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendLessThan">
            <summary>
            AppendLessThan
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendLessThanOrEqual">
            <summary>
            AppendLessThanOrEqual
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendStartsWith">
            <summary>
            AppendStartsWith
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendEndsWith">
            <summary>
            AppendEndsWith
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendContains">
            <summary>
            AppendContains
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendNotContains">
            <summary>
            AppendNotContains
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendLike">
            <summary>
            AppendLike
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.StringBuilderExpression.AppendNotLike">
            <summary>
            AppendLike
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlFilterParameterCollection">
            <summary>
            A collection of <see cref="T:LibraryManagement.Dao.SqlFilterParameter"/> objects.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterParameterCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterParameterCollection.GetParameter(System.String)">
            <summary>
            Gets the next parameter name for the specified value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:LibraryManagement.Dao.SqlFilterParameterCollection.currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlFilterParameterCollection.filterExpression">
            <summary>
            The FilterExpression member variable.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterParameterCollection.LibraryManagement#Dao#IFilterParameterCollection#GetParameters">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.SqlFilterParameterCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlFilterParameterCollection.FilterExpression">
            <summary>
            Gets or sets the FilterExpression property.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlFilterParameter">
            <summary>
            Represents the information needed for a database command parameter.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterParameter.#ctor(System.Enum,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the SqlFilterParameter class.
            </summary>
            <param name="column"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="F:LibraryManagement.Dao.SqlFilterParameter.column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlFilterParameter.parameterValue">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlFilterParameter.parameterIndex">
            <summary>
            The Index member variable.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlFilterParameter.GetValue">
            <summary>
            Gets the current value converted to the appropriate <see cref="T:System.Type"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.SqlFilterParameter.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlFilterParameter.Value">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlFilterParameter.Index">
            <summary>
            Gets the parameter index.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlFilterParameter.Name">
            <summary>
            Gets the parameter name.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlFilterParameter.DbType">
            <summary>
            Gets the <see cref="T:System.Data.SqlDbType"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlFilterParameter.SystemType">
            <summary>
            Gets the <see cref="T:System.Type"/> for
            the current entity column enumeration value.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlSortColumnCollection">
            <summary>
            A collection of <see cref="T:LibraryManagement.Dao.SqlSortColumn"/> objects.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortColumnCollection.SetCurrentColumn(System.Object)">
            <summary>
            Sets the CurrentColumn property.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortColumnCollection.ToString">
            <summary>
            Provides the actual SQL sort string.
            </summary>
            <returns></returns>
        </member>
        <member name="F:LibraryManagement.Dao.SqlSortColumnCollection._currentColumn">
            <summary>
            The CurrentColumn member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlSortColumnCollection.sortExpression">
            <summary>
            The SortExpression member variable.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortColumnCollection.LibraryManagement#Dao#ISortColumnCollection#GetSortColumns">
            <summary>
            Gets a list of sql parameters for the filter 
            </summary>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.SqlSortColumnCollection.CurrentColumn">
            <summary>
            Gets the CurrentColumn property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlSortColumnCollection.SortExpression">
            <summary>
            Gets or sets the SortExpression property.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.SqlSortColumn">
            <summary>
            Represents the information of a sorted column.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.SqlSortColumn.#ctor(System.Enum,LibraryManagement.Dao.SqlSortDirection)">
            <summary>
            Initializes a new instance of the SqlSortColumn class.
            </summary>
            <param name="column"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="F:LibraryManagement.Dao.SqlSortColumn._column">
            <summary>
            The Column member variable.
            </summary>
        </member>
        <member name="F:LibraryManagement.Dao.SqlSortColumn._sortDirection">
            <summary>
            The Value member variable.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlSortColumn.Column">
            <summary>
            Gets or sets the Column property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.SqlSortColumn.SortDirection">
            <summary>
            Gets or sets the Value property.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.KitInfoProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.KitInfoProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.NetTiersServiceSection">
            <summary>
            The class that hold the configuration section for the NetTiers Service.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersServiceSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.NetTiersServiceSection.DefaultProvider">
            <summary>
            Gets or sets the default provider.
            </summary>
            <value>The default provider.</value>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.GoodsGrpProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.GoodsGrpProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.MercLocationProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MercLocationKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.Delete(System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_idx">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.Delete(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx">. Primary Key.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.Get(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MercLocationKey,System.Int32,System.Int32)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="transactionManager">A <see cref="T:LibraryManagement.Dao.TransactionManager"/> object.</param>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.GetByIdx(System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the primary key PK_tblMercLocation index.
            </summary>
            <param name="_idx"></param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.GetByIdx(System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMercLocation index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Decimal)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMercLocation index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMercLocation index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.GetByIdx(System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMercLocation index.
            </summary>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.GetByIdx(LibraryManagement.Dao.TransactionManager,System.Decimal,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_tblMercLocation index.
            </summary>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="_idx"></param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of records.</param>
            <returns>Returns an instance of the <see cref="T:LibraryManagement.Domain.MercLocation"/> class.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.Fill(System.Data.IDataReader,LibraryManagement.Domain.TList{LibraryManagement.Domain.MercLocation},System.Int32,System.Int32)">
            <summary>
            Fill a TList&lt;MercLocation&gt; From a DataReader.
            </summary>
            <param name="reader">Datareader</param>
            <param name="rows">The collection to fill</param>
            <param name="start">Row number at which to start reading, the first row is 0.</param>
            <param name="pageLength">number of rows.</param>
            <returns>a <see cref="T:LibraryManagement.Domain.TList`1"/></returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.RefreshEntity(System.Data.IDataReader,LibraryManagement.Domain.MercLocation)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.MercLocation"/> object from the <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.MercLocation"/> object to refresh.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.RefreshEntity(System.Data.DataSet,LibraryManagement.Domain.MercLocation)">
            <summary>
            Refreshes the <see cref="T:LibraryManagement.Domain.MercLocation"/> object from the <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="dataSet">The <see cref="T:System.Data.DataSet"/> to read from.</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.MercLocation"/> object.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.DeepLoad(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MercLocation,System.Boolean,LibraryManagement.Dao.DeepLoadType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Loads the <see cref="T:LibraryManagement.Domain.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:LibraryManagement.Dao.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="transactionManager"><see cref="T:LibraryManagement.Dao.TransactionManager"/> object</param>
            <param name="entity">The <see cref="T:LibraryManagement.Domain.MercLocation"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LibraryManagement.Domain.MercLocation Property Collection Type Array To Include or Exclude from Load</param>
            <param name="innerList">A collection of child types for easy access.</param>
            <exception cref="T:System.ArgumentNullException">entity or childTypes is null.</exception>
            <exception cref="T:System.ArgumentException">deepLoadType has invalid value.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationProviderBaseCore.DeepSave(LibraryManagement.Dao.TransactionManager,LibraryManagement.Domain.MercLocation,LibraryManagement.Dao.DeepSaveType,System.Type[],LibraryManagement.Dao.Bases.DeepSession)">
            <summary>
            Deep Save the entire object graph of the LibraryManagement.Domain.MercLocation object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entity">LibraryManagement.Domain.MercLocation instance</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LibraryManagement.Domain.MercLocation Property Collection Type Array To Include or Exclude from Save</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MercLocationChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.MercLocation</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MercLocationSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.MercLocation"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.MercLocationSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the MercLocationSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.FileConfigurationSource">
            <summary>
            Represents a configuration source that retrieves configuration information from an arbitrary file.
            </summary>
            <remarks>
            This configuration source uses a <see cref="T:System.Configuration.Configuration"/> object to deserialize 
            configuration, so the configuration file must be a valid .NET Framework configuration file.
            </remarks>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Dao.FileConfigurationSource"/> class.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Dao.FileConfigurationSource"/> class that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:LibraryManagement.Dao.FileConfigurationSource"/> that will refresh changes
            according to the value of the <paramref name="refresh"/> parameter, polling every 
            <paramref name="refreshInterval"/> milliseconds.
            </summary>
            <param name="configurationFilepath">The configuration file path. The path can be absolute or relative.</param>
            <param name="refresh"><see langword="true"/> if changes to the configuration file should be notified.</param>
            <param name="refreshInterval">The poll interval in milliseconds.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.DoAdd(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.DoRemove(System.String)">
            <summary>
            Removes a <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration and saves the configuration source.
            </summary>
            <param name="sectionName">The name of the section to remove.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.Add(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            Adds a <see cref="T:System.Configuration.ConfigurationSection"/> to the configuration and saves the configuration source using encryption.
            </summary>
            <remarks>
            If a configuration section with the specified name already exists it will be replaced.<br/>
            If a configuration section was retrieved from an instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/>, a <see cref="T:System.InvalidOperationException"/> will be thrown.
            </remarks>
            <param name="sectionName">The name by which the <paramref name="configurationSection"/> should be added.</param>
            <param name="configurationSection">The configuration section to add.</param>
            <param name="protectionProviderName">The name of the protection provider to use when encrypting the section.</param>
            <exception cref="T:System.InvalidOperationException">The configuration section was retrieved from an instance of  <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.FileBasedConfigurationSource"/> or <see cref="T:System.Configuration.Configuration"/> and cannot be added to the current source.</exception>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration and saves the configuration file.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.Save(System.String,System.Configuration.ConfigurationSection,System.String)">
            <summary>
            This method supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            Adds or replaces <paramref name="configurationSection"/> under name <paramref name="section"/> in the configuration 
            file and saves the configuration file using encryption.
            </summary>
            <param name="section">The name for the section.</param>
            <param name="configurationSection">The configuration section to add or replace.</param>
            <param name="protectionProvider">The name of the protection provider to use when encrypting the section.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.DoGetSection(System.String)">
            <summary>
            Retrieves the specified <see cref="T:System.Configuration.ConfigurationSection"/> from the configuration file.
            </summary>
            <param name="sectionName">The section name.</param>
            <returns>The section, or <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.RefreshAndValidateSections(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.ICollection{System.String}@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Refreshes the configuration sections from the main configuration file and determines which sections have 
            suffered notifications and should be notified to registered handlers.
            </summary>
            <param name="localSectionsToRefresh">A dictionary with the configuration sections residing in the main 
            configuration file that must be refreshed.</param>
            <param name="externalSectionsToRefresh">A dictionary with the configuration sections residing in external 
            files that must be refreshed.</param>
            <param name="sectionsToNotify">A new collection with the names of the sections that suffered changes and 
            should be notified.</param>
            <param name="sectionsWithChangedConfigSource">A new dictionary with the names and file names of the sections 
            that have changed their location.</param>
        </member>
        <member name="M:LibraryManagement.Dao.FileConfigurationSource.RefreshExternalSections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Refreshes the configuration sections from an external configuration file.
            </summary>
            <param name="sectionsToRefresh">A collection with the names of the sections that suffered changes and should 
            be refreshed.</param>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BarcodeChildEntityTypes">
            <summary>
             Enumeration used to expose the different child entity types 
             for child properties in <c>LibraryManagement.Domain.Barcode</c>
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BarcodeSortBuilder">
            <summary>
            A strongly-typed instance of the <see cref="T:LibraryManagement.Dao.SqlSortBuilder`1"/> class
            that is used exclusively with a <see cref="T:LibraryManagement.Domain.Barcode"/> object.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.BarcodeSortBuilder.#ctor">
            <summary>
            Initializes a new instance of the BarcodeSqlSortBuilder class.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.UserProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.UserProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.StaffProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.StaffProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DeepSessionEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSessionEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSessionEventArgs.#ctor(LibraryManagement.Dao.Bases.DeepSession,System.String,System.Enum,LibraryManagement.Domain.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSessionEventArgs"/> class.
            </summary>
            <param name="deepSession">The Current Deep Session.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSessionEventArgs.#ctor(LibraryManagement.Dao.Bases.DeepSession,System.String,System.Enum,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key"</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="list">The list.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSessionEventArgs.#ctor(LibraryManagement.Dao.Bases.DeepSession,System.String,System.Enum,LibraryManagement.Domain.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="deepSession">The deepSession.</param>
            <param name="currentTypePropertyKey">The Current Key.</param>
            <param name="deepTypeValue">The current Deep Type Value, DeepSaveType/DeepLoadType </param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSessionEventArgs.DeepSession">
            <summary>
            Gets or sets the current DeepSession.
            </summary>
            <value>The DeepSession.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSessionEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSessionEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSessionEventArgs.CurrentTypePropertyKey">
            <summary>
            Gets or Sets the name of the current type property key that 
            will be used to determine if the property will be run in the deep session.
            </summary>
            <value>A string value of the type property key.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSessionEventArgs.DeepTypeValue">
            <summary>
             The current DeepType Value, Either <c>DeepLoadType</c>, or <c>DeepSaveType</c>.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSessionEventArgs.Cancel">
            <summary>
            Gets or sets the Cancel property of the event.
            </summary>
            <value>Current Cancel Value.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSessionEventArgs.Skip">
            <summary>
            Gets or sets the current Skip value.  
            Setting this property will skip the current Deep Property.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CommandEventArgs">
            <summary>
            Event Args used to transfer crucial information just before 
            and after a command is used in the data provider.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CommandEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,LibraryManagement.Domain.IEntity,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The entity.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.CommandEventArgs.#ctor(System.Data.Common.DbCommand,System.String,LibraryManagement.Domain.IEntity)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandEventArgs"/> class.
            </summary>
            <param name="command">The command.</param>
            <param name="methodName">Name of the method.</param>
            <param name="entity">The current entity.</param>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.CommandEventArgs.Command">
            <summary>
            Gets or sets the current command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.CommandEventArgs.MethodName">
            <summary>
            Gets or sets the name of the method.
            </summary>
            <value>The name of the method.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.CommandEventArgs.CurrentEntity">
            <summary>
            Gets or sets the current entity which the action is 
            being acted on.  If there is no entity, this 
            value will be null.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.CommandEventArgs.CurrentEntityList">
            <summary>
            Gets or sets the current .
            </summary>
            <value>The return value.</value>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DeepSession">
            <summary>
            Keeps a weak reference of the entire deep transaction for tracking purposes.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSession.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DeepSession"/> class.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSession.GetSessionObjects">
            <summary>
            Gets the set of current loaded objects.
            </summary>
            <returns>a list of already run objects</returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSession.AddRun(System.Object,System.String)">
            <summary>
            Adds the specified entity property to the collection of properties.
            </summary>
            <param name="entity"></param>
            <param name="key"></param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSession.ContainsType(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSession.ContainsTypeExcluded(System.String)">
            <summary>
            Determines whether the specified obj has run for a specified property type.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSession.HasRun(System.Object,System.String)">
            <summary>
            Determines whether the specified obj has run.
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified obj has run; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSession.GetReference(System.Object,System.String)">
            <summary>
            Get's the reference of the object that has run
            </summary>
            <param name="entity">The entity.</param>
            <param name="key">The key.</param>
            <returns>
            	object of the run reference
            </returns>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.DeepSession.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSession.DeepSessionInnerList">
            <summary>
            Gets the Deep Session nner list.
            </summary>
            <value>The inner list.</value>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSession.CancelSession">
            <summary>
            If set to true, any further requests for this deep session will be canceled.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.DeepSession.SkipChildren">
            <summary>
            If set to true, any further requests for this deep session requesting to Load a child collection will be skipped.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DeepSaveHandle`1">
            <summary>
            Handler for the deep save
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DeepSaveSingleHandle`1">
            <summary>
            Handler for the single deep save
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DeepLoadHandle`1">
            <summary>
            Handler for the deep load
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.DeepLoadSingleHandle`1">
            <summary>
            Handler for the single deep load
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ChildEntityTypeAttribute">
            <summary>
             Attribute used to decorate enumerations with underlying system type.
            </summary>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ChildEntityTypeAttribute.#ctor(System.Type)">
            <summary>
             Marks the underlying type of a child entity property.
             </summary>
             <param name="entityType">Type of the property to load.</param>
        </member>
        <member name="M:LibraryManagement.Dao.Bases.ChildEntityTypeAttribute.GetType(System.Enum)">
            <summary>
            Gets the underlying system type for the specified enumeration value.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.ChildEntityTypeAttribute.EntityType">
            <summary>
            The underlying type for the ChildEntityTypes enumerations.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.IChildEntityProperty">
            <summary>
            Provides a common property used to access the child entity type enumeration value.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.IChildEntityProperty.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.ChildEntityProperty`1">
            <summary>
            A generic wrapper for the generated ChildEntityTypes enumerations.
            </summary>
            <typeparam name="ChildEntityTypesEnum"></typeparam>
        </member>
        <member name="F:LibraryManagement.Dao.Bases.ChildEntityProperty`1.name">
            <summary>
            The Name member variable.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.ChildEntityProperty`1.Name">
            <summary>
            Gets or sets the Name property.
            </summary>
        </member>
        <member name="P:LibraryManagement.Dao.Bases.ChildEntityProperty`1.ChildEntityType">
            <summary>
            Gets the value of the ChildEntityType property.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.BookAttrProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.BookAttrProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.CurrencyProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.CurrencyProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TransactionProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.TransactionProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.TrcodeProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.TrcodeProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MenusProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.MenusProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
        <member name="T:LibraryManagement.Dao.Bases.MercLocationProviderBase">
            <summary>
             This class is the base class for any <see cref="T:LibraryManagement.Dao.Bases.MercLocationProviderBase"/> implementation.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
        </member>
    </members>
</doc>
